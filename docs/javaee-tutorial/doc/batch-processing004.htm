<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:4Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Using the Job Specification Language" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Using the Job Specification Language | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<ul style="list-style-type:none">
<li><a href="batch-processing001.htm#BCGJDEEH"><span class="secnum">55.1</span> Introduction to Batch Processing</a>
<ul style="list-style-type:none">
<li><a href="batch-processing001.htm#sthref2942"><span class="secnum">55.1.1</span> Steps in Batch Jobs</a></li>
<li><a href="batch-processing001.htm#sthref2945"><span class="secnum">55.1.2</span> Parallel Processing</a></li>
<li><a href="batch-processing001.htm#sthref2946"><span class="secnum">55.1.3</span> Status and Decision Elements</a></li>
<li><a href="batch-processing001.htm#sthref2949"><span class="secnum">55.1.4</span> Batch Framework Functionality</a></li>
</ul>
</li>
<li><a href="batch-processing002.htm#BCGGIBHA"><span class="secnum">55.2</span> Batch Processing in Java EE</a>
<ul style="list-style-type:none">
<li><a href="batch-processing002.htm#sthref2951"><span class="secnum">55.2.1</span> The Batch Processing Framework</a></li>
<li><a href="batch-processing002.htm#sthref2953"><span class="secnum">55.2.2</span> Creating Batch Applications</a></li>
<li><a href="batch-processing002.htm#sthref2955"><span class="secnum">55.2.3</span> Elements of a Batch Job</a></li>
<li><a href="batch-processing002.htm#sthref2957"><span class="secnum">55.2.4</span> Properties and Parameters</a></li>
<li><a href="batch-processing002.htm#sthref2959"><span class="secnum">55.2.5</span> Job Instances and Job Executions</a></li>
<li><a href="batch-processing002.htm#sthref2961"><span class="secnum">55.2.6</span> Batch and Exit Status</a></li>
</ul>
</li>
<li><a href="batch-processing003.htm#BCGHBJIG"><span class="secnum">55.3</span> Simple Use Case</a>
<ul style="list-style-type:none">
<li><a href="batch-processing003.htm#sthref2966"><span class="secnum">55.3.1</span> Chunk Step</a></li>
<li><a href="batch-processing003.htm#sthref2968"><span class="secnum">55.3.2</span> Task Step</a></li>
</ul>
</li>
<li><div id="backgroundColor"><a href="batch-processing004.htm#BCGDDBBG"><span class="secnum">55.4</span> Using the Job Specification Language</a><ul style="list-style-type:none">
<li><a href="batch-processing004.htm#sthref2972"><span class="secnum">55.4.1</span> The job Element</a></li>
<li><a href="batch-processing004.htm#sthref2974"><span class="secnum">55.4.2</span> The step Element</a>
<ul style="list-style-type:none">
<li><a href="batch-processing004.htm#sthref2976"><span class="secnum">55.4.2.1</span> The chunk Element</a></li>
<li><a href="batch-processing004.htm#sthref2979"><span class="secnum">55.4.2.2</span> The batchlet Element</a></li>
<li><a href="batch-processing004.htm#sthref2981"><span class="secnum">55.4.2.3</span> The partition Element</a></li>
</ul>
</li>
<li><a href="batch-processing004.htm#sthref2983"><span class="secnum">55.4.3</span> The flow Element</a></li>
<li><a href="batch-processing004.htm#sthref2985"><span class="secnum">55.4.4</span> The split Element</a></li>
<li><a href="batch-processing004.htm#sthref2987"><span class="secnum">55.4.5</span> The decision Element</a></li>
</ul>
</div></li>
<li><a href="batch-processing005.htm#BCGHDHGH"><span class="secnum">55.5</span> Creating Batch Artifacts</a>
<ul style="list-style-type:none">
<li><a href="batch-processing005.htm#sthref2990"><span class="secnum">55.5.1</span> Batch Artifact Interfaces</a></li>
<li><a href="batch-processing005.htm#BCGIFJBB"><span class="secnum">55.5.2</span> Dependency Injection in Batch Artifacts</a></li>
<li><a href="batch-processing005.htm#BCGCJEEF"><span class="secnum">55.5.3</span> Using the Context Objects from the Batch Runtime</a></li>
</ul>
</li>
<li><a href="batch-processing006.htm#BCGCAHCB"><span class="secnum">55.6</span> Submitting Jobs to the Batch Runtime</a>
<ul style="list-style-type:none">
<li><a href="batch-processing006.htm#sthref2997"><span class="secnum">55.6.1</span> Starting a Job</a></li>
<li><a href="batch-processing006.htm#BCGIBGFC"><span class="secnum">55.6.2</span> Checking the Status of a Job</a></li>
<li><a href="batch-processing006.htm#sthref3000"><span class="secnum">55.6.3</span> Invoking the Batch Runtime in Your Application</a></li>
</ul>
</li>
<li><a href="batch-processing007.htm#BCGBBGJI"><span class="secnum">55.7</span> Packaging Batch Applications</a></li>
<li><a href="batch-processing008.htm#BCGJHEHJ"><span class="secnum">55.8</span> The webserverlog Example Application</a>
<ul style="list-style-type:none">
<li><a href="batch-processing008.htm#sthref3004"><span class="secnum">55.8.1</span> Architecture of the webserverlog Example Application</a>
<ul style="list-style-type:none">
<li><a href="batch-processing008.htm#sthref3005"><span class="secnum">55.8.1.1</span> The Job Definition File</a></li>
<li><a href="batch-processing008.htm#sthref3006"><span class="secnum">55.8.1.2</span> The LogLine and LogFilteredLine Items</a></li>
<li><a href="batch-processing008.htm#sthref3007"><span class="secnum">55.8.1.3</span> The Chunk Step Batch Artifacts</a></li>
<li><a href="batch-processing008.htm#BCGCCFAC"><span class="secnum">55.8.1.4</span> The Listener Batch Artifacts</a></li>
<li><a href="batch-processing008.htm#sthref3008"><span class="secnum">55.8.1.5</span> The Task Step Batch Artifact</a></li>
<li><a href="batch-processing008.htm#sthref3009"><span class="secnum">55.8.1.6</span> The JavaServer Faces Pages</a></li>
<li><a href="batch-processing008.htm#sthref3010"><span class="secnum">55.8.1.7</span> The Managed Bean</a></li>
</ul>
</li>
<li><a href="batch-processing008.htm#sthref3011"><span class="secnum">55.8.2</span> Running the webserverlog Example Application</a>
<ul style="list-style-type:none">
<li><a href="batch-processing008.htm#sthref3012"><span class="secnum">55.8.2.1</span> To Run the webserverlog Example Application Using NetBeans IDE</a></li>
<li><a href="batch-processing008.htm#sthref3013"><span class="secnum">55.8.2.2</span> To Run the webserverlog Example Application Using Maven</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="batch-processing009.htm#BCGFCACD"><span class="secnum">55.9</span> The phonebilling Example Application</a>
<ul style="list-style-type:none">
<li><a href="batch-processing009.htm#sthref3016"><span class="secnum">55.9.1</span> Architecture of the phonebilling Example Application</a>
<ul style="list-style-type:none">
<li><a href="batch-processing009.htm#sthref3017"><span class="secnum">55.9.1.1</span> The Job Definition File</a></li>
<li><a href="batch-processing009.htm#sthref3018"><span class="secnum">55.9.1.2</span> The CallRecord and PhoneBill Entities</a></li>
<li><a href="batch-processing009.htm#sthref3019"><span class="secnum">55.9.1.3</span> The Call Records Chunk Step</a></li>
<li><a href="batch-processing009.htm#BCGGGAHB"><span class="secnum">55.9.1.4</span> The Phone Billing Chunk Step</a></li>
<li><a href="batch-processing009.htm#sthref3020"><span class="secnum">55.9.1.5</span> The JavaServer Faces Pages</a></li>
<li><a href="batch-processing009.htm#sthref3021"><span class="secnum">55.9.1.6</span> The Managed Bean</a></li>
</ul>
</li>
<li><a href="batch-processing009.htm#sthref3022"><span class="secnum">55.9.2</span> Running the phonebilling Example Application</a>
<ul style="list-style-type:none">
<li><a href="batch-processing009.htm#sthref3023"><span class="secnum">55.9.2.1</span> To Run the phonebilling Example Application Using NetBeans IDE</a></li>
<li><a href="batch-processing009.htm#sthref3024"><span class="secnum">55.9.2.2</span> To Run the phonebilling Example Application Using Maven</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="batch-processing010.htm#BCGHCHAJ"><span class="secnum">55.10</span> Further Information about Batch Processing</a></li>
</ul>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="batch-processing003.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="batch-processing005.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BCGDDBBG" name="BCGDDBBG"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h1 class="sect1"><span class="secnum">55.4</span> <a id="sthref2970" name="sthref2970"></a><a id="sthref2971" name="sthref2971"></a>Using the Job Specification Language</h1>
<p>The Job Specification Language (JSL) enables you to define the steps in a job and their execution order using an XML file. The following example shows how to define a simple job that contains one chunk step and one task step:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;job id="loganalysis" xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
                      version="1.0"&gt;
  &lt;properties&gt;
    &lt;property name="input_file" value="input1.txt"/&gt;
    &lt;property name="output_file" value="output2.txt"/&gt;
  &lt;/properties&gt;

  &lt;step id="logprocessor" next="cleanup"&gt;
    &lt;chunk checkpoint-policy="item" item-count="10"&gt;
      &lt;reader ref="com.example.pkg.LogItemReader"&gt;&lt;/reader&gt;
      &lt;processor ref="com.example.pkg.LogItemProcessor"&gt;&lt;/processor&gt;
      &lt;writer ref="com.example.pkg.LogItemWriter"&gt;&lt;/writer&gt;
    &lt;/chunk&gt;
  &lt;/step&gt;

  &lt;step id="cleanup"&gt;
    &lt;batchlet ref="com.example.pkg.CleanUp"&gt;&lt;/batchlet&gt;
    &lt;end on="COMPLETED"/&gt;
  &lt;/step&gt;
&lt;/job&gt;
</pre>
<p>This example defines the <code>loganalysis</code> batch job, which consists of the <code>logprocessor</code> chunk step and the <code>cleanup</code> task step. The <code>logprocessor</code> step transitions to the <code>cleanup</code> step, which terminates the job when completed.</p>
<p>The <code>job</code> element defines two properties, <code>input_file</code> and <code>output_file</code>. Specifying properties in this manner enables you to run a batch job with different configuration parameters without having to recompile its Java batch artifacts. The batch artifacts can access these properties using the context objects from the batch runtime.</p>
<p>The <code>logprocessor</code> step is a chunk step that specifies batch artifacts for the reader (<code>LogItemReader</code>), the processor (<code>LogItemProcessor</code>), and the writer (<code>LogItemWriter</code>). This step creates a checkpoint for every ten items processed.</p>
<p>The <code>cleanup</code> step is a task step that specifies the <code>CleanUp</code> class as its batch artifact. The job terminates when this step completes.</p>
<p>The following sections describe the elements of the Job Specification Language (JSL) in more detail and show the most common attributes and child elements.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2972" name="sthref2972"></a>
<h2 class="sect2"><span class="secnum">55.4.1</span> <a id="sthref2973" name="sthref2973"></a>The job Element</h2>
<p>The <code>job</code> element is always the top-level element in a job definition file. Its main attributes are <code>id</code> and <code>restartable</code>. The <code>job</code> element can contain one <code>properties</code> element and zero or more of each of the following elements: <code>listener</code>, <code>step</code>, <code>flow</code>, and <code>split</code>. For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;job id="jobname" restartable="true"&gt;
  &lt;listeners&gt;
    &lt;listener ref="com.example.pkg.ListenerBatchArtifact"/&gt;
  &lt;/listeners&gt;
  &lt;properties&gt;
    &lt;property name="propertyName1" value="propertyValue1"/&gt;
    &lt;property name="propertyName2" value="propertyValue2"/&gt;
  &lt;/properties&gt;
  &lt;step ...&gt; ... &lt;/step&gt;
  &lt;step ...&gt; ... &lt;/step&gt;
  &lt;decision ...&gt; ... &lt;/decision&gt;
  &lt;flow ...&gt; ... &lt;/flow&gt;
  &lt;split ...&gt; ... &lt;/split&gt;
&lt;/job&gt;
</pre>
<p>The <code>listener</code> element specifies a batch artifact whose methods are invoked before and after the execution of the job. The batch artifact is an implementation of the <code>javax.batch.api.listener.JobListener</code> interface. See <a href="batch-processing008.htm#BCGCCFAC">The Listener Batch Artifacts</a> for an example of a job listener implementation.</p>
<p>The first <code>step</code>, <code>flow</code>, or <code>split</code> element inside the <code>job</code> element executes first.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2974" name="sthref2974"></a>
<h2 class="sect2"><span class="secnum">55.4.2</span> <a id="sthref2975" name="sthref2975"></a>The step Element</h2>
<p>The <code>step</code> element can be a child of the <code>job</code> and <code>flow</code> elements. Its main attributes are <code>id</code> and <code>next</code>. The <code>step</code> element can contain the following elements.</p>
<ul>
<li>
<p>One <code>chunk</code> element for chunk-oriented steps or one <code>batchlet</code> element for task-oriented steps.</p>
</li>
<li>
<p>One <code>properties</code> element (optional).</p>
<p>This element specifies a set of properties that batch artifacts can access using batch context objects.</p>
</li>
<li>
<p>One <code>listener</code> element (optional); one <code>listeners</code> element if more than one listener is specified.</p>
<p>This element specifies listener artifacts that intercept various phases of step execution.</p>
<p>For chunk steps, the batch artifacts for these listeners can be implementations of the following interfaces: <code>StepListener</code>, <code>ItemReadListener</code>, <code>ItemProcessListener</code>, <code>ItemWriteListener</code>, <code>ChunkListener</code>, <code>RetryReadListener</code>, <code>RetryProcessListener</code>, <code>RetryWriteListener</code>, <code>SkipReadListener</code>, <code>SkipProcessListener</code>, and <code>SkipWriteListener</code>.</p>
<p>For task steps, the batch artifact for these listeners must be an implementation of the <code>StepListener</code> interface.</p>
<p>See <a href="batch-processing008.htm#BCGCCFAC">The Listener Batch Artifacts</a> for an example of an item processor listener implementation.</p>
</li>
<li>
<p>One <code>partition</code> element (optional).</p>
<p>This element is used in partitioned steps which execute in more than one thread.</p>
</li>
<li>
<p>One <code>end</code> element if this is the last step in a job.</p>
<p>This element sets the batch status to <code>COMPLETED</code>.</p>
</li>
<li>
<p>One <code>stop</code> element (optional) to stop a job at this step.</p>
<p>This element sets the batch status to <code>STOPPED</code>.</p>
</li>
<li>
<p>One <code>fail</code> element (optional) to terminate a job at this step.</p>
<p>This element sets the batch status to <code>FAILED</code>.</p>
</li>
<li>
<p>One or more <code>next</code> elements if the <code>next</code> attribute is not specified.</p>
<p>This element is associated with an exit status and refers to another step, a flow, a split, or a decision element.</p>
</li>
</ul>
<p>The following is an example of a chunk step:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;step id="stepA" next="stepB"&gt;
  &lt;properties&gt; ... &lt;/properties&gt;
  &lt;listeners&gt;
    &lt;listener ref="MyItemReadListenerImpl"/&gt;
    ...
  &lt;/listeners&gt;
  &lt;chunk ...&gt; ... &lt;/chunk&gt;
  &lt;partition&gt; ... &lt;/partition&gt;
  &lt;end on="COMPLETED" exit-status="MY_COMPLETED_EXIT_STATUS"/&gt;
  &lt;stop on="MY_TEMP_ISSUE_EXIST_STATUS" restart="step0"/&gt;
  &lt;fail on="MY_ERROR_EXIT_STATUS" exit-status="MY_ERROR_EXIT_STATUS"/&gt;
&lt;/step&gt;
</pre>
<p>The following is an example of a task step:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;step id="stepB" next="stepC"&gt;
  &lt;batchlet ...&gt; ... &lt;/batchlet&gt;
  &lt;properties&gt; ... &lt;/properties&gt;
  &lt;listener ref="MyStepListenerImpl"/&gt;
&lt;/step&gt;
</pre>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2976" name="sthref2976"></a>
<h3 class="sect3"><span class="secnum">55.4.2.1</span> <a id="sthref2977" name="sthref2977"></a>The chunk Element</h3>
<p>The <code>chunk</code> element is a child of the <code>step</code> element for chunk-oriented steps. The attributes of this element are listed in <a href="#BCGJCIEI">Table 55-2</a>.</p>
<div class="tblhruleformalwide"><a id="sthref2978" name="sthref2978"></a><a id="BCGJCIEI" name="BCGJCIEI"></a>
<p class="titleintable">Table 55-2 Attributes of the chunk Element</p>
<table class="HRuleFormalWide" title="Attributes of the chunk Element" summary="The table lists the attributes for the chunk element. The first column contains the attribute name. The second column contains a description of the attribute and its possible values. The third column contains the default value of the attribute." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="19%" />
<col width="*" />
<col width="15%" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t4">Attribute Name</th>
<th align="left" valign="bottom" id="r1c2-t4">Description</th>
<th align="left" valign="bottom" id="r1c3-t4">Default Value</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t4" headers="r1c1-t4">
<p><code>checkpoint-policy</code></p>
</td>
<td align="left" headers="r2c1-t4 r1c2-t4">
<p>Specifies how to commit the results of processing each chunk:</p>
<ul>
<li>
<p><code>"item"</code>: the chunk is committed after processing <code>item-count</code> items</p>
</li>
<li>
<p><code>"custom"</code>: the chunk is committed according to a checkpoint algorithm specified with the <code>checkpoint-algorithm</code> element</p>
</li>
</ul>
<p>The checkpoint is updated when the results of a chunk are committed.</p>
<p><span class="italic">Every chunk is processed in a global Java EE transaction.</span> If the processing of one item in the chunk fails, the transaction is rolled back and no processed items from this chunk are stored.</p>
</td>
<td align="left" headers="r2c1-t4 r1c3-t4">
<p><code>"item"</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t4" headers="r1c1-t4">
<p><code>item-count</code></p>
</td>
<td align="left" headers="r3c1-t4 r1c2-t4">
<p>Specifies the number of items to process before committing the chunk and taking a checkpoint.</p>
</td>
<td align="left" headers="r3c1-t4 r1c3-t4">
<p>10</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t4" headers="r1c1-t4">
<p><code>time-limit</code></p>
</td>
<td align="left" headers="r4c1-t4 r1c2-t4">
<p>Specifies the number of seconds before committing the chunk and taking a checkpoint when <code>checkpoint-policy="item"</code>.</p>
<p>If <code>item-count</code> items have not been processed by <code>time-limit</code> seconds, the chunk is committed and a checkpoint is taken.</p>
</td>
<td align="left" headers="r4c1-t4 r1c3-t4">
<p>0 (no limit)</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t4" headers="r1c1-t4">
<p><code>buffer-items</code></p>
</td>
<td align="left" headers="r5c1-t4 r1c2-t4">
<p>Specifies if processed items are buffered until it is time to take a checkpoint. If true, a single call to the item writer is made with a list of the buffered items before committing the chunk and taking a checkpoint.</p>
</td>
<td align="left" headers="r5c1-t4 r1c3-t4">
<p>true</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t4" headers="r1c1-t4">
<p><code>skip-limit</code></p>
</td>
<td align="left" headers="r6c1-t4 r1c2-t4">
<p>Specifies the number of skippable exceptions to skip in this step during chunk processing. Skippable exception classes are specified with the <code>skippable-exception-classes</code> element.</p>
</td>
<td align="left" headers="r6c1-t4 r1c3-t4">
<p>No limit</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r7c1-t4" headers="r1c1-t4">
<p><code>retry-limit</code></p>
</td>
<td align="left" headers="r7c1-t4 r1c2-t4">
<p>Specifies the number of attempts to execute this step if retryable exceptions occur. Retryable exception classes are specified with the <code>retryable-exception-classes</code> element.</p>
</td>
<td align="left" headers="r7c1-t4 r1c3-t4">
<p>No limit</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<p>The <code>chunk</code> element can contain the following elements.</p>
<ul>
<li>
<p>One <code>reader</code> element.</p>
<p>This element specifies a batch artifact that implements the <code>ItemReader</code> interface.</p>
</li>
<li>
<p>One <code>processor</code> element.</p>
<p>This element specifies a batch artifact that implements the <code>ItemProcessor</code> interface.</p>
</li>
<li>
<p>One <code>writer</code> element.</p>
<p>This element specifies a batch artifact that implements the <code>ItemWriter</code> interface.</p>
</li>
<li>
<p>One <code>checkpoint-algorithm</code> element (optional).</p>
<p>This element specifies a batch artifact that implements the <code>CheckpointAlgorithm</code> interface and provides a custom checkpoint policy.</p>
</li>
<li>
<p>One <code>skippable-exception-classes</code> element (optional).</p>
<p>This element specifies a set of exceptions thrown from the reader, writer, and processor batch artifacts that chunk processing should skip. The <code>skip-limit</code> attribute from the <code>chunk</code> element specifies the maximum number of skipped exceptions.</p>
</li>
<li>
<p>One <code>retryable-exception-classes</code> element (optional).</p>
<p>This element specifies a set of exceptions thrown from the reader, writer, and processor batch artifacts that chunk processing will retry. The <code>retry-limit</code> attribute from the <code>chunk</code> element specifies the maximum number of attempts.</p>
</li>
<li>
<p>One <code>no-rollback-exception-classes</code> element (optional).</p>
<p>This element specifies a set of exceptions thrown from the reader, writer, and processor batch artifacts that should not cause the batch runtime to roll back the current chunk, but to retry the current operation without a rollback instead.</p>
<p>For exception types not specified in this element, the current chunk is rolled back by default when an exception occurs.</p>
</li>
</ul>
<p>The following is an example of a chunk-oriented step:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;step id="stepC" next="stepD"&gt;
  &lt;chunk checkpoint-policy="item" item-count="5" time-limit="180"
         buffer-items="true" skip-limit="10" retry-limit="3"&gt;
    &lt;reader ref="pkg.MyItemReaderImpl"&gt;&lt;/reader&gt;
    &lt;processor ref="pkg.MyItemProcessorImpl"&gt;&lt;/processor&gt;
    &lt;writer ref="pkg.MyItemWriterImpl"&gt;&lt;/writer&gt;
    &lt;skippable-exception-classes&gt;
      &lt;include class="pkg.MyItemException"/&gt;
      &lt;exclude class="pkg.MyItemSeriousSubException"/&gt;
    &lt;/skippable-exception-classes&gt;
    &lt;retryable-exception-classes&gt;
      &lt;include class="pkg.MyResourceTempUnavailable"/&gt;
    &lt;/retryable-exception-classes&gt;
  &lt;/chunk&gt;
&lt;/step&gt;
</pre>
<p>This example defines a chunk step and specifies its reader, processor, and writer artifacts. The step updates a checkpoint and commits each chunk after processing five items. It skips all <code>MyItemException</code> exceptions and all its subtypes, except for <code>MyItemSeriousSubException</code>, up to a maximum of ten skipped exceptions. The step retries a chunk when a <code>MyResourceTempUnavailable</code> exception occurs, up to a maximum of three attempts.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2979" name="sthref2979"></a>
<h3 class="sect3"><span class="secnum">55.4.2.2</span> <a id="sthref2980" name="sthref2980"></a>The batchlet Element</h3>
<p>The <code>batchlet</code> element is a child of the <code>step</code> element for task-oriented steps. This element only has the <code>ref</code> attribute, which specifies a batch artifact that implements the <code>Batchlet</code> interface. The <code>batch</code> element can contain a <code>properties</code> element.</p>
<p>The following is an example of a task-oriented step:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;step id="stepD" next="stepE"&gt;
  &lt;batchlet ref="pkg.MyBatchletImpl"&gt;
    &lt;properties&gt;
      &lt;property name="pname" value="pvalue"/&gt;
    &lt;/properties&gt;
  &lt;/batchlet&gt;
&lt;/step&gt;
</pre>
<p>This example defines a batch step and specifies its batch artifact.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2981" name="sthref2981"></a>
<h3 class="sect3"><span class="secnum">55.4.2.3</span> <a id="sthref2982" name="sthref2982"></a>The partition Element</h3>
<p>The <code>partition</code> element is a child of the <code>step</code> element. It indicates that a step is partitioned. Most partitioned steps are chunk steps where the processing of each item does not depend on the results of processing previous items. You specify the number of partitions in a step and provide each partition with specific information on which items to process, such as the following.</p>
<ul>
<li>
<p>A range of items. For example, partition 1 processes items 1 through 500, and partition 2 processes items 501 through 1000.</p>
</li>
<li>
<p>An input source. For example, partition 1 processes the items in <code>input1.txt</code> and partition 2 processes the items in <code>input2.txt</code>.</p>
</li>
</ul>
<p>When the number of partitions, the number of items, and the input sources for a partitioned step are known at development or deployment time, you can use partition properties in the job definition file to specify partition-specific information and access these properties from the step batch artifacts. The runtime creates as many instances of the step batch artifacts (reader, processor, and writer) as partitions, and each artifact instance receives the properties specific to its partition.</p>
<p>In most cases, the number of partitions, the number of items, or the input sources for a partitioned step can only be determined at runtime. Instead of specifying partition-specific properties statically in the job definition file, you provide a batch artifact that can access your data sources at runtime and determine how many partitions are needed and what range of items each partition should process. This batch artifact is an implementation of the <code>PartitionMapper</code> interface. The batch runtime invokes this artifact and then uses the information it provides to instantiate the step batch artifacts (reader, writer, and processor) for each partition and to pass them partition-specific data as parameters.</p>
<p>The rest of this section describes the <code>partition</code> element in detail and shows two examples of job definition files: one that uses partition properties to specify a range of items for each partition, and one that relies on a <code>PartitionMapper</code> implementation to determine partition-specific information.</p>
<p>See <a href="batch-processing009.htm#BCGGGAHB">The Phone Billing Chunk Step</a> in <a href="batch-processing009.htm#BCGFCACD">The phonebilling Example Application</a> for a complete example of a partitioned chunk step.</p>
<p>The <code>partition</code> element can contain the following elements.</p>
<ul>
<li>
<p>One <code>plan</code> element, if the <code>mapper</code> element is not specified.</p>
<p>This element defines the number of partitions, the number of threads, and the properties for each partition in the job definition file. The <code>plan</code> element is useful when this information is known at development or deployment time.</p>
</li>
<li>
<p>One <code>mapper</code> element, if the <code>plan</code> element is not specified.</p>
<p>This element specifies a batch artifact that provides the number of partitions, the number of threads, and the properties for each partition. The batch artifact is an implementation of the <code>PartitionMapper</code> interface. You use this option when the information required for each partition is only known at runtime.</p>
</li>
<li>
<p>One <code>reducer</code> element (optional).</p>
<p>This element specifies a batch artifact that receives control when a partitioned step begins, ends, or rolls back. The batch artifact enables you to merge results from different partitions and perform other related operations. The batch artifact is an implementation of the <code>PartitionReducer</code> interface.</p>
</li>
<li>
<p>One <code>collector</code> element (optional).</p>
<p>This element specifies a batch artifact that sends intermediary results from each partition to a partition analyzer. The batch artifact sends the intermediary results after each checkpoint for chunk steps and at the end of the step for task steps. The batch artifact is an implementation of the <code>PartitionCollector</code> interface.</p>
</li>
<li>
<p>One <code>analyzer</code> element (optional).</p>
<p>This element specifies a batch artifact that analyzes the intermediary results from the partition collector instances. The batch artifact is an implementation of the <code>PartitionAnalyzer</code> interface.</p>
</li>
</ul>
<p>The following is an example of a partitioned step using the <code>plan</code> element:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;step id="stepE" next="stepF"&gt;
  &lt;chunk&gt;
    &lt;reader ...&gt;&lt;/reader&gt;
    &lt;processor ...&gt;&lt;/processor&gt;
    &lt;writer ...&gt;&lt;/writer&gt;
  &lt;/chunk&gt;
  &lt;partition&gt;
    &lt;plan partitions="2" threads="2"&gt;
      &lt;properties partition="0"&gt;
        &lt;property name="firstItem" value="0"/&gt;
        &lt;property name="lastItem" value="500"/&gt;
      &lt;/properties&gt;
      &lt;properties partition="1"&gt;
        &lt;property name="firstItem" value="501"/&gt;
        &lt;property name="lastItem" value="999"/&gt;
      &lt;/properties&gt;
    &lt;/plan&gt;
  &lt;/partition&gt;
  &lt;reducer ref="MyPartitionReducerImpl"/&gt;
  &lt;collector ref="MyPartitionCollectorImpl"/&gt;
  &lt;analyzer ref="MyPartitionAnalyzerImpl"/&gt;
&lt;/step&gt;
</pre>
<p>In this example, the <code>plan</code> element specifies the properties for each partition in the job definition file.</p>
<p>The following example uses a <code>mapper</code> element instead of a <code>plan</code> element. The <code>PartitionMapper</code> implementation dynamically provides the same information as the <code>plan</code> element provides in the job definition file:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;step id="stepE" next="stepF"&gt;
  &lt;chunk&gt;
    &lt;reader ...&gt;&lt;/reader&gt;
    &lt;processor ...&gt;&lt;/processor&gt;
    &lt;writer ...&gt;&lt;/writer&gt;
  &lt;/chunk&gt;
  &lt;partition&gt;
    &lt;mapper ref="MyPartitionMapperImpl"/&gt;
    &lt;reducer ref="MyPartitionReducerImpl"/&gt;
    &lt;collector ref="MyPartitionCollectorImpl"/&gt;
    &lt;analyzer ref="MyPartitionAnalyzerImpl"/&gt;
  &lt;/partition&gt;
&lt;/step&gt;
</pre>
<p>Refer to <a href="batch-processing009.htm#BCGFCACD">The phonebilling Example Application</a> for an example implementation of the <code>PartitionMapper</code> interface.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2983" name="sthref2983"></a>
<h2 class="sect2"><span class="secnum">55.4.3</span> <a id="sthref2984" name="sthref2984"></a>The flow Element</h2>
<p>The <code>flow</code> element can be a child of the <code>job</code>, <code>flow</code>, and <code>split</code> elements. Its attributes are <code>id</code> and <code>next</code>. Flows can transition to flows, steps, splits, and decision elements. The <code>flow</code> element can contain the following elements:</p>
<ul>
<li>
<p>One or more <code>step</code> elements</p>
</li>
<li>
<p>One or more <code>flow</code> elements (optional)</p>
</li>
<li>
<p>One or more <code>split</code> elements (optional)</p>
</li>
<li>
<p>One or more <code>decision</code> elements (optional)</p>
</li>
</ul>
<p>The last <code>step</code> in a flow is the one with no <code>next</code> attribute or <code>next</code> element. Steps and other elements in a flow cannot transition to elements outside the flow.</p>
<p>The following is an example of the <code>flow</code> element:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;flow id="flowA" next="stepE"&gt;
  &lt;step id="flowAstepA" next="flowAstepB"&gt;...&lt;/step&gt;
  &lt;step id="flowAstepB" next="flowAflowC"&gt;...&lt;/step&gt;
  &lt;flow id="flowAflowC" next="flowAsplitD"&gt;...&lt;/flow&gt;
  &lt;split id="flowAsplitD" next="flowAstepE"&gt;...&lt;/split&gt;
  &lt;step id="flowAstepE"&gt;...&lt;/step&gt;
&lt;/flow&gt;
</pre>
<p>This example flow contains three steps, one flow, and one split. The last step does not have the <code>next</code> attribute. The flow transitions to <code>stepE</code> when its last step completes.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2985" name="sthref2985"></a>
<h2 class="sect2"><span class="secnum">55.4.4</span> <a id="sthref2986" name="sthref2986"></a>The split Element</h2>
<p>The <code>split</code> element can be a child of the <code>job</code> and <code>flow</code> elements. Its attributes are <code>id</code> and <code>next</code>. Splits can transition to splits, steps, flows, and decision elements. The <code>split</code> element can only contain one or more <code>flow</code> elements that can only transition to other <code>flow</code> elements in the split.</p>
<p>The following is an example of a split with three flows that execute concurrently:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;split id="splitA" next="stepB"&gt;
  &lt;flow id="splitAflowA"&gt;...&lt;/flow&gt;
  &lt;flow id="splitAflowB"&gt;...&lt;/flow&gt;
  &lt;flow id="splitAflowC"&gt;...&lt;/flow&gt;
&lt;/split&gt;
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2987" name="sthref2987"></a>
<h2 class="sect2"><span class="secnum">55.4.5</span> <a id="sthref2988" name="sthref2988"></a>The decision Element</h2>
<p>The <code>decision</code> element can be a child of the <code>job</code> and <code>flow</code> elements. Its attributes are <code>id</code> and <code>next</code>. Steps, flows, and splits can transition to a <code>decision</code> element. This element specifies a batch artifact that decides the next step, flow, or split to execute based on information from the execution of the previous step, flow, or split. The batch artifact implements the <code>Decider</code> interface. The <code>decision</code> element can contain the following elements.</p>
<ul>
<li>
<p>One or more <code>end</code> elements (optional).</p>
<p>This element sets the batch status to <code>COMPLETED</code>.</p>
</li>
<li>
<p>One or more <code>stop</code> elements (optional).</p>
<p>This element sets the batch status to <code>STOPPED</code>.</p>
</li>
<li>
<p>One or more <code>fail</code> elements (optional).</p>
<p>This element sets the batch status to <code>FAILED</code>.</p>
</li>
<li>
<p>One or more <code>next</code> elements (optional).</p>
</li>
<li>
<p>One <code>properties</code> element (optional).</p>
</li>
</ul>
<p>The following is an example of the <code>decider</code> element:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;decision id="decisionA" ref="MyDeciderImpl"&gt;
  &lt;fail on="FAILED" exit-status="FAILED_AT_DECIDER"/&gt;
  &lt;end on="COMPLETED" exit-status="COMPLETED_AT_DECIDER"/&gt;
  &lt;stop on="MY_TEMP_ISSUE_EXIST_STATUS" restart="step2"/&gt;
&lt;/decision&gt;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="batch-processing003.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="batch-processing005.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

