<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:3Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Using Advanced JMS Features" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Using Advanced JMS Features | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<ul style="list-style-type:none">
<li><a href="jms-concepts001.htm#BNCDR"><span class="secnum">45.1</span> Overview of the JMS API</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts001.htm#BNCDS"><span class="secnum">45.1.1</span> What Is Messaging?</a></li>
<li><a href="jms-concepts001.htm#BNCDT"><span class="secnum">45.1.2</span> What Is the JMS API?</a></li>
<li><a href="jms-concepts001.htm#BNCDU"><span class="secnum">45.1.3</span> When Can You Use the JMS API?</a></li>
<li><a href="jms-concepts001.htm#BNCDW"><span class="secnum">45.1.4</span> How Does the JMS API Work with the Java EE Platform?</a></li>
</ul>
</li>
<li><a href="jms-concepts002.htm#BNCDX"><span class="secnum">45.2</span> Basic JMS API Concepts</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts002.htm#BNCDY"><span class="secnum">45.2.1</span> JMS API Architecture</a></li>
<li><a href="jms-concepts002.htm#BNCEA"><span class="secnum">45.2.2</span> Messaging Styles</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts002.htm#BNCEB"><span class="secnum">45.2.2.1</span> Point-to-Point Messaging Style</a></li>
<li><a href="jms-concepts002.htm#BNCED"><span class="secnum">45.2.2.2</span> Publish/Subscribe Messaging Style</a></li>
</ul>
</li>
<li><a href="jms-concepts002.htm#BNCEG"><span class="secnum">45.2.3</span> Message Consumption</a></li>
</ul>
</li>
<li><a href="jms-concepts003.htm#BNCEH"><span class="secnum">45.3</span> The JMS API Programming Model</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts003.htm#BNCEJ"><span class="secnum">45.3.1</span> JMS Administered Objects</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts003.htm#BNCEK"><span class="secnum">45.3.1.1</span> JMS Connection Factories</a></li>
<li><a href="jms-concepts003.htm#BNCEL"><span class="secnum">45.3.1.2</span> JMS Destinations</a></li>
</ul>
</li>
<li><a href="jms-concepts003.htm#BNCEM"><span class="secnum">45.3.2</span> Connections</a></li>
<li><a href="jms-concepts003.htm#BNCEN"><span class="secnum">45.3.3</span> Sessions</a></li>
<li><a href="jms-concepts003.htm#BABGDFEA"><span class="secnum">45.3.4</span> JMSContext Objects</a></li>
<li><a href="jms-concepts003.htm#BNCEO"><span class="secnum">45.3.5</span> JMS Message Producers</a></li>
<li><a href="jms-concepts003.htm#BNCEP"><span class="secnum">45.3.6</span> JMS Message Consumers</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts003.htm#BNCEQ"><span class="secnum">45.3.6.1</span> JMS Message Listeners</a></li>
<li><a href="jms-concepts003.htm#BNCER"><span class="secnum">45.3.6.2</span> JMS Message Selectors</a></li>
<li><a href="jms-concepts003.htm#BABEEJJJ"><span class="secnum">45.3.6.3</span> Consuming Messages from Topics</a></li>
<li><a href="jms-concepts003.htm#BNCGD"><span class="secnum">45.3.6.4</span> Creating Durable Subscriptions</a></li>
<li><a href="jms-concepts003.htm#BABJCIGJ"><span class="secnum">45.3.6.5</span> Creating Shared Subscriptions</a></li>
</ul>
</li>
<li><a href="jms-concepts003.htm#BNCES"><span class="secnum">45.3.7</span> JMS Messages</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts003.htm#BNCET"><span class="secnum">45.3.7.1</span> Message Headers</a></li>
<li><a href="jms-concepts003.htm#BNCEV"><span class="secnum">45.3.7.2</span> Message Properties</a></li>
<li><a href="jms-concepts003.htm#BNCEW"><span class="secnum">45.3.7.3</span> Message Bodies</a></li>
</ul>
</li>
<li><a href="jms-concepts003.htm#BNCEY"><span class="secnum">45.3.8</span> JMS Queue Browsers</a></li>
<li><a href="jms-concepts003.htm#BNCEZ"><span class="secnum">45.3.9</span> JMS Exception Handling</a></li>
</ul>
</li>
<li><div id="backgroundColor"><a href="jms-concepts004.htm#BNCFU"><span class="secnum">45.4</span> Using Advanced JMS Features</a><ul style="list-style-type:none">
<li><a href="jms-concepts004.htm#BNCFW"><span class="secnum">45.4.1</span> Controlling Message Acknowledgment</a></li>
<li><a href="jms-concepts004.htm#BNCFV"><span class="secnum">45.4.2</span> Specifying Options for Sending Messages</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts004.htm#BNCFY"><span class="secnum">45.4.2.1</span> Specifying Message Persistence</a></li>
<li><a href="jms-concepts004.htm#BNCFZ"><span class="secnum">45.4.2.2</span> Setting Message Priority Levels</a></li>
<li><a href="jms-concepts004.htm#BNCGA"><span class="secnum">45.4.2.3</span> Allowing Messages to Expire</a></li>
<li><a href="jms-concepts004.htm#BABGEADH"><span class="secnum">45.4.2.4</span> Specifying a Delivery Delay</a></li>
<li><a href="jms-concepts004.htm#BABJFIAD"><span class="secnum">45.4.2.5</span> Using JMSProducer Method Chaining</a></li>
</ul>
</li>
<li><a href="jms-concepts004.htm#BNCGB"><span class="secnum">45.4.3</span> Creating Temporary Destinations</a></li>
<li><a href="jms-concepts004.htm#BNCGH"><span class="secnum">45.4.4</span> Using JMS Local Transactions</a></li>
<li><a href="jms-concepts004.htm#BABFIFAJ"><span class="secnum">45.4.5</span> Sending Messages Asynchronously</a></li>
</ul>
</div></li>
<li><a href="jms-concepts005.htm#BNCGL"><span class="secnum">45.5</span> Using the JMS API in Java EE Applications</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts005.htm#BABHFBDH"><span class="secnum">45.5.1</span> Creating Resources for Java EE Applications</a></li>
<li><a href="jms-concepts005.htm#BNCGM"><span class="secnum">45.5.2</span> Using Resource Injection in Enterprise Bean or Web Components</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts005.htm#sthref2355"><span class="secnum">45.5.2.1</span> Injecting a ConnectionFactory, Queue, or Topic</a></li>
<li><a href="jms-concepts005.htm#BABCJBEE"><span class="secnum">45.5.2.2</span> Injecting a JMSContext Object</a></li>
</ul>
</li>
<li><a href="jms-concepts005.htm#BNCGN"><span class="secnum">45.5.3</span> Using Java EE Components to Produce and to Synchronously Receive Messages</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts005.htm#BNCGO"><span class="secnum">45.5.3.1</span> Managing JMS Resources in Web and EJB Components</a></li>
<li><a href="jms-concepts005.htm#BNCGP"><span class="secnum">45.5.3.2</span> Managing Transactions in Session Beans</a></li>
</ul>
</li>
<li><a href="jms-concepts005.htm#BNCGQ"><span class="secnum">45.5.4</span> Using Message-Driven Beans to Receive Messages Asynchronously</a></li>
<li><a href="jms-concepts005.htm#BNCGS"><span class="secnum">45.5.5</span> Managing JTA Transactions</a></li>
</ul>
</li>
<li><a href="jms-concepts006.htm#BNCGU"><span class="secnum">45.6</span> Further Information about JMS</a></li>
</ul>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jms-concepts003.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jms-concepts005.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BNCFU" name="BNCFU"></a><a id="JEETT00551" name="JEETT00551"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">45.4</span> <a id="sthref2312" name="sthref2312"></a>Using Advanced JMS Features</h1>
<p>This section explains how to use features of the JMS API to achieve the level of reliability and performance your application requires. Many people use JMS in their applications because they cannot tolerate dropped or duplicate messages and because they require that every message be received once and only once. The JMS API provides this functionality.</p>
<p>The most reliable way to produce a message is to send a <code>PERSISTENT</code> message, and to do so within a transaction.</p>
<p>JMS messages are <code>PERSISTENT</code> by default; <code>PERSISTENT</code> messages will not be lost in the event of JMS provider failure. For details, see <a href="#BNCFY">Specifying Message Persistence</a>.</p>
<p>Transactions allow multiple messages to be sent or received in an atomic operation. In the Java EE platform they also allow message sends and receives to be combined with database reads and writes in an atomic transaction. A <span class="glossaryterm">transaction</span> is a unit of work into which you can group a series of operations, such as message sends and receives, so that the operations either all succeed or all fail. For details, see <a href="#BNCGH">Using JMS Local Transactions</a>.</p>
<p>The most reliable way to consume a message is to do so within a transaction, either from a queue or from a durable subscription to a topic. For details, see <a href="jms-concepts003.htm#BNCGD">Creating Durable Subscriptions</a>, <a href="#BNCGB">Creating Temporary Destinations</a>, and <a href="#BNCGH">Using JMS Local Transactions</a>.</p>
<p>Some features primarily allow an application to improve performance. For example, you can set messages to expire after a certain length of time (see <a href="#BNCGA">Allowing Messages to Expire</a>), so that consumers do not receive unnecessary outdated information. You can send messages asynchronously; see <a href="#BABFIFAJ">Sending Messages Asynchronously</a>.</p>
<p>You can also specify various levels of control over message acknowledgment; see <a href="#BNCFW">Controlling Message Acknowledgment</a>.</p>
<p>Other features can provide useful capabilities unrelated to reliability. For example, you can create temporary destinations that last only for the duration of the connection in which they are created. See <a href="#BNCGB">Creating Temporary Destinations</a> for details.</p>
<p>The following sections describe these features as they apply to application clients or Java SE clients. Some of the features work differently in the Java EE web or EJB container; in these cases, the differences are noted here and are explained in detail in <a href="jms-concepts005.htm#BNCGL">Using the JMS API in Java EE Applications</a>.</p>
<a id="BNCFW" name="BNCFW"></a><a id="JEETT00813" name="JEETT00813"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">45.4.1</span> <a id="sthref2313" name="sthref2313"></a><a id="sthref2314" name="sthref2314"></a>Controlling Message Acknowledgment</h2>
<p>Until a JMS message has been acknowledged, it is not considered to be successfully consumed. The successful consumption of a message ordinarily takes place in three stages.</p>
<ol>
<li>
<p>The client receives the message.</p>
</li>
<li>
<p>The client processes the message.</p>
</li>
<li>
<p>The message is acknowledged. Acknowledgment is initiated either by the JMS provider or by the client, depending on the session acknowledgment mode.</p>
</li>
</ol>
<p><a id="sthref2315" name="sthref2315"></a>In locally transacted sessions (see <a href="#BNCGH">Using JMS Local Transactions</a>), a message is acknowledged when the session is committed. If a transaction is rolled back, all consumed messages are redelivered.</p>
<p>In a JTA transaction (in the Java EE web or EJB container) a message is acknowledged when the transaction is committed.</p>
<p>In nontransacted sessions, when and how a message is acknowledged depend on a value that may be specified as an argument of the <code>createContext</code> method. The possible argument values are as follows.</p>
<ul>
<li>
<p><a id="sthref2316" name="sthref2316"></a><code>JMSContext.AUTO_ACKNOWLEDGE</code>: This setting is the default for application clients and Java SE clients. The <code>JMSContext</code> automatically acknowledges a client's receipt of a message either when the client has successfully returned from a call to <code>receive</code> or when the <code>MessageListener</code> it has called to process the message returns successfully.</p>
<p>A synchronous receive in a <code>JMSContext</code> that is configured to use auto-acknowledgment is the one exception to the rule that message consumption is a three-stage process as described earlier. In this case, the receipt and acknowledgment take place in one step, followed by the processing of the message.</p>
</li>
<li>
<p><a id="sthref2317" name="sthref2317"></a><a id="sthref2318" name="sthref2318"></a><code>JMSContext.CLIENT_ACKNOWLEDGE</code>: A client acknowledges a message by calling the message's <code>acknowledge</code> method. In this mode, acknowledgment takes place on the session level: Acknowledging a consumed message automatically acknowledges the receipt of <span class="italic">all</span> messages that have been consumed by its session. For example, if a message consumer consumes ten messages and then acknowledges the fifth message delivered, all ten messages are acknowledged.</p>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>In the Java EE platform, the <code>JMSContext.CLIENT_ACKNOWLEDGE</code> setting can be used only in an application client, not in a web component or enterprise bean.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
</li>
<li>
<p><a id="sthref2319" name="sthref2319"></a><a id="sthref2320" name="sthref2320"></a><code>JMSContext.DUPS_OK_ACKNOWLEDGE</code>: This option instructs the <code>JMSContext</code> to lazily acknowledge the delivery of messages. This is likely to result in the delivery of some duplicate messages if the JMS provider fails, so it should be used only by consumers that can tolerate duplicate messages. (If the JMS provider redelivers a message, it must set the value of the <code>JMSRedelivered</code> message header to <code>true</code>.) This option can reduce session overhead by minimizing the work the session does to prevent duplicates.</p>
</li>
</ul>
<p>If messages have been received from a queue but not acknowledged when a <code>JMSContext</code> is closed, the JMS provider retains them and redelivers them when a consumer next accesses the queue. The provider also retains unacknowledged messages if an application closes a <code>JMSContext</code> that has been consuming messages from a durable subscription. (See <a href="jms-concepts003.htm#BNCGD">Creating Durable Subscriptions</a>.) Unacknowledged messages that have been received from a nondurable subscription will be dropped when the <code>JMSContext</code> is closed.</p>
<p><a id="sthref2321" name="sthref2321"></a>If you use a queue or a durable subscription, you can use the <code>JMSContext.recover</code> method to stop a nontransacted <code>JMSContext</code> and restart it with its first unacknowledged message. In effect, the <code>JMSContext</code>'s series of delivered messages is reset to the point after its last acknowledged message. The messages it now delivers may be different from those that were originally delivered, if messages have expired or if higher-priority messages have arrived. For a consumer on a nondurable subscription, the provider may drop unacknowledged messages when the <code>JMSContext.recover</code> method is called.</p>
<p>The sample program in <a href="jms-examples002.htm#BNCFX">Acknowledging Messages</a> demonstrates two ways to ensure that a message will not be acknowledged until processing of the message is complete.</p>
</div>
<!-- class="sect2" -->
<a id="BNCFV" name="BNCFV"></a><a id="JEETT01284" name="JEETT01284"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">45.4.2</span> <a id="sthref2322" name="sthref2322"></a>Specifying Options for Sending Messages</h2>
<p>You can set a number of options when you send a message. These options enable you to perform the following tasks:</p>
<ul>
<li>
<p>Specify that messages are persistent, meaning they must not be lost in the event of a provider failure (<a href="#BNCFY">Specifying Message Persistence</a>)</p>
</li>
<li>
<p>Set priority levels for messages, which can affect the order in which the messages are delivered (<a href="#BNCFZ">Setting Message Priority Levels</a>)</p>
</li>
<li>
<p>Specify an expiration time for messages so they will not be delivered if they are obsolete (<a href="#BNCGA">Allowing Messages to Expire</a>)</p>
</li>
<li>
<p>Specify a delivery delay for messages so that they will not be delivered until a specified amount of time has expired (<a href="#BABGEADH">Specifying a Delivery Delay</a>)</p>
</li>
</ul>
<p>Method chaining allows you to specify more than one of these options when you create a producer and call the <code>send</code> method; see <a href="#BABJFIAD">Using JMSProducer Method Chaining</a>.</p>
<a id="BNCFY" name="BNCFY"></a><a id="JEETT00814" name="JEETT00814"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">45.4.2.1</span> <a id="sthref2323" name="sthref2323"></a><a id="sthref2324" name="sthref2324"></a><a id="sthref2325" name="sthref2325"></a><a id="sthref2326" name="sthref2326"></a><a id="sthref2327" name="sthref2327"></a><a id="sthref2328" name="sthref2328"></a>Specifying Message Persistence</h3>
<p>The JMS API supports two delivery modes specifying whether messages are lost if the JMS provider fails. These delivery modes are fields of the <code>DeliveryMode</code> interface.</p>
<ul>
<li>
<p><a id="sthref2329" name="sthref2329"></a>The default delivery mode, <code>PERSISTENT</code>, instructs the JMS provider to take extra care to ensure that a message is not lost in transit in case of a JMS provider failure. A message sent with this delivery mode is logged to stable storage when it is sent.</p>
</li>
<li>
<p><a id="sthref2330" name="sthref2330"></a>The <code>NON_PERSISTENT</code> delivery mode does not require the JMS provider to store the message or otherwise guarantee that it is not lost if the provider fails.</p>
</li>
</ul>
<p>To specify the delivery mode, use the <code>setDeliveryMode</code> method of the <code>JMSProducer</code> interface to set the delivery mode for all messages sent by that producer.</p>
<p>You can use method chaining to set the delivery mode when you create a producer and send a message. The following call creates a producer with a <code>NON_PERSISTENT</code> delivery mode and uses it to send a message:</p>
<pre xml:space="preserve" class="oac_no_warn">
context.createProducer()
       .setDeliveryMode(DeliveryMode.NON_PERSISTENT).send(dest, msg);
</pre>
<p>If you do not specify a delivery mode, the default is <code>PERSISTENT</code>. Using the <code>NON_PERSISTENT</code> delivery mode may improve performance and reduce storage overhead, but you should use it only if your application can afford to miss messages.</p>
</div>
<!-- class="sect3" -->
<a id="BNCFZ" name="BNCFZ"></a><a id="JEETT00815" name="JEETT00815"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">45.4.2.2</span> <a id="sthref2331" name="sthref2331"></a><a id="sthref2332" name="sthref2332"></a><a id="sthref2333" name="sthref2333"></a>Setting Message Priority Levels</h3>
<p>You can use message priority levels to instruct the JMS provider to deliver urgent messages first. Use the <code>setPriority</code> method of the <code>JMSProducer</code> interface to set the priority level for all messages sent by that producer.</p>
<p>You can use method chaining to set the priority level when you create a producer and send a message. For example, the following call sets a priority level of 7 for a producer and then sends a message:</p>
<pre xml:space="preserve" class="oac_no_warn">
context.createProducer().setPriority(7).send(dest, msg);
</pre>
<p>The ten levels of priority range from 0 (lowest) to 9 (highest). If you do not specify a priority level, the default level is 4. A JMS provider tries to deliver higher-priority messages before lower-priority ones, but does not have to deliver messages in exact order of priority.</p>
</div>
<!-- class="sect3" -->
<a id="BNCGA" name="BNCGA"></a><a id="JEETT00816" name="JEETT00816"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">45.4.2.3</span> <a id="sthref2334" name="sthref2334"></a><a id="sthref2335" name="sthref2335"></a><a id="sthref2336" name="sthref2336"></a>Allowing Messages to Expire</h3>
<p>By default, a message never expires. If a message will become obsolete after a certain period, however, you may want to set an expiration time. Use the <code>setTimeToLive</code> method of the <code>JMSProducer</code> interface to set a default expiration time for all messages sent by that producer.</p>
<p>For example, a message that contains rapidly changing data such as a stock price will become obsolete after a few minutes, so you might configure messages to expire after that time.</p>
<p>You can use method chaining to set the time to live when you create a producer and send a message. For example, the following call sets a time to live of five minutes for a producer and then sends a message:</p>
<pre xml:space="preserve" class="oac_no_warn">
context.createProducer().setTimeToLive(300000).send(dest, msg);
</pre>
<p>If the specified <code>timeToLive</code> value is <code>0</code>, the message never expires.</p>
<p>When the message is sent, the specified <code>timeToLive</code> is added to the current time to give the expiration time. Any message not delivered before the specified expiration time is destroyed. The destruction of obsolete messages conserves storage and computing resources.</p>
</div>
<!-- class="sect3" -->
<a id="BABGEADH" name="BABGEADH"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3"><span class="secnum">45.4.2.4</span> <a id="sthref2337" name="sthref2337"></a><a id="sthref2338" name="sthref2338"></a><a id="sthref2339" name="sthref2339"></a>Specifying a Delivery Delay</h3>
<p>You can specify a length of time that must elapse after a message is sent before the JMS provider delivers the message. Use the <code>setDeliveryDelay</code> method of the <code>JMSProducer</code> interface to set a delivery delay for all messages sent by that producer.</p>
<p>You can use method chaining to set the delivery delay when you create a producer and send a message. For example, the following call sets a delivery delay of 3 seconds for a producer and then sends a message:</p>
<pre xml:space="preserve" class="oac_no_warn">
context.createProducer().setDeliveryDelay(3000).send(dest, msg);
</pre></div>
<!-- class="sect3" -->
<a id="BABJFIAD" name="BABJFIAD"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3"><span class="secnum">45.4.2.5</span> Using JMSProducer Method Chaining</h3>
<p>The setter methods on the <code>JMSProducer</code> interface return <code>JMSProducer</code> objects, so you can use method chaining to create a producer, set multiple properties, and send a message. For example, the following chained method calls create a producer, set a user-defined property, set the expiration, delivery mode, and priority for the message, and then send a message to a queue:</p>
<pre xml:space="preserve" class="oac_no_warn">
context.createProducer()
        .setProperty("MyProperty", "MyValue")
        .setTimeToLive(10000)
        .setDeliveryMode(NON_PERSISTENT)
        .setPriority(2)
        .send(queue, body);
</pre>
<p>You can also call the <code>JMSProducer</code> methods to set properties on a message and then send the message in a separate <code>send</code> method call. You can also set message properties directly on a message.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNCGB" name="BNCGB"></a><a id="JEETT00817" name="JEETT00817"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">45.4.3</span> <a id="sthref2340" name="sthref2340"></a><a id="sthref2341" name="sthref2341"></a><a id="sthref2342" name="sthref2342"></a><a id="sthref2343" name="sthref2343"></a><a id="sthref2344" name="sthref2344"></a>Creating Temporary Destinations</h2>
<p>Normally, you create JMS destinations (queues and topics) administratively rather than programmatically. Your JMS provider includes a tool to create and remove destinations, and it is common for destinations to be long-lasting.</p>
<p>The JMS API also enables you to create destinations (<code>TemporaryQueue</code> and <code>TemporaryTopic</code> objects) that last only for the duration of the connection in which they are created. You create these destinations dynamically using the <code>JMSContext.createTemporaryQueue</code> and the <code>JMSContext.createTemporaryTopic</code> methods, as in the following example:</p>
<pre xml:space="preserve" class="oac_no_warn">
TemporaryTopic replyTopic = context.createTemporaryTopic();
</pre>
<p>The only message consumers that can consume from a temporary destination are those created by the same connection that created the destination. Any message producer can send to the temporary destination. If you close the connection to which a temporary destination belongs, the destination is closed and its contents are lost.</p>
<p><a id="sthref2345" name="sthref2345"></a>You can use temporary destinations to implement a simple request/reply mechanism. If you create a temporary destination and specify it as the value of the <code>JMSReplyTo</code> message header field when you send a message, then the consumer of the message can use the value of the <code>JMSReplyTo</code> field as the destination to which it sends a reply. The consumer can also reference the original request by setting the <code>JMSCorrelationID</code> header field of the reply message to the value of the <code>JMSMessageID</code> header field of the request. For example, an <code>onMessage</code> method can create a <code>JMSContext</code> so that it can send a reply to the message it receives. It can use code such as the following:</p>
<pre xml:space="preserve" class="oac_no_warn">
replyMsg = context.createTextMessage("Consumer processed message: " 
        + msg.getText());
replyMsg.setJMSCorrelationID(msg.getJMSMessageID());
context.createProducer().send((Topic) msg.getJMSReplyTo(), replyMsg);
</pre>
<p>For an example, see <a href="jms-examples008.htm#BNCHF">Using an Entity to Join Messages from Two MDBs</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BNCGH" name="BNCGH"></a><a id="JEETT00819" name="JEETT00819"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">45.4.4</span> <a id="sthref2346" name="sthref2346"></a><a id="sthref2347" name="sthref2347"></a><a id="sthref2348" name="sthref2348"></a><a id="sthref2349" name="sthref2349"></a><a id="sthref2350" name="sthref2350"></a>Using JMS Local Transactions</h2>
<p>A <span class="glossaryterm">transaction</span> groups a series of operations into an atomic unit of work. If any one of the operations fails, the transaction can be rolled back, and the operations can be attempted again from the beginning. If all the operations succeed, the transaction can be committed.</p>
<p>In an application client or a Java SE client, you can use local transactions to group message sends and receives. You use the <code>JMSContext.commit</code> method to commit a transaction. You can send multiple messages in a transaction, and the messages will not be added to the queue or topic until the transaction is committed. If you receive multiple messages in a transaction, they will not be acknowledged until the transaction is committed.</p>
<p>You can use the <code>JMSContext.rollback</code> method to roll back a transaction. A transaction rollback means that all produced messages are destroyed and all consumed messages are recovered and redelivered unless they have expired (see <a href="#BNCGA">Allowing Messages to Expire</a>).</p>
<p>A transacted session is always involved in a transaction. To create a transacted session, call the <code>createContext</code> method as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
JMSContext context = 
        connectionFactory.createContext(JMSContext.SESSION_TRANSACTED);
</pre>
<p>As soon as the <code>commit</code> or the <code>rollback</code> method is called, one transaction ends and another transaction begins. Closing a transacted session rolls back its transaction in progress, including any pending sends and receives.</p>
<p>In an application running in the Java EE web or EJB container, you cannot use local transactions. Instead, you use JTA transactions, described in <a href="jms-concepts005.htm#BNCGL">Using the JMS API in Java EE Applications</a>.</p>
<p>You can combine several sends and receives in a single JMS local transaction, so long as they are all performed using the same <code>JMSContext</code>.</p>
<p>Do not use a single transaction if you use a request/reply mechanism, in which you send a message and then receive a reply to that message. If you try to use a single transaction, the program will hang, because the send cannot take place until the transaction is committed. The following code fragment illustrates the problem:</p>
<pre xml:space="preserve" class="oac_no_warn">
// Don't do this!
outMsg.setJMSReplyTo(replyQueue);
context.createProducer().send(outQueue, outMsg);
consumer = context.createConsumer(replyQueue);
inMsg = consumer.receive();
context.commit();
</pre>
<p>Because a message sent during a transaction is not actually sent until the transaction is committed, the transaction cannot contain any receives that depend on that message's having been sent.</p>
<p>The production and the consumption of a message cannot both be part of the same transaction. The reason is that the transactions take place between the clients and the JMS provider, which intervenes between the production and the consumption of the message. <a href="#BNCGI">Figure 45-8</a> illustrates this interaction.</p>
<div class="figure"><a id="BNCGI" name="BNCGI"></a><a id="JEETT00053" name="JEETT00053"></a>
<p class="titleinfigure">Figure 45-8 Using JMS Local Transactions</p>
<img src="img/jeett_dt_033.png" alt="Description of Figure 45-8 follows" title="Description of Figure 45-8 follows" longdesc="img_text/jeett_dt_033.htm" /><br />
<a id="sthref2351" name="sthref2351" href="img_text/jeett_dt_033.htm">Description of "Figure 45-8 Using JMS Local Transactions"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The sending of one or more messages to one or more destinations by Client 1 can form a single transaction, because it forms a single set of interactions with the JMS provider using a single <code>JMSContext</code>. Similarly, the receiving of one or more messages from one or more destinations by Client 2 also forms a single transaction using a single <code>JMSContext</code>. But because the two clients have no direct interaction and are using two different <code>JMSContext</code> objects, no transactions can take place between them.</p>
<p>Another way of putting this is that a transaction is a contract between a client and a JMS provider that defines whether a message is sent to a destination or whether a message is received from the destination. It is not a contract between the sending client and the receiving client.</p>
<p>This is the fundamental difference between messaging and synchronized processing. Instead of tightly coupling the sender and the receiver of a message, JMS couples the sender of a message with the destination, and it separately couples the destination with the receiver of the message. Therefore, while the sends and receives each have a tight coupling with the JMS provider, they do not have any coupling with each other.</p>
<p>When you create a <code>JMSContext</code>, you can specify whether it is transacted by using the <code>JMSContext.SESSION_TRANSACTED</code> argument to the <code>createContext</code> method. For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
try (JMSContext context = connectionFactory.createContext(
        JMSContext.SESSION_TRANSACTED);) {
    ...
</pre>
<p>The <code>commit</code> and the <code>rollback</code> methods for local transactions are associated with the session that underlies the <code>JMSContext</code>. You can combine operations on more than one queue or topic, or on a combination of queues and topics, in a single transaction if you use the same session to perform the operations. For example, you can use the same <code>JMSContext</code> to receive a message from a queue and send a message to a topic in the same transaction.</p>
<p>The example in <a href="jms-examples003.htm#BNCGJ">Using Local Transactions</a> shows how to use JMS local transactions.</p>
</div>
<!-- class="sect2" -->
<a id="BABFIFAJ" name="BABFIFAJ"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">45.4.5</span> <a id="sthref2352" name="sthref2352"></a><a id="sthref2353" name="sthref2353"></a>Sending Messages Asynchronously</h2>
<p>Normally, when you send a persistent message, the <code>send</code> method blocks until the JMS provider confirms that the message was sent successfully. The asynchronous send mechanism allows your application to send a message and continue work while waiting to learn whether the send completed.</p>
<p>This feature is currently available only in application clients and Java SE clients.</p>
<p>Sending a message asynchronously involves supplying a callback object. You specify a <code>CompletionListener</code> with an <code>onCompletion</code> method. For example, the following code instantiates a <code>CompletionListener</code> named <code>SendListener</code>. It then calls the <code>setAsync</code> method to specify that sends from this producer should be asynchronous and should use the specified listener:</p>
<pre xml:space="preserve" class="oac_no_warn">
CompletionListener listener = new SendListener();
context.createProducer().setAsync(listener).send(dest, message);
</pre>
<p>The <code>CompletionListener</code> class must implement two methods, <code>onCompletion</code> and <code>onException</code>. The <code>onCompletion</code> method is called if the send succeeds, and the <code>onException</code> method is called if it fails. A simple implementation of these methods might look like this:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Override
public void onCompletion(Message message) {
    System.out.println("onCompletion method: Send has completed.");
}

@Override
public void onException(Message message, Exception e) {
    System.out.println("onException method: send failed: " + e.toString());
    System.out.println("Unsent message is: \n" + message);
}
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jms-concepts003.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jms-concepts005.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

