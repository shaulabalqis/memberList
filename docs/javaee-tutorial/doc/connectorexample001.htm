<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:4Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="The trading Example" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:The trading Example | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<ul style="list-style-type:none">
<li><div id="backgroundColor"><a href="connectorexample001.htm#CHDFHAID"><span class="secnum">53.1</span> The trading Example</a><ul style="list-style-type:none">
<li><a href="connectorexample001.htm#CHDFADJD"><span class="secnum">53.1.1</span> Using the Outbound Resource Adapter</a></li>
<li><a href="connectorexample001.htm#sthref2898"><span class="secnum">53.1.2</span> Implementing the Outbound Resource Adapter</a></li>
<li><a href="connectorexample001.htm#sthref2901"><span class="secnum">53.1.3</span> Running the trading Example</a>
<ul style="list-style-type:none">
<li><a href="connectorexample001.htm#sthref2902"><span class="secnum">53.1.3.1</span> To Run the trading Example Using NetBeans IDE</a></li>
<li><a href="connectorexample001.htm#sthref2903"><span class="secnum">53.1.3.2</span> To Run the trading Example Using Maven</a></li>
</ul>
</li>
</ul>
</div></li>
<li><a href="connectorexample002.htm#CHDJEADB"><span class="secnum">53.2</span> The traffic Example</a>
<ul style="list-style-type:none">
<li><a href="connectorexample002.htm#sthref2905"><span class="secnum">53.2.1</span> Using the Inbound Resource Adapter</a></li>
<li><a href="connectorexample002.htm#sthref2906"><span class="secnum">53.2.2</span> Implementing the Inbound Resource Adapter</a></li>
<li><a href="connectorexample002.htm#sthref2909"><span class="secnum">53.2.3</span> Running the traffic Example</a>
<ul style="list-style-type:none">
<li><a href="connectorexample002.htm#sthref2910"><span class="secnum">53.2.3.1</span> To Run the traffic Example Using NetBeans IDE</a></li>
<li><a href="connectorexample002.htm#sthref2911"><span class="secnum">53.2.3.2</span> To Run the traffic Example Using Maven</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="connectorexample.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="connectorexample002.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="CHDFHAID" name="CHDFHAID"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h1 class="sect1"><span class="secnum">53.1</span> The trading Example</h1>
<p>The <code>trading</code> example demonstrates how to implement and use a simple outbound resource adapter that submits requests to a legacy EIS using a TCP socket. The example demonstrates the scenario in <a href="#CHDHADIG">Figure 53-1</a> and consists of the following modules:</p>
<ul>
<li>
<p><code>trading-eis</code>: A Java SE program that simulates a legacy EIS</p>
</li>
<li>
<p><code>trading-rar</code>: The outbound resource adapter implementation</p>
</li>
<li>
<p><code>trading-war</code>: A web application that uses the resource adapter</p>
</li>
<li>
<p><code>trading-ear</code>: An enterprise archive that contains the resource adapter and the web application</p>
</li>
</ul>
<div class="figure"><a id="CHDHADIG" name="CHDHADIG"></a>
<p class="titleinfigure">Figure 53-1 The trading Example</p>
<img src="img/jeett_dt_054.png" alt="Description of Figure 53-1 follows" title="Description of Figure 53-1 follows" longdesc="img_text/jeett_dt_054.htm" /><br />
<a id="sthref2896" name="sthref2896" href="img_text/jeett_dt_054.htm">Description of "Figure 53-1 The trading Example"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The <code>trading-eis</code> module is an auxiliary project that resembles a legacy stock trading execution platform. It contains a Java SE program that listens for trading requests in plain text on a TCP socket. The program replies to trading requests with a status value, a confirmation number, and the dollar amounts for the requested shares and fees. For example, a request-response pair would look like this:</p>
<pre xml:space="preserve" class="oac_no_warn">
&gt;&gt; BUY 1000 ZZZZ MARKET
&lt;&lt; EXECUTED #1234567 TOTAL 50400.00 FEE 252.00
</pre>
<p>The <code>trading-rar</code> module implements the outbound contract of the Java EE Connector Architecture to submit requests and obtain responses from the legacy stock trading execution platform. The <code>trading-rar</code> module provides and implements a custom client interface for Java EE applications to use. This interface is simpler than the Common Client Interface (CCI).</p>
<p>The <code>trading-war</code> module is a web application with a JavaServer Faces interface and a managed bean. This application enables clients to submit trades to the EIS using the resource adapter provided by the <code>trading-rar</code> module. The <code>trading-war</code> module uses the custom client interface provided by the resource adapter to obtain connections to the EIS.</p>
<a id="CHDFADJD" name="CHDFADJD"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2"><span class="secnum">53.1.1</span> Using the Outbound Resource Adapter</h2>
<p>In most cases, Java EE application developers use outbound resource adapters developed by a third party. Outbound resource adapters either implement the Common Client Interface (CCI) or provide a custom interface for applications to interact with the EIS. Outbound resource adapters provide Java EE applications with the following elements:</p>
<ul>
<li>
<p>Connection factories</p>
</li>
<li>
<p>Connection handles</p>
</li>
<li>
<p>Other interfaces and objects specific to the EIS domain</p>
</li>
</ul>
<p>Java EE applications obtain an instance of the connection factory via resource injection and then use the factory object to obtain connection handles to the EIS. The connection handles enable the application to make requests and obtain information from the EIS.</p>
<p>The <code>trading-rar</code> module provides a custom client interface that consists of the classes listed in <a href="#CHDCHJAC">Table 53-1</a>.</p>
<div class="tblhruleformal"><a id="sthref2897" name="sthref2897"></a><a id="CHDCHJAC" name="CHDCHJAC"></a>
<p class="titleintable">Table 53-1 Classes and Interfaces in the javaeetutorial.trading.rar.api Package</p>
<table class="HRuleFormal" title="Classes and Interfaces in the javaeetutorial.trading.rar.api Package" summary="Describes the client interface provided by the trading-rar resource adapter." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="32%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t2">API Component</th>
<th align="left" valign="bottom" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t2" headers="r1c1-t2">
<p><code>TradeOrder</code></p>
</td>
<td align="left" headers="r2c1-t2 r1c2-t2">
<p>Represents a trade order for the EIS</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t2" headers="r1c1-t2">
<p><code>TradeResponse</code></p>
</td>
<td align="left" headers="r3c1-t2 r1c2-t2">
<p>Represents a response from the EIS to a trade request</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t2" headers="r1c1-t2">
<p><code>TradeConnection</code></p>
</td>
<td align="left" headers="r4c1-t2 r1c2-t2">
<p>Represents a connection handle to the EIS</p>
<p>Provides a method for applications to submit trades to the EIS</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t2" headers="r1c1-t2">
<p><code>TradeConnectionFactory</code></p>
</td>
<td align="left" headers="r5c1-t2 r1c2-t2">
<p>Enables applications to obtain connection handles to the EIS</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t2" headers="r1c1-t2">
<p><code>TradeProcessingException</code></p>
</td>
<td align="left" headers="r6c1-t2 r1c2-t2">
<p>Indicates that a problem occurred processing a trade request</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>The <code>ResourceAccessBean</code> managed bean in the <code>trading-war</code> module configures a connection factory for the <code>trading-rar</code> resource adapter by using the <code>@ConnectionFactoryDefinition</code> annotation as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Named
@SessionScoped
@ConnectionFactoryDefinition(
    name = "java:comp/env/eis/TradeConnectionFactory",
    interfaceName = "javaeetutorial.trading.rar.api.TradeConnectionFactory",
    resourceAdapter = "#trading-rar",
    minPoolSize = 5,
    transactionSupport = 
            TransactionSupport.TransactionSupportLevel.NoTransaction
)
public class ResourceAccessBean implements Serializable { ... }
</pre>
<p>The <code>name</code> parameter specifies the JNDI name for the connection factory. This example registers the connection factory in the <code>java:comp</code> scope. You can use the <code>ConnectionFactoryDefinition</code> annotation to specify a different scope, such as <code>java:global</code>, <code>java:app</code>, or <code>java:module</code>. The <code>AdministeredObjectDefinition</code> annotation also enables you to register administered connector objects in the JNDI namespace.</p>
<p>The <code>interfaceName</code> parameter specifies the interface implemented by the connection factory included in the resource adapter. In this example, this is a custom interface.</p>
<p>The <code>resourceAdapter</code> parameter specifies the name of the resource adapter that contains the connection factory implementation. The <code>#</code> prefix in <code>#trading-rar</code> indicates that <code>trading-rar</code> is an embedded resource adapter that is bundled in the same EAR as this web application.</p>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>You can also configure a connection factory for a previously deployed outbound resource adapter using the administration commands from your application server. However, this is a vendor-specific procedure.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
<p>The managed bean obtains a connection factory object using resource injection as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
...
public class ResourceAccessBean implements Serializable {
    @Resource(lookup = "java:comp/env/eis/TradeConnectionFactory")
    private TradeConnectionFactory connectionFactory;
    ...
}
</pre>
<p>The managed bean uses the connection factory to obtain connection handles as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
TradeConnection connection = connectionFactory.getConnection();
</pre>
<p>The resource adapter returns a connection handle associated with a physical connection to the EIS. Once a connection handle is available, the managed bean submits a trade and obtains the response as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
TradeOrder order = new TradeOrder();
order.setNShares(1000);
order.setTicker(TradeOrder.Ticker.YYYY);
order.setOrderType(TradeOrder.OrderType.BUY);
order.setOrderClass(TradeOrder.OrderClass.MARKET);
...
try {
    TradeResponse response = connection.submitOrder(order);
    ...
} catch (TradeProcessingException ex) { ... }
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2898" name="sthref2898"></a>
<h2 class="sect2"><span class="secnum">53.1.2</span> Implementing the Outbound Resource Adapter</h2>
<p>The <code>trading-rar</code> module implements the outbound contract and a custom client interface for the simple legacy stock trading platform EIS used in this example. The architecture of the outbound resource adapter is shown in <a href="#CHDIGAJE">Figure 53-2</a>.</p>
<div class="figure"><a id="CHDIGAJE" name="CHDIGAJE"></a>
<p class="titleinfigure">Figure 53-2 Architecture of the trading Example</p>
<img src="img/jeett_dt_055.png" alt="Description of Figure 53-2 follows" title="Description of Figure 53-2 follows" longdesc="img_text/jeett_dt_055.htm" /><br />
<a id="sthref2899" name="sthref2899" href="img_text/jeett_dt_055.htm">Description of "Figure 53-2 Architecture of the trading Example"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The <code>trading-rar</code> module implements the interfaces listed in <a href="#CHDIBBIC">Table 53-2</a>.</p>
<div class="tblhruleformal"><a id="sthref2900" name="sthref2900"></a><a id="CHDIBBIC" name="CHDIBBIC"></a>
<p class="titleintable">Table 53-2 Interfaces Implemented in the trading-rar Module</p>
<table class="HRuleFormal" title="Interfaces Implemented in the trading-rar Module" summary="Lists the interfaces implemented in the tradeconnector module." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="26%" />
<col width="32%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t4">Package</th>
<th align="left" valign="bottom" id="r1c2-t4">Interface</th>
<th align="left" valign="bottom" id="r1c3-t4">Description</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t4" headers="r1c1-t4">
<p><code>javax.resource.spi</code></p>
</td>
<td align="left" headers="r2c1-t4 r1c2-t4">
<p><code>ResourceAdapter</code></p>
</td>
<td align="left" headers="r2c1-t4 r1c3-t4">
<p>Defines the lifecycle methods of the resource adapter</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t4" headers="r1c1-t4">
<p><code>javax.resource.spi</code></p>
</td>
<td align="left" headers="r3c1-t4 r1c2-t4">
<p><code>ManagedConnectionFactory</code></p>
</td>
<td align="left" headers="r3c1-t4 r1c3-t4">
<p>Defines a connection factory that the connection manager from the application server uses to obtain physical connections to the EIS</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t4" headers="r1c1-t4">
<p><code>javax.resource.spi</code></p>
</td>
<td align="left" headers="r4c1-t4 r1c2-t4">
<p><code>ManagedConnection</code></p>
</td>
<td align="left" headers="r4c1-t4 r1c3-t4">
<p>Defines a physical connection to the EIS that can be managed by the connection manager</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t4" headers="r1c1-t4">
<p><code>trading.rar.api</code></p>
</td>
<td align="left" headers="r5c1-t4 r1c2-t4">
<p><code>TradeConnectionFactory</code></p>
</td>
<td align="left" headers="r5c1-t4 r1c3-t4">
<p>Defines a connection factory that applications use to obtain connection handles</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t4" headers="r1c1-t4">
<p><code>trading.rar.api</code></p>
</td>
<td align="left" headers="r6c1-t4 r1c2-t4">
<p><code>TradeConnection</code></p>
</td>
<td align="left" headers="r6c1-t4 r1c3-t4">
<p>Defines a connection handle that applications use to interact with the EIS</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>When the <code>trading-ear</code> archive is deployed and a connection pool resource is configured as described in <a href="#CHDFADJD">Using the Outbound Resource Adapter</a>, the application server creates <code>TradeConnectionFactory</code> objects that applications can obtain using resource injection. The <code>TradeConnectionFactory</code> implementation delegates creating connections to the connection manager provided by the application server.</p>
<p>The connection manager uses the <code>ManagedConnectionFactory</code> implementation to obtain physical connections to the EIS and maintains a pool of active physical connections. When an application requests a connection handle, the connection manager associates a connection from the pool with a new connection handle that the application can use. Connection pooling improves application performance and simplifies resource adapter development.</p>
<p>For more details, see the code and the comments in the <code>trading-rar</code> module.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2901" name="sthref2901"></a>
<h2 class="sect2"><span class="secnum">53.1.3</span> Running the trading Example</h2>
<p>You can use either NetBeans IDE or Maven to build, package, deploy, and run the <code>trading</code> example.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2902" name="sthref2902"></a>
<h3 class="sect3"><span class="secnum">53.1.3.1</span> To Run the trading Example Using NetBeans IDE</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>From the <span class="bold">File</span> menu, choose <span class="bold">Open Project</span>.</p>
</li>
<li>
<p>In the Open Project dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="italic">tut-install</span>/examples/connectors
</pre></li>
<li>
<p>Select the <code>trading</code> folder.</p>
</li>
<li>
<p>Click <span class="bold">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="bold">Projects</span> tab, expand the <code>trading</code> node.</p>
</li>
<li>
<p>Right-click the <code>trading-eis</code> module and select <span class="bold">Open Project</span>.</p>
</li>
<li>
<p>Right-click the <code>trading-eis</code> project and select <span class="bold">Run</span>.</p>
<p>The messages from the EIS appear in the <span class="gui-object-action">Output</span> tab:</p>
<pre xml:space="preserve" class="oac_no_warn">
Trade execution server listening on port 4004.
</pre></li>
<li>
<p>Right-click the <code>trading-ear</code> project and select <span class="bold">Build</span>.</p>
<p>This command packages the resource adapter and the web application in an EAR file and deploys it to GlassFish Server.</p>
</li>
<li>
<p>Open the following URL in a web browser:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/trading/
</pre>
<p>The web interface enables you to connect to the EIS and submit trades. The server log shows the requests from the web application and the call sequence that provides connection handles from the resource adapter.</p>
</li>
<li>
<p>Before undeploying the <code>trading-ear</code> application, close the <code>trading-eis</code> application from the status bar.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2903" name="sthref2903"></a>
<h3 class="sect3"><span class="secnum">53.1.3.2</span> To Run the trading Example Using Maven</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>In a terminal window, go to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="italic">tut-install</span>/examples/connectors/trading/
</pre></li>
<li>
<p>Enter the following command:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre>
<p>This command builds and packages the resource adapter and the web application into an EAR archive and deploys it to GlassFish Server.</p>
</li>
<li>
<p>In the same terminal window, go to the <code>trading-eis</code> directory:</p>
<pre xml:space="preserve" class="oac_no_warn">
cd trading-eis
</pre></li>
<li>
<p>Enter the following command to run the trade execution platform:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn exec:java
</pre>
<p>The messages from the EIS appear in the terminal window:</p>
<pre xml:space="preserve" class="oac_no_warn">
Trade execution server listening on port 4004.
</pre></li>
<li>
<p>Open the following URL in a web browser:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/trading/
</pre>
<p>The web interface enables you to connect to the EIS and submit trades. The server log shows the requests from the web application and the call sequence that provides connection handles from the resource adapter.</p>
</li>
<li>
<p>Before undeploying the <code>trading-ear</code> application, press <span class="bold">Ctrl+C</span> on the terminal window to close the <code>trading-eis</code> application.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="connectorexample.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="connectorexample002.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

