<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:2Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Using the Timer Service" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Using the Timer Service | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples001.htm#BNBOD"><span class="secnum">34.1</span> The cart Example</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples001.htm#BNBOE"><span class="secnum">34.1.1</span> The Business Interface</a></li>
<li><a href="ejb-basicexamples001.htm#BNBOF"><span class="secnum">34.1.2</span> Session Bean Class</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples001.htm#BNBOG"><span class="secnum">34.1.2.1</span> Lifecycle Callback Methods</a></li>
<li><a href="ejb-basicexamples001.htm#BNBOH"><span class="secnum">34.1.2.2</span> Business Methods</a></li>
</ul>
</li>
<li><a href="ejb-basicexamples001.htm#BNBOI"><span class="secnum">34.1.3</span> The @Remove Method</a></li>
<li><a href="ejb-basicexamples001.htm#BNBOJ"><span class="secnum">34.1.4</span> Helper Classes</a></li>
<li><a href="ejb-basicexamples001.htm#BNBOK"><span class="secnum">34.1.5</span> Running the cart Example</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples001.htm#BNBOL"><span class="secnum">34.1.5.1</span> To Run the cart Example Using NetBeans IDE</a></li>
<li><a href="ejb-basicexamples001.htm#BNBON"><span class="secnum">34.1.5.2</span> To Run the cart Example Using Maven</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="ejb-basicexamples002.htm#GIPVI"><span class="secnum">34.2</span> A Singleton Session Bean Example: counter</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples002.htm#GIPVC"><span class="secnum">34.2.1</span> Creating a Singleton Session Bean</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples002.htm#GIPPQ"><span class="secnum">34.2.1.1</span> Initializing Singleton Session Beans</a></li>
<li><a href="ejb-basicexamples002.htm#GIPSZ"><span class="secnum">34.2.1.2</span> Managing Concurrent Access in a Singleton Session Bean</a></li>
<li><a href="ejb-basicexamples002.htm#GIPVD"><span class="secnum">34.2.1.3</span> Handling Errors in a Singleton Session Bean</a></li>
</ul>
</li>
<li><a href="ejb-basicexamples002.htm#GIPXL"><span class="secnum">34.2.2</span> The Architecture of the counter Example</a></li>
<li><a href="ejb-basicexamples002.htm#GIPVL"><span class="secnum">34.2.3</span> Running the counter Example</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples002.htm#GIPXT"><span class="secnum">34.2.3.1</span> To Run the counter Example Using NetBeans IDE</a></li>
<li><a href="ejb-basicexamples002.htm#GIPZW"><span class="secnum">34.2.3.2</span> To Run the counter Example Using Maven</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="ejb-basicexamples003.htm#BNBOR"><span class="secnum">34.3</span> A Web Service Example: helloservice</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples003.htm#BNBOS"><span class="secnum">34.3.1</span> The Web Service Endpoint Implementation Class</a></li>
<li><a href="ejb-basicexamples003.htm#BNBOT"><span class="secnum">34.3.2</span> Stateless Session Bean Implementation Class</a></li>
<li><a href="ejb-basicexamples003.htm#BNBOU"><span class="secnum">34.3.3</span> Running the helloservice Example</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples003.htm#BNBOV"><span class="secnum">34.3.3.1</span> To Build, Package, and Deploy the helloservice Example Using NetBeans IDE</a></li>
<li><a href="ejb-basicexamples003.htm#BNBOW"><span class="secnum">34.3.3.2</span> To Build, Package, and Deploy the helloservice Example Using Maven</a></li>
<li><a href="ejb-basicexamples003.htm#BNBOX"><span class="secnum">34.3.3.3</span> To Test the Service without a Client</a></li>
</ul>
</li>
</ul>
</li>
<li><div id="backgroundColor"><a href="ejb-basicexamples004.htm#BNBOY"><span class="secnum">34.4</span> Using the Timer Service</a><ul style="list-style-type:none">
<li><a href="ejb-basicexamples004.htm#GIQLK"><span class="secnum">34.4.1</span> Creating Calendar-Based Timer Expressions</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples004.htm#GIQMX"><span class="secnum">34.4.1.1</span> Specifying Multiple Values in Calendar Expressions</a></li>
</ul>
</li>
<li><a href="ejb-basicexamples004.htm#GIQLT"><span class="secnum">34.4.2</span> Programmatic Timers</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples004.htm#BNBOZ"><span class="secnum">34.4.2.1</span> The @Timeout Method</a></li>
<li><a href="ejb-basicexamples004.htm#BNBPA"><span class="secnum">34.4.2.2</span> Creating Programmatic Timers</a></li>
</ul>
</li>
<li><a href="ejb-basicexamples004.htm#GIQMB"><span class="secnum">34.4.3</span> Automatic Timers</a></li>
<li><a href="ejb-basicexamples004.htm#BNBPB"><span class="secnum">34.4.4</span> Canceling and Saving Timers</a></li>
<li><a href="ejb-basicexamples004.htm#BNBPC"><span class="secnum">34.4.5</span> Getting Timer Information</a></li>
<li><a href="ejb-basicexamples004.htm#BNBPD"><span class="secnum">34.4.6</span> Transactions and Timers</a></li>
<li><a href="ejb-basicexamples004.htm#BNBPE"><span class="secnum">34.4.7</span> The timersession Example</a></li>
<li><a href="ejb-basicexamples004.htm#BNBPF"><span class="secnum">34.4.8</span> Running the timersession Example</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples004.htm#GIQNI"><span class="secnum">34.4.8.1</span> To Run the timersession Example Using NetBeans IDE</a></li>
<li><a href="ejb-basicexamples004.htm#GIQNQ"><span class="secnum">34.4.8.2</span> To Build, Package, and Deploy the timersession Example Using Maven</a></li>
<li><a href="ejb-basicexamples004.htm#GIQOP"><span class="secnum">34.4.8.3</span> To Run the Web Client</a></li>
</ul>
</li>
</ul>
</div></li>
<li><a href="ejb-basicexamples005.htm#BNBPJ"><span class="secnum">34.5</span> Handling Exceptions</a></li>
</ul>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="ejb-basicexamples003.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="ejb-basicexamples005.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BNBOY" name="BNBOY"></a><a id="JEETT00451" name="JEETT00451"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">34.4</span> <a id="sthref1768" name="sthref1768"></a><a id="sthref1769" name="sthref1769"></a>Using the Timer Service</h1>
<p>Applications that model business work flows often rely on timed notifications. The timer service of the enterprise bean container enables you to schedule timed notifications for all types of enterprise beans except for stateful session beans. You can schedule a timed notification to occur according to a calendar schedule, at a specific time, after a duration of time, or at timed intervals. For example, you could set timers to go off at 10:30 a.m. on May 23, in 30 days, or every 12 hours.</p>
<p><a id="sthref1770" name="sthref1770"></a><a id="sthref1771" name="sthref1771"></a>Enterprise bean timers are either programmatic timers or automatic timers. <span class="glossaryterm">Programmatic timers</span> are set by explicitly calling one of the timer creation methods of the <code>TimerService</code> interface. <span class="glossaryterm">Automatic timers</span> are created upon the successful deployment of an enterprise bean that contains a method annotated with the <code>javax.ejb.Schedule</code> or <code>javax.ejb.Schedules</code> annotations.</p>
<a id="GIQLK" name="GIQLK"></a><a id="JEETT01105" name="JEETT01105"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">34.4.1</span> <a id="sthref1772" name="sthref1772"></a>Creating Calendar-Based Timer Expressions</h2>
<p>Timers can be set according to a calendar-based schedule, expressed using a syntax similar to the UNIX <code>cron</code> utility. Both programmatic and automatic timers can use calendar-based timer expressions. <a href="#GIQLY">Table 34-1</a> shows the calendar-based timer attributes.</p>
<div class="tblhruleformal"><a id="sthref1773" name="sthref1773"></a><a id="GIQLY" name="GIQLY"></a>
<p class="titleintable">Table 34-1 Calendar-Based Timer Attributes</p>
<table class="HRuleFormal" title="Calendar-Based Timer Attributes" summary="This table lists and describes the attributes for calendar-based timers and provides default and allowable values as well as examples." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="15%" />
<col width="23%" />
<col width="13%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t2">Attribute</th>
<th align="left" valign="bottom" id="r1c2-t2">Description</th>
<th align="left" valign="bottom" id="r1c3-t2">Default Value</th>
<th align="left" valign="bottom" id="r1c4-t2">Allowable Values and Examples</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t2" headers="r1c1-t2">
<p><code>second</code></p>
</td>
<td align="left" headers="r2c1-t2 r1c2-t2">
<p>One or more seconds within a minute</p>
</td>
<td align="left" headers="r2c1-t2 r1c3-t2">
<p><code>0</code></p>
</td>
<td align="left" headers="r2c1-t2 r1c4-t2">
<p><code>0</code> to <code>59</code>. For example: <code>second="30"</code>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t2" headers="r1c1-t2">
<p><code>minute</code></p>
</td>
<td align="left" headers="r3c1-t2 r1c2-t2">
<p>One or more minutes within an hour</p>
</td>
<td align="left" headers="r3c1-t2 r1c3-t2">
<p><code>0</code></p>
</td>
<td align="left" headers="r3c1-t2 r1c4-t2">
<p><code>0</code> to <code>59</code>. For example: <code>minute="15"</code>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t2" headers="r1c1-t2">
<p><code>hour</code></p>
</td>
<td align="left" headers="r4c1-t2 r1c2-t2">
<p>One or more hours within a day</p>
</td>
<td align="left" headers="r4c1-t2 r1c3-t2">
<p><code>0</code></p>
</td>
<td align="left" headers="r4c1-t2 r1c4-t2">
<p><code>0</code> to <code>23</code>. For example: <code>hour="13"</code>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t2" headers="r1c1-t2">
<p><code>dayOfWeek</code></p>
</td>
<td align="left" headers="r5c1-t2 r1c2-t2">
<p>One or more days within a week</p>
</td>
<td align="left" headers="r5c1-t2 r1c3-t2">
<p><code>*</code></p>
<br /></td>
<td align="left" headers="r5c1-t2 r1c4-t2">
<p><code>0</code> to <code>7</code> (both 0 and 7 refer to Sunday). For example: <code>dayOfWeek="3"</code>.</p>
<p><code>Sun</code>, <code>Mon</code>, <code>Tue</code>, <code>Wed</code>, <code>Thu</code>, <code>Fri</code>, <code>Sat</code>. For example: <code>dayOfWeek="Mon"</code>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t2" headers="r1c1-t2">
<p><code>dayOfMonth</code></p>
</td>
<td align="left" headers="r6c1-t2 r1c2-t2">
<p>One or more days within a month</p>
</td>
<td align="left" headers="r6c1-t2 r1c3-t2">
<p><code>*</code></p>
<br /></td>
<td align="left" headers="r6c1-t2 r1c4-t2">
<p><code>1</code> to <code>31</code>. For example: <code>dayOfMonth="15"</code>.</p>
<p><code>&ndash;7</code> to <code>&ndash;1</code> (a negative number means the <span class="variable">n</span>th day or days before the end of the month). For example: <code>dayOfMonth="&ndash;3"</code>.</p>
<p><code>Last</code>. For example: <code>dayOfMonth="Last"</code>.</p>
<p>[<code>1st</code>, <code>2nd</code>, <code>3rd</code>, <code>4th</code>, <code>5th</code>, <code>Last</code>] [<code>Sun</code>, <code>Mon</code>, <code>Tue</code>, <code>Wed</code>, <code>Thu</code>, <code>Fri</code>, <code>Sat</code>]. For example: <code>dayOfMonth="2nd Fri"</code>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r7c1-t2" headers="r1c1-t2">
<p><code>month</code></p>
</td>
<td align="left" headers="r7c1-t2 r1c2-t2">
<p>One or more months within a year</p>
</td>
<td align="left" headers="r7c1-t2 r1c3-t2">
<p><code>*</code></p>
<br /></td>
<td align="left" headers="r7c1-t2 r1c4-t2">
<p><code>1</code> to <code>12</code>. For example: <code>month="7"</code>.</p>
<p><code>Jan</code>, <code>Feb</code>, <code>Mar</code>, <code>Apr</code>, <code>May</code>, <code>Jun</code>, <code>Jul</code>, <code>Aug</code>, <code>Sep</code>, <code>Oct</code>, <code>Nov</code>, <code>Dec</code>. For example: <code>month="July"</code>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r8c1-t2" headers="r1c1-t2">
<p><code>year</code></p>
</td>
<td align="left" headers="r8c1-t2 r1c2-t2">
<p>A particular calendar year</p>
</td>
<td align="left" headers="r8c1-t2 r1c3-t2">
<p><code>*</code></p>
<br /></td>
<td align="left" headers="r8c1-t2 r1c4-t2">
<p>A four-digit calendar year. For example: <code>year="2011"</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<a id="GIQMX" name="GIQMX"></a><a id="JEETT00659" name="JEETT00659"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">34.4.1.1</span> Specifying Multiple Values in Calendar Expressions</h3>
<p>You can specify multiple values in calendar expressions, as described in the following sections.</p>
<p><span class="bold">Using Wildcards in Calendar Expressions</span></p>
<p>Setting an attribute to an asterisk symbol (<code>*</code>) represents all allowable values for the attribute.</p>
<p>The following expression represents every minute:</p>
<pre xml:space="preserve" class="oac_no_warn">
minute="*"
</pre>
<p>The following expression represents every day of the week:</p>
<pre xml:space="preserve" class="oac_no_warn">
dayOfWeek="*"
</pre>
<p><span class="bold">Specifying a List of Values</span></p>
<p>To specify two or more values for an attribute, use a comma (<code>,</code>) to separate the values. A range of values is allowed as part of a list. Wildcards and intervals, however, are not allowed.</p>
<p>Duplicates within a list are ignored.</p>
<p>The following expression sets the day of the week to Tuesday and Thursday:</p>
<pre xml:space="preserve" class="oac_no_warn">
dayOfWeek="Tue, Thu"
</pre>
<p>The following expression represents 4:00 a.m., every hour from 9:00 a.m. to 5:00 p.m. using a range, and 10:00 p.m.:</p>
<pre xml:space="preserve" class="oac_no_warn">
hour="4,9-17,22"
</pre>
<p><span class="bold">Specifying a Range of Values</span></p>
<p>Use a dash character (<code>-</code>) to specify an inclusive range of values for an attribute. Members of a range cannot be wildcards, lists, or intervals. A range of the form <code>x-x</code>, is equivalent to the single-valued expression <code>x</code>. A range of the form <code>x-y</code> where <code>x</code> is greater than <code>y</code> is equivalent to the expression <code>x-</code><span class="variable">maximumvalue</span><code>,</code> <span class="variable">minimumvalue</span><code>-y</code>. That is, the expression begins at <code>x</code>, rolls over to the beginning of the allowable values, and continues up to <code>y</code>.</p>
<p>The following expression represents 9:00 a.m. to 5:00 p.m.:</p>
<pre xml:space="preserve" class="oac_no_warn">
hour="9-17"
</pre>
<p>The following expression represents Friday through Monday:</p>
<pre xml:space="preserve" class="oac_no_warn">
dayOfWeek="5-1"
</pre>
<p>The following expression represents the twenty-fifth day of the month to the end of the month, and the beginning of the month to the fifth day of the month:</p>
<pre xml:space="preserve" class="oac_no_warn">
dayOfMonth="25-5"
</pre>
<p>It is equivalent to the following expression:</p>
<pre xml:space="preserve" class="oac_no_warn">
dayOfMonth="25-Last,1-5"
</pre>
<p><span class="bold">Specifying Intervals</span></p>
<p>The forward slash (<code>/</code>) constrains an attribute to a starting point and an interval and is used to specify every <code>N</code> seconds, minutes, or hours within the minute, hour, or day. For an expression of the form <code>x/y</code>, <code>x</code> represents the starting point and <code>y</code> represents the interval. The wildcard character may be used in the <code>x</code> position of an interval and is equivalent to setting <code>x</code> to <code>0</code>.</p>
<p>Intervals may be set only for <code>second</code>, <code>minute</code>, and <code>hour</code> attributes.</p>
<p>The following expression represents every 10 minutes within the hour:</p>
<pre xml:space="preserve" class="oac_no_warn">
minute="*/10"
</pre>
<p>It is equivalent to:</p>
<pre xml:space="preserve" class="oac_no_warn">
minute="0,10,20,30,40,50"
</pre>
<p>The following expression represents every 2 hours starting at noon:</p>
<pre xml:space="preserve" class="oac_no_warn">
hour="12/2"
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="GIQLT" name="GIQLT"></a><a id="JEETT01106" name="JEETT01106"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">34.4.2</span> <a id="sthref1774" name="sthref1774"></a>Programmatic Timers</h2>
<p><a id="sthref1775" name="sthref1775"></a>When a programmatic timer expires (goes off), the container calls the method annotated <code>@Timeout</code> in the bean's implementation class. The <code>@Timeout</code> method contains the business logic that handles the timed event.</p>
<a id="BNBOZ" name="BNBOZ"></a><a id="JEETT00660" name="JEETT00660"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">34.4.2.1</span> <a id="sthref1776" name="sthref1776"></a>The @Timeout Method</h3>
<p>Methods annotated <code>@Timeout</code> in the enterprise bean class must return <code>void</code> and optionally take a <code>javax.ejb.Timer</code> object as the only parameter. They may not throw application exceptions:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Timeout
public void timeout(Timer timer) {
    System.out.println("TimerBean: timeout occurred");
}
</pre></div>
<!-- class="sect3" -->
<a id="BNBPA" name="BNBPA"></a><a id="JEETT00661" name="JEETT00661"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">34.4.2.2</span> <a id="sthref1777" name="sthref1777"></a>Creating Programmatic Timers</h3>
<p><a id="sthref1778" name="sthref1778"></a>To create a timer, the bean invokes one of the <code>create</code> methods of the <code>TimerService</code> interface. These methods allow single-action, interval, or calendar-based timers to be created.</p>
<p>For single-action or interval timers, the expiration of the timer can be expressed as either a duration or an absolute time. The duration is expressed as a the number of milliseconds before a timeout event is triggered. To specify an absolute time, create a <code>java.util.Date</code> object and pass it to the <code>TimerService.createSingleActionTimer</code> or the <code>TimerService.createTimer</code> method.</p>
<p>The following code sets a programmatic timer that will expire in 1 minute (60,000 milliseconds):</p>
<pre xml:space="preserve" class="oac_no_warn">
long duration = 60000;
Timer timer =
    timerService.createSingleActionTimer(duration, new TimerConfig());
</pre>
<p>The following code sets a programmatic timer that will expire at 12:05 p.m. on May 1, 2015, specified as a <code>java.util.Date</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
SimpleDateFormatter formatter = 
    new SimpleDateFormatter("MM/dd/yyyy 'at' HH:mm");
Date date = formatter.parse("05/01/2015 at 12:05");
Timer timer = timerService.createSingleActionTimer(date, new TimerConfig());
</pre>
<p>For calendar-based timers, the expiration of the timer is expressed as a <code>javax.ejb.ScheduleExpression</code> object, passed as a parameter to the <code>TimerService.createCalendarTimer</code> method. The <code>ScheduleExpression</code> class represents calendar-based timer expressions and has methods that correspond to the attributes described in <a href="#GIQLK">Creating Calendar-Based Timer Expressions</a>.</p>
<p>The following code creates a programmatic timer using the <code>ScheduleExpression</code> helper class:</p>
<pre xml:space="preserve" class="oac_no_warn">
ScheduleExpression schedule = new ScheduleExpression();
schedule.dayOfWeek("Mon");
schedule.hour("12-17, 23");
Timer timer = timerService.createCalendarTimer(schedule);
</pre>
<p>For details on the method signatures, see the <code>TimerService</code> API documentation at <code><a href="http://docs.oracle.com/javaee/7/api/javax/ejb/TimerService.html">http://docs.oracle.com/javaee/7/api/javax/ejb/TimerService.html</a></code>.</p>
<p>The bean described in <a href="#BNBPE">The timersession Example</a> creates a timer as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
Timer timer = timerService.createTimer(intervalDuration,
        "Created new programmatic timer");
</pre>
<p>In the <code>timersession</code> example, the method that calls <code>createTimer</code> is invoked in a business method, which is called by a client.</p>
<p>Timers are persistent by default. If the server is shut down or crashes, persistent timers are saved and will become active again when the server is restarted. If a persistent timer expires while the server is down, the container will call the <code>@Timeout</code> method when the server is restarted.</p>
<p>Nonpersistent programmatic timers are created by calling <code>TimerConfig.setPersistent(false)</code> and passing the <code>TimerConfig</code> object to one of the timer-creation methods.</p>
<p>The <code>Date</code> and <code>long</code> parameters of the <code>createTimer</code> methods represent time with the resolution of milliseconds. However, because the timer service is not intended for real-time applications, a callback to the <code>@Timeout</code> method might not occur with millisecond precision. The timer service is for business applications, which typically measure time in hours, days, or longer durations.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="GIQMB" name="GIQMB"></a><a id="JEETT01107" name="JEETT01107"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">34.4.3</span> <a id="sthref1779" name="sthref1779"></a><a id="sthref1780" name="sthref1780"></a>Automatic Timers</h2>
<p>Automatic timers are created by the EJB container when an enterprise bean that contains methods annotated with the <code>@Schedule</code> or <code>@Schedules</code> annotations is deployed. An enterprise bean can have multiple automatic timeout methods, unlike a programmatic timer, which allows only one method annotated with the <code>@Timeout</code> annotation in the enterprise bean class.</p>
<p>Automatic timers can be configured through annotations or through the <code>ejb-jar.xml</code> deployment descriptor.</p>
<p>Adding a <code>@Schedule</code> annotation on an enterprise bean marks that method as a timeout method according to the calendar schedule specified in the attributes of <code>@Schedule</code>.</p>
<p>The <code>@Schedule</code> annotation has elements that correspond to the calendar expressions detailed in <a href="#GIQLK">Creating Calendar-Based Timer Expressions</a> and the <code>persistent</code>, <code>info</code>, and <code>timezone</code> elements.</p>
<p>The optional <code>persistent</code> element takes a Boolean value and is used to specify whether the automatic timer should survive a server restart or crash. By default, all automatic timers are persistent.</p>
<p>The optional <code>timezone</code> element is used to specify that the automatic timer is associated with a particular time zone. If set, this element will evaluate all timer expressions in relation to the specified time zone, regardless of the time zone in which the EJB container is running. By default, all automatic timers set are in relation to the default time zone of the server.</p>
<p>The optional <code>info</code> element is used to set an informational description of the timer. A timer's information can be retrieved later by using <code>Timer.getInfo</code>.</p>
<p>The following timeout method uses <code>@Schedule</code> to set a timer that will expire every Sunday at midnight:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Schedule(dayOfWeek="Sun", hour="0")
public void cleanupWeekData() { ... }
</pre>
<p>The <code>@Schedules</code> annotation is used to specify multiple calendar-based timer expressions for a given timeout method.</p>
<p>The following timeout method uses the <code>@Schedules</code> annotation to set multiple calendar-based timer expressions. The first expression sets a timer to expire on the last day of every month. The second expression sets a timer to expire every Friday at 11:00 p.m.:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Schedules ({
    @Schedule(dayOfMonth="Last"),
    @Schedule(dayOfWeek="Fri", hour="23")
})
public void doPeriodicCleanup() { ... }
</pre></div>
<!-- class="sect2" -->
<a id="BNBPB" name="BNBPB"></a><a id="JEETT01108" name="JEETT01108"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">34.4.4</span> <a id="sthref1781" name="sthref1781"></a><a id="sthref1782" name="sthref1782"></a>Canceling and Saving Timers</h2>
<p>Timers can be cancelled by the following events.</p>
<ul>
<li>
<p><a id="sthref1783" name="sthref1783"></a>When a single-event timer expires, the EJB container calls the associated timeout method and then cancels the timer.</p>
</li>
<li>
<p>When the bean invokes the <code>cancel</code> method of the <code>Timer</code> interface, the container cancels the timer.</p>
</li>
</ul>
<p><a id="sthref1784" name="sthref1784"></a>If a method is invoked on a cancelled timer, the container throws the <code>javax.ejb.NoSuchObjectLocalException</code>.</p>
<p>To save a <code>Timer</code> object for future reference, invoke its <code>getHandle</code> method and store the <code>TimerHandle</code> object in a database. (A <code>TimerHandle</code> object is serializable.) To reinstantiate the <code>Timer</code> object, retrieve the handle from the database and invoke <code>getTimer</code> on the handle. A <code>TimerHandle</code> object cannot be passed as an argument of a method defined in a remote or web service interface. In other words, remote clients and web service clients cannot access a bean's <code>TimerHandle</code> object. Local clients, however, do not have this restriction.</p>
</div>
<!-- class="sect2" -->
<a id="BNBPC" name="BNBPC"></a><a id="JEETT01109" name="JEETT01109"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">34.4.5</span> <a id="sthref1785" name="sthref1785"></a>Getting Timer Information</h2>
<p><a id="sthref1786" name="sthref1786"></a><a id="sthref1787" name="sthref1787"></a><a id="sthref1788" name="sthref1788"></a>In addition to defining the <code>cancel</code> and <code>getHandle</code> methods, the <code>Timer</code> interface defines methods for obtaining information about timers:</p>
<pre xml:space="preserve" class="oac_no_warn">
public long getTimeRemaining();
public java.util.Date getNextTimeout();
public java.io.Serializable getInfo();
</pre>
<p>The <code>getInfo</code> method returns the object that was the last parameter of the <code>createTimer</code> invocation. For example, in the <code>createTimer</code> code snippet of the preceding section, this information parameter is a <code>String</code> object with the value <code>created timer</code>.</p>
<p>To retrieve all of a bean's active timers, call the <code>getTimers</code> method of the <code>TimerService</code> interface. The <code>getTimers</code> method returns a collection of <code>Timer</code> objects.</p>
</div>
<!-- class="sect2" -->
<a id="BNBPD" name="BNBPD"></a><a id="JEETT01110" name="JEETT01110"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">34.4.6</span> <a id="sthref1789" name="sthref1789"></a><a id="sthref1790" name="sthref1790"></a>Transactions and Timers</h2>
<p>An enterprise bean usually creates a timer within a transaction. If this transaction is rolled back, the timer creation also is rolled back. Similarly, if a bean cancels a timer within a transaction that gets rolled back, the timer cancellation is rolled back. In this case, the timer's duration is reset as if the cancellation had never occurred.</p>
<p>In beans that use container-managed transactions, the <code>@Timeout</code> method usually has the <code>Required</code> or <code>RequiresNew</code> transaction attribute to preserve transaction integrity. With these attributes, the EJB container begins the new transaction before calling the <code>@Timeout</code> method. If the transaction is rolled back, the container will call the <code>@Timeout</code> method at least one more time.</p>
</div>
<!-- class="sect2" -->
<a id="BNBPE" name="BNBPE"></a><a id="JEETT01111" name="JEETT01111"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">34.4.7</span> <a id="sthref1791" name="sthref1791"></a><a id="sthref1792" name="sthref1792"></a>The timersession Example</h2>
<p>The source code for this example is in the <span class="variable">tut-install</span><code>/examples/ejb/timersession/src/main/java/</code> directory.</p>
<p><code>TimerSessionBean</code> is a singleton session bean that shows how to set both an automatic timer and a programmatic timer. In the source code listing of <code>TimerSessionBean</code> that follows, the <code>setTimer</code> and <code>@Timeout</code> methods are used to set a programmatic timer. A <code>TimerService</code> instance is injected by the container when the bean is created. Because it's a business method, <code>setTimer</code> is exposed to the local, no-interface view of <code>TimerSessionBean</code> and can be invoked by the client. In this example, the client invokes <code>setTimer</code> with an interval duration of 8,000 milliseconds, or 8 seconds. The <code>setTimer</code> method creates a new timer by invoking the <code>createTimer</code> method of <code>TimerService</code>. Now that the timer is set, the EJB container will invoke the <code>programmaticTimeout</code> method of <code>TimerSessionBean</code> when the timer expires, in about 8 seconds:</p>
<pre xml:space="preserve" class="oac_no_warn">
...
    public void setTimer(long intervalDuration) {
        logger.log(Level.INFO, 
                "Setting a programmatic timeout for {0} milliseconds from now.",
                intervalDuration);
        Timer timer = timerService.createTimer(intervalDuration, 
                "Created new programmatic timer");
    }
    
    @Timeout
    public void programmaticTimeout(Timer timer) {
        this.setLastProgrammaticTimeout(new Date());
        logger.info("Programmatic timeout occurred.");
    }
...
</pre>
<p><code>TimerSessionBean</code> also has an automatic timer and timeout method, <code>automaticTimeout</code>. The automatic timer is set to expire every 1 minute and is set by using a calendar-based timer expression in the <code>@Schedule</code> annotation:</p>
<pre xml:space="preserve" class="oac_no_warn">
...
    @Schedule(minute = "*/1", hour = "*", persistent = false)
    public void automaticTimeout() {
        this.setLastAutomaticTimeout(new Date());
        logger.info("Automatic timeout occured");
    }
...
</pre>
<p><code>TimerSessionBean</code> also has two business methods: <code>getLastProgrammaticTimeout</code> and <code>getLastAutomaticTimeout</code>. Clients call these methods to get the date and time of the last timeout for the programmatic timer and automatic timer, respectively.</p>
<p>Here's the source code for the <code>TimerSessionBean</code> class:</p>
<pre xml:space="preserve" class="oac_no_warn">
package javaeetutorial.timersession.ejb;

import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Resource;
import javax.ejb.Schedule;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.ejb.Timeout;
import javax.ejb.Timer;
import javax.ejb.TimerService;

@Singleton
@Startup
public class TimerSessionBean {
    @Resource
    TimerService timerService;

    private Date lastProgrammaticTimeout;
    private Date lastAutomaticTimeout;
    
    private static final Logger logger = 
            Logger.getLogger("timersession.ejb.TimerSessionBean");
    
    public void setTimer(long intervalDuration) {
        logger.log(Level.INFO,
                "Setting a programmatic timeout for {0} milliseconds from now.",
                intervalDuration);
        Timer timer = timerService.createTimer(intervalDuration, 
                "Created new programmatic timer");
    }
    
    @Timeout
    public void programmaticTimeout(Timer timer) {
        this.setLastProgrammaticTimeout(new Date());
        logger.info("Programmatic timeout occurred.");
    }

    @Schedule(minute = "*/1", hour = "*", persistent = false)
    public void automaticTimeout() {
        this.setLastAutomaticTimeout(new Date());
        logger.info("Automatic timeout occured");
    }

    public String getLastProgrammaticTimeout() {
        if (lastProgrammaticTimeout != null) {
            return lastProgrammaticTimeout.toString();
        } else {
            return "never";
        }
    }

    public void setLastProgrammaticTimeout(Date lastTimeout) {
        this.lastProgrammaticTimeout = lastTimeout;
    }

    public String getLastAutomaticTimeout() {
        if (lastAutomaticTimeout != null) {
            return lastAutomaticTimeout.toString();
        } else {
            return "never";
        }
    }

    public void setLastAutomaticTimeout(Date lastAutomaticTimeout) {
        this.lastAutomaticTimeout = lastAutomaticTimeout;
    }
}
</pre>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>GlassFish Server has a default minimum timeout value of 1,000 milliseconds, or 1 second. If you need to set the timeout value lower than 1,000 milliseconds, change the value of the Minimum Delivery Interval setting in the Administration Console. To modify the minimum timeout value, in the Administration Console expand <span class="gui-object-action">Configurations</span>, then expand <span class="gui-object-action">server-config</span>, select <span class="gui-object-action">EJB Container</span>, and click the <span class="gui-object-action">EJB Timer Service</span> tab. Enter a new timeout value under <span class="gui-object-action">Minimum Delivery Interval</span> and click <span class="gui-object-action">Save</span>. The lowest practical value for <code>minimum-delivery-interval-in-millis</code> is around 10 milliseconds, owing to virtual machine constraints.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
</div>
<!-- class="sect2" -->
<a id="BNBPF" name="BNBPF"></a><a id="JEETT01112" name="JEETT01112"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">34.4.8</span> Running the timersession Example</h2>
<p>You can use either NetBeans IDE or Maven to build, package, deploy, and run the <code>timersession</code> example.</p>
<a id="GIQNI" name="GIQNI"></a><a id="JEETT00204" name="JEETT00204"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">34.4.8.1</span> To Run the timersession Example Using NetBeans IDE</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/ejb
</pre></li>
<li>
<p>Select the <code>timersession</code> folder.</p>
</li>
<li>
<p>Click <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>From the <span class="gui-object-action">Run</span> menu, choose <span class="gui-object-action">Run Project</span>.</p>
<p>This builds and packages the application into a WAR file located at <span class="variable">tut-install</span><code>/examples/ejb/timersession/target/timersession.war</code>, deploys this WAR file to your GlassFish Server instance, and then runs the web client.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="GIQNQ" name="GIQNQ"></a><a id="JEETT00205" name="JEETT00205"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">34.4.8.2</span> To Build, Package, and Deploy the timersession Example Using Maven</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>In a terminal window, go to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/ejb/timersession/
</pre></li>
<li>
<p>Enter the following command:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre>
<p>This builds and packages the application into a WAR file located at <span class="variable">tut-install</span><code>/examples/ejb/timersession/target/timersession.war</code> and deploys this WAR file to your GlassFish Server instance.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="GIQOP" name="GIQOP"></a><a id="JEETT00206" name="JEETT00206"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">34.4.8.3</span> To Run the Web Client</h3>
<ol>
<li>
<p>Open a web browser to the following URL:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/timersession
</pre></li>
<li>
<p>Click <span class="gui-object-action">Set Timer</span> to set a programmatic timer.</p>
</li>
<li>
<p>Wait for a while and click the browser's <span class="gui-object-action">Refresh</span> button.</p>
<p>You will see the date and time of the last programmatic and automatic timeouts.</p>
<p>To see the messages that are logged when a timeout occurs, open the <code>server.log</code> file located in <span class="variable">domain-dir</span><code>/logs/</code>.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="ejb-basicexamples003.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="ejb-basicexamples005.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

