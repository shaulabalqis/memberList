<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:0Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="The Lifecycle of a JavaServer Faces Application" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:The Lifecycle of a JavaServer Faces Application | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<ul style="list-style-type:none">
<li><a href="jsf-intro001.htm#BNAPK"><span class="secnum">7.1</span> What Is a JavaServer Faces Application?</a></li>
<li><a href="jsf-intro002.htm#BNAPJ"><span class="secnum">7.2</span> JavaServer Faces Technology Benefits</a></li>
<li><a href="jsf-intro003.htm#GJAAM"><span class="secnum">7.3</span> A Simple JavaServer Faces Application</a></li>
<li><a href="jsf-intro004.htm#BNAQD"><span class="secnum">7.4</span> User Interface Component Model</a>
<ul style="list-style-type:none">
<li><a href="jsf-intro004.htm#BNAQE"><span class="secnum">7.4.1</span> User Interface Component Classes</a></li>
<li><a href="jsf-intro004.htm#BNAQF"><span class="secnum">7.4.2</span> Component Rendering Model</a></li>
<li><a href="jsf-intro004.htm#BNAQI"><span class="secnum">7.4.3</span> Conversion Model</a></li>
<li><a href="jsf-intro004.htm#GIREH"><span class="secnum">7.4.4</span> Event and Listener Model</a></li>
<li><a href="jsf-intro004.htm#BNAQK"><span class="secnum">7.4.5</span> Validation Model</a></li>
</ul>
</li>
<li><a href="jsf-intro005.htm#BNAQL"><span class="secnum">7.5</span> Navigation Model</a></li>
<li><div id="backgroundColor"><a href="jsf-intro006.htm#BNAQQ"><span class="secnum">7.6</span> The Lifecycle of a JavaServer Faces Application</a><ul style="list-style-type:none">
<li><a href="jsf-intro006.htm#GLPRC"><span class="secnum">7.6.1</span> Overview of the JavaServer Faces Lifecycle</a></li>
<li><a href="jsf-intro006.htm#BNAQS"><span class="secnum">7.6.2</span> Restore View Phase</a></li>
<li><a href="jsf-intro006.htm#BNAQT"><span class="secnum">7.6.3</span> Apply Request Values Phase</a></li>
<li><a href="jsf-intro006.htm#GJSBP"><span class="secnum">7.6.4</span> Process Validations Phase</a></li>
<li><a href="jsf-intro006.htm#BNAQV"><span class="secnum">7.6.5</span> Update Model Values Phase</a></li>
<li><a href="jsf-intro006.htm#BNAQW"><span class="secnum">7.6.6</span> Invoke Application Phase</a></li>
<li><a href="jsf-intro006.htm#BNAQX"><span class="secnum">7.6.7</span> Render Response Phase</a></li>
</ul>
</div></li>
<li><a href="jsf-intro007.htm#GKNOJ"><span class="secnum">7.7</span> Partial Processing and Partial Rendering</a></li>
<li><a href="jsf-intro008.htm#BNAQY"><span class="secnum">7.8</span> Further Information about JavaServer Faces Technology</a></li>
</ul>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jsf-intro005.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jsf-intro007.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BNAQQ" name="BNAQQ"></a><a id="JEETT00358" name="JEETT00358"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">7.6</span> <a id="sthref323" name="sthref323"></a>The Lifecycle of a JavaServer Faces Application</h1>
<p>The lifecycle of an application refers to the various stages of processing of that application, from its initiation to its conclusion. All applications have lifecycles. During a web application lifecycle, common tasks are performed, including the following.</p>
<ul>
<li>
<p>Handling incoming requests</p>
</li>
<li>
<p>Decoding parameters</p>
</li>
<li>
<p>Modifying and saving state</p>
</li>
<li>
<p>Rendering web pages to the browser</p>
</li>
</ul>
<p>The JavaServer Faces web application framework manages lifecycle phases automatically for simple applications or allows you to manage them manually for more complex applications as required.</p>
<p>JavaServer Faces applications that use advanced features may require interaction with the lifecycle at certain phases. For example, Ajax applications use partial processing features of the lifecycle (see <a href="jsf-intro007.htm#GKNOJ">Partial Processing and Partial Rendering</a>). A clearer understanding of the lifecycle phases is key to creating well-designed components.</p>
<p>A simplified view of the JavaServer faces lifecycle, consisting of the two main phases of a JavaServer Faces web application, is introduced in <a href="jsf-intro003.htm#GJAAM">A Simple JavaServer Faces Application</a>. This section examines the JavaServer Faces lifecycle in more detail.</p>
<a id="GLPRC" name="GLPRC"></a><a id="JEETT00952" name="JEETT00952"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">7.6.1</span> Overview of the JavaServer Faces Lifecycle</h2>
<p>The lifecycle of a JavaServer Faces application begins when the client makes an HTTP request for a page and ends when the server responds with the page, translated to HTML.</p>
<p>The lifecycle can be divided into two main phases: <span class="glossaryterm">Execute</span> and <span class="glossaryterm">Render</span>. The Execute phase is further divided into subphases to support the sophisticated component tree. This structure requires that component data be converted and validated, component events be handled, and component data be propagated to beans in an orderly fashion.</p>
<p>A JavaServer Faces page is represented by a tree of components, called a <span class="glossaryterm">view</span>. During the lifecycle, the JavaServer Faces implementation must build the view while considering the state saved from a previous submission of the page. When the client requests a page, the JavaServer Faces implementation performs several tasks, such as validating the data input of components in the view and converting input data to types specified on the server side.</p>
<p>The JavaServer Faces implementation performs all these tasks as a series of steps in the JavaServer Faces request-response lifecycle. <a href="#BNAQR">Figure 7-3</a> illustrates these steps.</p>
<div class="figure"><a id="BNAQR" name="BNAQR"></a><a id="JEETT00019" name="JEETT00019"></a>
<p class="titleinfigure">Figure 7-3 JavaServer Faces Standard Request-Response Lifecycle</p>
<img src="img/jeett_dt_016.png" alt="Description of Figure 7-3 follows" title="Description of Figure 7-3 follows" longdesc="img_text/jeett_dt_016.htm" /><br />
<a id="sthref324" name="sthref324" href="img_text/jeett_dt_016.htm">Description of "Figure 7-3 JavaServer Faces Standard Request-Response Lifecycle"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The request-response lifecycle handles two kinds of requests: initial requests and postbacks. An <span class="glossaryterm">initial request</span> occurs when a user makes a request for a page for the first time. A <span class="glossaryterm">postback request</span> occurs when a user submits the form contained on a page that was previously loaded into the browser as a result of executing an initial request.</p>
<p>When the lifecycle handles an initial request, it executes only the Restore View and Render Response phases, because there is no user input or action to process. Conversely, when the lifecycle handles a postback, it executes all of the phases.</p>
<p><a id="sthref325" name="sthref325"></a><a id="sthref326" name="sthref326"></a>Usually, the first request for a JavaServer Faces page comes in from a client, as a result of clicking a link or button component on a JavaServer Faces page. To render a response that is another JavaServer Faces page, the application creates a new view and stores it in the <code>javax.faces.context.FacesContext</code> instance, which represents all of the information associated with processing an incoming request and creating a response. The application then acquires object references needed by the view and calls the <code>FacesContext.renderResponse</code> method, which forces immediate rendering of the view by skipping to the <a href="#BNAQX">Render Response Phase</a> of the lifecycle, as is shown by the arrows labelled Render Response in .</p>
<p><a id="sthref327" name="sthref327"></a>Sometimes, an application might need to redirect to a different web application resource, such as a web service, or generate a response that does not contain JavaServer Faces components. In these situations, the developer must skip the Render Response phase by calling the <code>FacesContext.responseComplete</code> method. This situation is also shown in , with the arrows labelled Response Complete.</p>
<p>The most common situation is that a JavaServer Faces component submits a request for another JavaServer Faces page. In this case, the JavaServer Faces implementation handles the request and automatically goes through the phases in the lifecycle to perform any necessary conversions, validations, and model updates and to generate the response.</p>
<p>There is one exception to the lifecycle described in this section. When a component's <code>immediate</code> attribute is set to <code>true</code>, the validation, conversion, and events associated with these components are processed during the <a href="#BNAQT">Apply Request Values Phase</a> rather than in a later phase.</p>
<p>The details of the lifecycle explained in the following sections are primarily intended for developers who need to know information such as when validations, conversions, and events are usually handled and ways to change how and when they are handled. For more information on each of the lifecycle phases, download the latest JavaServer Faces Specification documentation from <code><a href="http://jcp.org/en/jsr/detail?id=344">http://jcp.org/en/jsr/detail?id=344</a></code>.</p>
<p>The JavaServer Faces application lifecycle Execute phase contains the following subphases:</p>
<ul>
<li>
<p><a href="#BNAQS">Restore View Phase</a></p>
</li>
<li>
<p><a href="#BNAQT">Apply Request Values Phase</a></p>
</li>
<li>
<p><a href="#GJSBP">Process Validations Phase</a></p>
</li>
<li>
<p><a href="#BNAQV">Update Model Values Phase</a></p>
</li>
<li>
<p><a href="#BNAQW">Invoke Application Phase</a></p>
</li>
<li>
<p><a href="#BNAQX">Render Response Phase</a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BNAQS" name="BNAQS"></a><a id="JEETT00953" name="JEETT00953"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">7.6.2</span> Restore View Phase</h2>
<p><a id="sthref328" name="sthref328"></a>When a request for a JavaServer Faces page is made, usually by an action, such as when a link or a button component is clicked, the JavaServer Faces implementation begins the Restore View phase.</p>
<p><a id="sthref329" name="sthref329"></a><a id="sthref330" name="sthref330"></a><a id="sthref331" name="sthref331"></a><a id="sthref332" name="sthref332"></a><a id="sthref333" name="sthref333"></a>During this phase, the JavaServer Faces implementation builds the view of the page, wires event handlers and validators to components in the view, and saves the view in the <code>FacesContext</code> instance, which contains all the information needed to process a single request. All the application's components, event handlers, converters, and validators have access to the <code>FacesContext</code> instance.</p>
<p>If the request for the page is an initial request, the JavaServer Faces implementation creates an empty view during this phase and the lifecycle advances to the Render Response phase, during which the empty view is populated with the components referenced by the tags in the page.</p>
<p>If the request for the page is a postback, a view corresponding to this page already exists in the <code>FacesContext</code> instance. During this phase, the JavaServer Faces implementation restores the view by using the state information saved on the client or the server.</p>
</div>
<!-- class="sect2" -->
<a id="BNAQT" name="BNAQT"></a><a id="JEETT00954" name="JEETT00954"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">7.6.3</span> Apply Request Values Phase</h2>
<p><a id="sthref334" name="sthref334"></a><a id="sthref335" name="sthref335"></a><a id="sthref336" name="sthref336"></a>After the component tree is restored during a postback request, each component in the tree extracts its new value from the request parameters by using its <code>decode</code> (<code>processDecodes()</code>) method. The value is then stored locally on each component.</p>
<p><a id="sthref337" name="sthref337"></a><a id="sthref338" name="sthref338"></a>If any <code>decode</code> methods or event listeners have called the <code>renderResponse</code> method on the current <code>FacesContext</code> instance, the JavaServer Faces implementation skips to the Render Response phase.</p>
<p>If any events have been queued during this phase, the JavaServer Faces implementation broadcasts the events to interested listeners.</p>
<p>If some components on the page have their <code>immediate</code> attributes (see <a href="jsf-page002.htm#BNARI">The immediate Attribute</a>) set to <code>true</code>, then the validations, conversions, and events associated with these components will be processed during this phase. If any conversion fails, an error message associated with the component is generated and queued on <code>FacesContext</code>. This message will be displayed during the Render Response phase, along with any validation errors resulting from the Process Validations phase.</p>
<p>At this point, if the application needs to redirect to a different web application resource or generate a response that does not contain any JavaServer Faces components, it can call the <code>FacesContext.responseComplete</code> method.</p>
<p>At the end of this phase, the components are set to their new values, and messages and events have been queued.</p>
<p>If the current request is identified as a partial request, the partial context is retrieved from the <code>FacesContext</code>, and the partial processing method is applied.</p>
</div>
<!-- class="sect2" -->
<a id="GJSBP" name="GJSBP"></a><a id="JEETT00955" name="JEETT00955"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">7.6.4</span> Process Validations Phase</h2>
<p><a id="sthref339" name="sthref339"></a><a id="sthref340" name="sthref340"></a>During this phase, the JavaServer Faces implementation processes all validators registered on the components in the tree by using its <code>validate</code> (<code>processValidators</code>) method. It examines the component attributes that specify the rules for the validation and compares these rules to the local value stored for the component. The JavaServer Faces implementation also completes conversions for input components that do not have the <code>immediate</code> attribute set to true.</p>
<p>If the local value is invalid, or if any conversion fails, the JavaServer Faces implementation adds an error message to the <code>FacesContext</code> instance, and the lifecycle advances directly to the Render Response phase so that the page is rendered again with the error messages displayed. If there were conversion errors from the Apply Request Values phase, the messages for these errors are also displayed.</p>
<p><a id="sthref341" name="sthref341"></a><a id="sthref342" name="sthref342"></a>If any <code>validate</code> methods or event listeners have called the <code>renderResponse</code> method on the current <code>FacesContext</code>, the JavaServer Faces implementation skips to the Render Response phase.</p>
<p><a id="sthref343" name="sthref343"></a>At this point, if the application needs to redirect to a different web application resource or generate a response that does not contain any JavaServer Faces components, it can call the <code>FacesContext.responseComplete</code> method.</p>
<p>If events have been queued during this phase, the JavaServer Faces implementation broadcasts them to interested listeners.</p>
<p>If the current request is identified as a partial request, the partial context is retrieved from the <code>FacesContext</code>, and the partial processing method is applied.</p>
</div>
<!-- class="sect2" -->
<a id="BNAQV" name="BNAQV"></a><a id="JEETT00956" name="JEETT00956"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">7.6.5</span> <a id="sthref344" name="sthref344"></a>Update Model Values Phase</h2>
<p>After the JavaServer Faces implementation determines that the data is valid, it traverses the component tree and sets the corresponding server-side object properties to the components' local values. The JavaServer Faces implementation updates only the bean properties pointed at by an input component's <code>value</code> attribute. If the local data cannot be converted to the types specified by the bean properties, the lifecycle advances directly to the Render Response phase so that the page is re-rendered with errors displayed. This is similar to what happens with validation errors.</p>
<p><a id="sthref345" name="sthref345"></a><a id="sthref346" name="sthref346"></a><a id="sthref347" name="sthref347"></a><a id="sthref348" name="sthref348"></a>If any <code>updateModels</code> methods or any listeners have called the <code>renderResponse</code> method on the current <code>FacesContext</code> instance, the JavaServer Faces implementation skips to the Render Response phase.</p>
<p><a id="sthref349" name="sthref349"></a>At this point, if the application needs to redirect to a different web application resource or generate a response that does not contain any JavaServer Faces components, it can call the <code>FacesContext.responseComplete</code> method.</p>
<p>If any events have been queued during this phase, the JavaServer Faces implementation broadcasts them to interested listeners.</p>
<p>If the current request is identified as a partial request, the partial context is retrieved from the <code>FacesContext</code>, and the partial processing method is applied.</p>
</div>
<!-- class="sect2" -->
<a id="BNAQW" name="BNAQW"></a><a id="JEETT00957" name="JEETT00957"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">7.6.6</span> Invoke Application Phase</h2>
<p><a id="sthref350" name="sthref350"></a>During this phase, the JavaServer Faces implementation handles any application-level events, such as submitting a form or linking to another page.</p>
<p>At this point, if the application needs to redirect to a different web application resource or generate a response that does not contain any JavaServer Faces components, it can call the <code>FacesContext.responseComplete</code> method.</p>
<p>If the view being processed was reconstructed from state information from a previous request and if a component has fired an event, these events are broadcast to interested listeners.</p>
<p>Finally, the JavaServer Faces implementation transfers control to the Render Response phase.</p>
</div>
<!-- class="sect2" -->
<a id="BNAQX" name="BNAQX"></a><a id="JEETT00958" name="JEETT00958"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">7.6.7</span> <a id="sthref351" name="sthref351"></a>Render Response Phase</h2>
<p>During this phase, JavaServer Faces builds the view and delegates authority to the appropriate resource for rendering the pages.</p>
<p>If this is an initial request, the components that are represented on the page will be added to the component tree. If this is not an initial request, the components are already added to the tree and need not be added again.</p>
<p>If the request is a postback and errors were encountered during the Apply Request Values phase, Process Validations phase, or Update Model Values phase, the original page is rendered again during this phase. If the pages contain <code>h:message</code> or <code>h:messages</code> tags, any queued error messages are displayed on the page.</p>
<p>After the content of the view is rendered, the state of the response is saved so that subsequent requests can access it. The saved state is available to the Restore View phase.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jsf-intro005.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jsf-intro007.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

