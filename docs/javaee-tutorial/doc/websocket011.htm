<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:1Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="The dukeetf2 Example Application" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:The dukeetf2 Example Application | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<ul style="list-style-type:none">
<li><a href="websocket001.htm#BABDABHF"><span class="secnum">18.1</span> Introduction to WebSocket</a></li>
<li><a href="websocket002.htm#BABEAEFC"><span class="secnum">18.2</span> Creating WebSocket Applications in the Java EE Platform</a></li>
<li><a href="websocket003.htm#BABGJEIG"><span class="secnum">18.3</span> Programmatic Endpoints</a></li>
<li><a href="websocket004.htm#BABFEBGA"><span class="secnum">18.4</span> Annotated Endpoints</a></li>
<li><a href="websocket005.htm#BABFCGBJ"><span class="secnum">18.5</span> Sending and Receiving Messages</a>
<ul style="list-style-type:none">
<li><a href="websocket005.htm#sthref1271"><span class="secnum">18.5.1</span> Sending Messages</a>
<ul style="list-style-type:none">
<li><a href="websocket005.htm#BABIFBCG"><span class="secnum">18.5.1.1</span> Sending Messages to All Peers Connected to an Endpoint</a></li>
</ul>
</li>
<li><a href="websocket005.htm#sthref1273"><span class="secnum">18.5.2</span> Receiving Messages</a></li>
</ul>
</li>
<li><a href="websocket006.htm#BABGJCAD"><span class="secnum">18.6</span> Maintaining Client State</a></li>
<li><a href="websocket007.htm#BABGADFG"><span class="secnum">18.7</span> Using Encoders and Decoders</a>
<ul style="list-style-type:none">
<li><a href="websocket007.htm#sthref1276"><span class="secnum">18.7.1</span> Implementing Encoders to Convert Java Objects into WebSocket Messages</a></li>
<li><a href="websocket007.htm#sthref1278"><span class="secnum">18.7.2</span> Implementing Decoders to Convert WebSocket Messages into Java Objects</a></li>
</ul>
</li>
<li><a href="websocket008.htm#BABEJIJI"><span class="secnum">18.8</span> Path Parameters</a></li>
<li><a href="websocket009.htm#BABDEJHB"><span class="secnum">18.9</span> Handling Errors</a></li>
<li><a href="websocket010.htm#BABJAIGH"><span class="secnum">18.10</span> Specifying an Endpoint Configurator Class</a></li>
<li><div id="backgroundColor"><a href="websocket011.htm#BABGCEHE"><span class="secnum">18.11</span> The dukeetf2 Example Application</a><ul style="list-style-type:none">
<li><a href="websocket011.htm#sthref1285"><span class="secnum">18.11.1</span> Architecture of the dukeetf2 Sample Application</a>
<ul style="list-style-type:none">
<li><a href="websocket011.htm#sthref1286"><span class="secnum">18.11.1.1</span> The Endpoint</a></li>
<li><a href="websocket011.htm#sthref1287"><span class="secnum">18.11.1.2</span> The Enterprise Bean</a></li>
<li><a href="websocket011.htm#sthref1288"><span class="secnum">18.11.1.3</span> The HTML Page</a></li>
</ul>
</li>
<li><a href="websocket011.htm#sthref1289"><span class="secnum">18.11.2</span> Running the dukeetf2 Example Application</a>
<ul style="list-style-type:none">
<li><a href="websocket011.htm#sthref1290"><span class="secnum">18.11.2.1</span> To Run the dukeetf2 Example Application Using NetBeans IDE</a></li>
<li><a href="websocket011.htm#sthref1291"><span class="secnum">18.11.2.2</span> To Run the dukeetf2 Example Application Using Maven</a></li>
</ul>
</li>
</ul>
</div></li>
<li><a href="websocket012.htm#BABCDBBC"><span class="secnum">18.12</span> The websocketbot Example Application</a>
<ul style="list-style-type:none">
<li><a href="websocket012.htm#sthref1294"><span class="secnum">18.12.1</span> Architecture of the websocketbot Example Application</a>
<ul style="list-style-type:none">
<li><a href="websocket012.htm#sthref1295"><span class="secnum">18.12.1.1</span> The CDI Bean</a></li>
<li><a href="websocket012.htm#sthref1296"><span class="secnum">18.12.1.2</span> The WebSocket Endpoint</a></li>
<li><a href="websocket012.htm#sthref1297"><span class="secnum">18.12.1.3</span> The Application Messages</a></li>
<li><a href="websocket012.htm#sthref1298"><span class="secnum">18.12.1.4</span> The Encoder Classes</a></li>
<li><a href="websocket012.htm#sthref1299"><span class="secnum">18.12.1.5</span> The Message Decoder</a></li>
<li><a href="websocket012.htm#sthref1300"><span class="secnum">18.12.1.6</span> The HTML Page</a></li>
</ul>
</li>
<li><a href="websocket012.htm#sthref1301"><span class="secnum">18.12.2</span> Running the websocketbot Example Application</a>
<ul style="list-style-type:none">
<li><a href="websocket012.htm#sthref1302"><span class="secnum">18.12.2.1</span> To Run the websocketbot Example Application Using NetBeans IDE</a></li>
<li><a href="websocket012.htm#sthref1303"><span class="secnum">18.12.2.2</span> To Run the websocketbot Example Application Using Maven</a></li>
<li><a href="websocket012.htm#BABDDAAG"><span class="secnum">18.12.2.3</span> To Test the websocketbot Example Application</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="websocket013.htm#BABDFIFD"><span class="secnum">18.13</span> Further Information about WebSocket</a></li>
</ul>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="websocket010.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="websocket012.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BABGCEHE" name="BABGCEHE"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h1 class="sect1"><span class="secnum">18.11</span> The dukeetf2 Example Application<a id="sthref1283" name="sthref1283"></a><a id="sthref1284" name="sthref1284"></a></h1>
<p>The <code>dukeetf2</code> example application, located in the <span class="variable">tut-install</span><code>/examples/web/websocket/dukeetf2/</code> directory, demonstrates how to use a WebSocket endpoint to provide data updates to web clients. The example resembles a service that provides periodic updates on the price and trading volume of an electronically traded fund (ETF).</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1285" name="sthref1285"></a>
<h2 class="sect2"><span class="secnum">18.11.1</span> Architecture of the dukeetf2 Sample Application</h2>
<p>The <code>dukeetf2</code> example application consists of a WebSocket endpoint, an enterprise bean, and an HTML page.</p>
<ul>
<li>
<p>The endpoint accepts connections from clients and sends them updates when new data for price and trading volume becomes available.</p>
</li>
<li>
<p>The enterprise bean updates the price and volume information once every second.</p>
</li>
<li>
<p>The HTML page uses JavaScript code to connect to the WebSocket endpoint, parse incoming messages, and update the price and volume information without reloading the page.</p>
</li>
</ul>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1286" name="sthref1286"></a>
<h3 class="sect3"><span class="secnum">18.11.1.1</span> The Endpoint</h3>
<p>The WebSocket endpoint is implemented in the <code>ETFEndpoint</code> class, which stores all connected sessions in a queue and provides a method that the enterprise bean calls when there is new information available to send:</p>
<pre xml:space="preserve" class="oac_no_warn">
@ServerEndpoint("/dukeetf")
public class ETFEndpoint {
   private static final Logger logger = Logger.getLogger("ETFEndpoint");
   /* Queue for all open WebSocket sessions */
   static Queue&lt;Session&gt; queue = new ConcurrentLinkedQueue&lt;&gt;();

   /* PriceVolumeBean calls this method to send updates */
   public static void send(double price, int volume) {
      String msg = String.format("%.2f / %d", price, volume);
      try {
         /* Send updates to all open WebSocket sessions */
         for (Session session : queue) {
            session.getBasicRemote().sendText(msg);
            logger.log(Level.INFO, "Sent: {0}", msg);
         }
      } catch (IOException e) {
         logger.log(Level.INFO, e.toString());
      }
    }
    ...
}
</pre>
<p>The lifecycle methods of the endpoint add and remove sessions to and from the queue:</p>
<pre xml:space="preserve" class="oac_no_warn">
@ServerEndpoint("/dukeetf")
public class ETFEndpoint {
   ...
   @OnOpen
   public void openConnection(Session session) {
      /* Register this connection in the queue */
      queue.add(session);
      logger.log(Level.INFO, "Connection opened.");
   }

   @OnClose
   public void closedConnection(Session session) {
      /* Remove this connection from the queue */
      queue.remove(session);
      logger.log(Level.INFO, "Connection closed.");
   }

   @OnError
   public void error(Session session, Throwable t) {
      /* Remove this connection from the queue */
      queue.remove(session);
      logger.log(Level.INFO, t.toString());
      logger.log(Level.INFO, "Connection error.");
   }
}
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1287" name="sthref1287"></a>
<h3 class="sect3"><span class="secnum">18.11.1.2</span> The Enterprise Bean</h3>
<p>The enterprise bean uses the timer service to generate new price and volume information every second:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Startup
@Singleton
public class PriceVolumeBean {
   /* Use the container's timer service */
   @Resource TimerService tservice;
   private Random random;
   private volatile double price = 100.0;
   private volatile int volume = 300000;
   private static final Logger logger = Logger.getLogger("PriceVolumeBean");
   
   @PostConstruct
   public void init() {
       /* Initialize the EJB and create a timer */
       logger.log(Level.INFO, "Initializing EJB.");
       random = new Random();
       tservice.createIntervalTimer(1000, 1000, new TimerConfig());
   }
   
   @Timeout
   public void timeout() {
       /* Adjust price and volume and send updates */
       price += 1.0*(random.nextInt(100)-50)/100.0;
       volume += random.nextInt(5000) - 2500;
       ETFEndpoint.send(price, volume);
   }
}
</pre>
<p>The enterprise bean calls the <code>send</code> method of the <code>ETFEndpoint</code> class in the timeout method. See <a href="ejb-basicexamples004.htm#BNBOY">Using the Timer Service</a> in <a href="ejb-basicexamples.htm#GIJRB">Chapter 34, "Running the Enterprise Bean Examples"</a> for more information on the timer service.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1288" name="sthref1288"></a>
<h3 class="sect3"><span class="secnum">18.11.1.3</span> The HTML Page</h3>
<p>The HTML page consists of a table and some JavaScript code. The table contains two fields referenced from JavaScript code:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;...&lt;/head&gt;
&lt;body&gt;
  ...
  &lt;table&gt;
    ...
    &lt;td id="price"&gt;--.--&lt;/td&gt;
    ...
    &lt;td id="volume"&gt;--&lt;/td&gt;
    ...
  &lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The JavaScript code uses the WebSocket API to connect to the server endpoint and to designate a callback method for incoming messages. The callback method updates the page with the new information.</p>
<pre xml:space="preserve" class="oac_no_warn">
var wsocket;
function connect() {
   wsocket = new WebSocket("ws://localhost:8080/dukeetf2/dukeetf");
   wsocket.onmessage = onMessage;
}
function onMessage(evt) {
   var arraypv = evt.data.split("/");
   document.getElementById("price").innerHTML = arraypv[0];
   document.getElementById("volume").innerHTML = arraypv[1];
}
window.addEventListener("load", connect, false);
</pre>
<p>The WebSocket API is supported by most modern browsers, and it is widely used in HTML5 web client development.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1289" name="sthref1289"></a>
<h2 class="sect2"><span class="secnum">18.11.2</span> Running the dukeetf2 Example Application</h2>
<p>This section describes how to run the <code>dukeetf2</code> example application using NetBeans IDE and from the command line.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1290" name="sthref1290"></a>
<h3 class="sect3"><span class="secnum">18.11.2.1</span> To Run the dukeetf2 Example Application Using NetBeans IDE</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>From the <span class="bold">File</span> menu, choose <span class="bold">Open Project</span>.</p>
</li>
<li>
<p>In the Open Project dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="italic">tut-install</span>/examples/web/websocket
</pre></li>
<li>
<p>Select the <code>dukeetf2</code> folder.</p>
</li>
<li>
<p>Click <span class="bold">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="bold">Projects</span> tab, right-click the <code>dukeetf2</code> project and select <span class="bold">Run</span>.</p>
<p>This command builds and packages the application into a WAR file (<code>dukeetf2.war</code>) located in the <code>target/</code> directory, deploys it to the server, and launches a web browser window with the following URL:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/dukeetf2/
</pre>
<p>Open the same URL on a different web browser tab or window to see how both pages get price and volume updates simultaneously.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1291" name="sthref1291"></a>
<h3 class="sect3"><span class="secnum">18.11.2.2</span> To Run the dukeetf2 Example Application Using Maven</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>In a terminal window, go to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="italic">tut-install</span>/examples/web/websocket/dukeetf2/
</pre></li>
<li>
<p>Enter the following command to deploy the application:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre></li>
<li>
<p>Open a web browser window and enter the following URL:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/dukeetf2/
</pre>
<p>Open the same URL on a different web browser tab or window to see how both pages get price and volume updates simultaneously.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="websocket010.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="websocket012.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

