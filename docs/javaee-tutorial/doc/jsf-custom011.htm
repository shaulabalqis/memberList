<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:1Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Creating and Using a Custom Validator" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Creating and Using a Custom Validator | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<ul style="list-style-type:none">
<li><a href="jsf-custom001.htm#BNAVH"><span class="secnum">15.1</span> Determining Whether You Need a Custom Component or Renderer</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom001.htm#BNAVI"><span class="secnum">15.1.1</span> When to Use a Custom Component</a></li>
<li><a href="jsf-custom001.htm#BNAVJ"><span class="secnum">15.1.2</span> When to Use a Custom Renderer</a></li>
<li><a href="jsf-custom001.htm#BNAVK"><span class="secnum">15.1.3</span> Component, Renderer, and Tag Combinations</a></li>
</ul>
</li>
<li><a href="jsf-custom002.htm#GLPCB"><span class="secnum">15.2</span> Understanding the Image Map Example</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom002.htm#GLPBD"><span class="secnum">15.2.1</span> Why Use JavaServer Faces Technology to Implement an Image Map?</a></li>
<li><a href="jsf-custom002.htm#GLPEM"><span class="secnum">15.2.2</span> Understanding the Rendered HTML</a></li>
<li><a href="jsf-custom002.htm#GLPCD"><span class="secnum">15.2.3</span> Understanding the Facelets Page</a></li>
<li><a href="jsf-custom002.htm#GLPBO"><span class="secnum">15.2.4</span> Configuring Model Data</a></li>
<li><a href="jsf-custom002.htm#GLPEL"><span class="secnum">15.2.5</span> Summary of the Image Map Application Classes</a></li>
</ul>
</li>
<li><a href="jsf-custom003.htm#BNAVT"><span class="secnum">15.3</span> Steps for Creating a Custom Component</a></li>
<li><a href="jsf-custom004.htm#BNAVU"><span class="secnum">15.4</span> Creating Custom Component Classes</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom004.htm#BNAVV"><span class="secnum">15.4.1</span> Specifying the Component Family</a></li>
<li><a href="jsf-custom004.htm#BNAVW"><span class="secnum">15.4.2</span> Performing Encoding</a></li>
<li><a href="jsf-custom004.htm#BNAVX"><span class="secnum">15.4.3</span> Performing Decoding</a></li>
<li><a href="jsf-custom004.htm#BNAVY"><span class="secnum">15.4.4</span> Enabling Component Properties to Accept Expressions</a></li>
<li><a href="jsf-custom004.htm#BNAVZ"><span class="secnum">15.4.5</span> Saving and Restoring State</a></li>
</ul>
</li>
<li><a href="jsf-custom005.htm#BNAWA"><span class="secnum">15.5</span> Delegating Rendering to a Renderer</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom005.htm#BNAWB"><span class="secnum">15.5.1</span> Creating the Renderer Class</a></li>
<li><a href="jsf-custom005.htm#BNAWC"><span class="secnum">15.5.2</span> Identifying the Renderer Type</a></li>
</ul>
</li>
<li><a href="jsf-custom006.htm#BNAUT"><span class="secnum">15.6</span> Implementing an Event Listener</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom006.htm#BNAUU"><span class="secnum">15.6.1</span> Implementing Value-Change Listeners</a></li>
<li><a href="jsf-custom006.htm#BNAUV"><span class="secnum">15.6.2</span> Implementing Action Listeners</a></li>
</ul>
</li>
<li><a href="jsf-custom007.htm#BNAWD"><span class="secnum">15.7</span> Handling Events for Custom Components</a></li>
<li><a href="jsf-custom008.htm#BNAWN"><span class="secnum">15.8</span> Defining the Custom Component Tag in a Tag Library Descriptor</a></li>
<li><a href="jsf-custom009.htm#BNATT"><span class="secnum">15.9</span> Using a Custom Component</a></li>
<li><a href="jsf-custom010.htm#BNAUS"><span class="secnum">15.10</span> Creating and Using a Custom Converter</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom010.htm#GLPHB"><span class="secnum">15.10.1</span> Creating a Custom Converter</a></li>
<li><a href="jsf-custom010.htm#BNATU"><span class="secnum">15.10.2</span> Using a Custom Converter</a></li>
</ul>
</li>
<li><div id="backgroundColor"><a href="jsf-custom011.htm#BNAUW"><span class="secnum">15.11</span> Creating and Using a Custom Validator</a><ul style="list-style-type:none">
<li><a href="jsf-custom011.htm#BNAUX"><span class="secnum">15.11.1</span> Implementing the Validator Interface</a></li>
<li><a href="jsf-custom011.htm#BNAUY"><span class="secnum">15.11.2</span> Specifying a Custom Tag</a></li>
<li><a href="jsf-custom011.htm#BNATV"><span class="secnum">15.11.3</span> Using a Custom Validator</a></li>
</ul>
</div></li>
<li><a href="jsf-custom012.htm#BNATG"><span class="secnum">15.12</span> Binding Component Values and Instances to Managed Bean Properties</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom012.htm#BNATI"><span class="secnum">15.12.1</span> Binding a Component Value to a Property</a></li>
<li><a href="jsf-custom012.htm#BNATJ"><span class="secnum">15.12.2</span> Binding a Component Value to an Implicit Object</a></li>
<li><a href="jsf-custom012.htm#BNATL"><span class="secnum">15.12.3</span> Binding a Component Instance to a Bean Property</a></li>
</ul>
</li>
<li><a href="jsf-custom013.htm#BNATM"><span class="secnum">15.13</span> Binding Converters, Listeners, and Validators to Managed Bean Properties</a></li>
</ul>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jsf-custom010.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jsf-custom012.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BNAUW" name="BNAUW"></a><a id="JEETT00389" name="JEETT00389"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">15.11</span> <a id="sthref979" name="sthref979"></a>Creating and Using a Custom Validator</h1>
<p>If the standard validators or Bean Validation don't perform the validation checking you need, you can create a custom validator to validate user input. As explained in <a href="jsf-intro004.htm#BNAQK">Validation Model</a>, there are two ways to implement validation code.</p>
<ul>
<li>
<p>Implement a managed bean method that performs the validation.</p>
</li>
<li>
<p><a id="sthref980" name="sthref980"></a>Provide an implementation of the <code>javax.faces.validator.Validator</code> interface to perform the validation.</p>
</li>
</ul>
<p><a href="jsf-develop003.htm#BNAVE">Writing a Method to Perform Validation</a> explains how to implement a managed bean method to perform validation. The rest of this section explains how to implement the <code>Validator</code> interface.</p>
<p>If you choose to implement the <code>Validator</code> interface and you want to allow the page author to configure the validator's attributes from the page, you also must specify a custom tag for registering the validator on a component.</p>
<p><a id="sthref981" name="sthref981"></a><a id="sthref982" name="sthref982"></a>If you prefer to configure the attributes in the <code>Validator</code> implementation, you can forgo specifying a custom tag and instead let the page author register the validator on a component using the <code>f:validator</code> tag, as described in <a href="#BNATV">Using a Custom Validator</a>.</p>
<p>You can also create a managed bean property that accepts and returns the <code>Validator</code> implementation you create, as described in <a href="jsf-develop002.htm#BNAUL">Writing Properties Bound to Converters, Listeners, or Validators</a>. You can use the <code>f:validator</code> tag's binding attribute to bind the <code>Validator</code> implementation to the managed bean property.</p>
<p>Usually, you will want to display an error message when data fails validation. You need to store these error messages in a resource bundle.</p>
<p><a id="sthref983" name="sthref983"></a>After creating the resource bundle, you have two ways to make the messages available to the application. You can queue the error messages onto the <code>FacesContext</code> programmatically, or you can register the error messages in the application configuration resource file, as explained in <a href="jsf-configure005.htm#BNAXB">Registering Application Messages</a>.</p>
<p>For example, an e-commerce application might use a general-purpose custom validator called <code>FormatValidator.java</code> to validate input data against a format pattern that is specified in the custom validator tag. This validator would be used with a Credit Card Number field on a Facelets page. Here is the custom validator tag:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;mystore:formatValidator
 formatPatterns="9999999999999999|9999 9999 9999 9999|9999-9999-9999-9999"/&gt;
</pre>
<p>According to this validator, the data entered in the field must be one of the following:</p>
<ul>
<li>
<p>A 16-digit number with no spaces</p>
</li>
<li>
<p>A 16-digit number with a space between every four digits</p>
</li>
<li>
<p>A 16-digit number with hyphens between every four digits</p>
</li>
</ul>
<p>The <code>f:validateRegex</code> tag makes a custom validator unnecessary in this situation. However, the rest of this section describes how this validator would be implemented and how to specify a custom tag so that the page author could register the validator on a component.</p>
<a id="BNAUX" name="BNAUX"></a><a id="JEETT01001" name="JEETT01001"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">15.11.1</span> <a id="sthref984" name="sthref984"></a>Implementing the Validator Interface</h2>
<p><a id="sthref985" name="sthref985"></a><a id="sthref986" name="sthref986"></a><a id="sthref987" name="sthref987"></a>A <code>Validator</code> implementation must contain a constructor, a set of accessor methods for any attributes on the tag, and a <code>validate</code> method, which overrides the <code>validate</code> method of the <code>Validator</code> interface.</p>
<p>The hypothetical <code>FormatValidator</code> class also defines accessor methods for setting the <code>formatPatterns</code> attribute, which specifies the acceptable format patterns for input into the fields. The setter method calls the <code>parseFormatPatterns</code> method, which separates the components of the pattern string into a string array, <code>formatPatternsList</code>.</p>
<pre xml:space="preserve" class="oac_no_warn">
public String getFormatPatterns() {
    return (this.formatPatterns);
}
public void setFormatPatterns(String formatPatterns) {
    this.formatPatterns = formatPatterns;
    parseFormatPatterns();
}
</pre>
<p>In addition to defining accessor methods for the attributes, the class overrides the <code>validate</code> method of the <code>Validator</code> interface. This method validates the input and also accesses the custom error messages to be displayed when the <code>String</code> is invalid.</p>
<p><a id="sthref988" name="sthref988"></a>The <code>validate</code> method performs the actual validation of the data. It takes the <code>FacesContext</code> instance, the component whose data needs to be validated, and the value that needs to be validated. A validator can validate only data of a component that implements <code>javax.faces.component.EditableValueHolder</code>.</p>
<p>Here is an implementation of the <code>validate</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
@FacesValidator
public class FormatValidator implements Validator, StateHolder {
    ...
    public void validate(FacesContext context, UIComponent component, 
                         Object toValidate) {

        boolean valid = false;
        String value = null;
        if ((context == null) || (component == null)) {
            throw new NullPointerException();
        }
        if (!(component instanceof UIInput)) {
            return;
        }
        if ( null == formatPatternsList || null == toValidate) {
            return;
        }
        value = toValidate.toString();
        // validate the value against the list of valid patterns.
        Iterator patternIt = formatPatternsList.iterator();
        while (patternIt.hasNext()) {
            valid = isFormatValid(
                ((String)patternIt.next()), value);
            if (valid) {
                break;
            }
        }
        if ( !valid ) {
            FacesMessage errMsg =
                new FacesMessage(FORMAT_INVALID_MESSAGE_ID);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
            throw new ValidatorException(errMsg);
        }
    }
}
</pre>
<p>The <code>@FacesValidator</code> annotation registers the <code>FormatValidator</code> class as a validator with the JavaServer Faces implementation. The <code>validate</code> method gets the local value of the component and converts it to a <code>String</code>. It then iterates over the <code>formatPatternsList</code> list, which is the list of acceptable patterns that was parsed from the <code>formatPatterns</code> attribute of the custom validator tag.</p>
<p><a id="sthref989" name="sthref989"></a>While iterating over the list, this method checks the pattern of the component's local value against the patterns in the list. If the pattern of the local value does not match any pattern in the list, this method generates an error message. It then creates a <code>javax.faces.application.FacesMessage</code> and queues it on the <code>FacesContext</code> for display, using a <code>String</code> that represents the key in the <code>Properties</code> file:</p>
<pre xml:space="preserve" class="oac_no_warn">
public static final String FORMAT_INVALID_MESSAGE_ID =
     "FormatInvalid";
}
</pre>
<p>Finally, the method passes the message to the constructor of <code>javax.faces.validator.ValidatorException</code>.</p>
<p>When the error message is displayed, the format pattern will be substituted for the <code>{0}</code> in the error message, which, in English, is as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
Input must match one of the following patterns: {0}
</pre>
<p>You may wish to save and restore state for your validator, although state saving is not usually necessary. To do so, you will need to implement the <code>StateHolder</code> interface as well as the <code>Validator</code> interface. To implement <code>StateHolder</code>, you would need to implement its four methods: <code>saveState(FacesContext)</code>, <code>restoreState(FacesContext, Object)</code>, <code>isTransient</code>, and <code>setTransient(boolean)</code>. See <a href="jsf-custom004.htm#BNAVZ">Saving and Restoring State</a> for more information.</p>
</div>
<!-- class="sect2" -->
<a id="BNAUY" name="BNAUY"></a><a id="JEETT01002" name="JEETT01002"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">15.11.2</span> <a id="sthref990" name="sthref990"></a><a id="sthref991" name="sthref991"></a>Specifying a Custom Tag</h2>
<p><a id="sthref992" name="sthref992"></a>If you implemented a <code>Validator</code> interface rather than implementing a managed bean method that performs the validation, you need to do one of the following.</p>
<ul>
<li>
<p><a id="sthref993" name="sthref993"></a><a id="sthref994" name="sthref994"></a><a id="sthref995" name="sthref995"></a><a id="sthref996" name="sthref996"></a>Allow the page author to specify the <code>Validator</code> implementation to use with the <code>f:validator</code> tag. In this case, the <code>Validator</code> implementation must define its own properties. <a href="#BNATV">Using a Custom Validator</a> explains how to use the <code>f:validator</code> tag.</p>
</li>
<li>
<p>Specify a custom tag that provides attributes for configuring the properties of the validator from the page.</p>
</li>
</ul>
<p>To create a custom tag, you need to add the tag to the tag library descriptor for the application, <code>bookstore.taglib.xml</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;tag&gt;
    &lt;tag-name&gt;validator&lt;/tag-name&gt;
    &lt;validator&gt;
        &lt;validator-id&gt;formatValidator&lt;/validator-id&gt;
        &lt;validator-class&gt;
            dukesbookstore.validators.FormatValidator
        &lt;/validator-class&gt;
    &lt;/validator&gt;
&lt;/tag&gt;
</pre>
<p>The <code>tag-name</code> element defines the name of the tag as it must be used in a Facelets page. The <code>validator-id</code> element identifies the custom validator. The <code>validator-class</code> element wires the custom tag to its implementation class.</p>
<p><a href="#BNATV">Using a Custom Validator</a> explains how to use the custom validator tag on the page.</p>
</div>
<!-- class="sect2" -->
<a id="BNATV" name="BNATV"></a><a id="JEETT01003" name="JEETT01003"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">15.11.3</span> <a id="sthref997" name="sthref997"></a><a id="sthref998" name="sthref998"></a>Using a Custom Validator</h2>
<p>To register a custom validator on a component, you must do one of the following.</p>
<ul>
<li>
<p>Nest the validator's custom tag inside the tag of the component whose value you want to be validated.</p>
</li>
<li>
<p>Nest the standard <code>f:validator</code> tag within the tag of the component and reference the custom <code>Validator</code> implementation from the <code>f:validator</code> tag.</p>
</li>
</ul>
<p>Here is a hypothetical custom <code>formatValidator</code> tag for the Credit Card Number field, nested within the <code>h:inputText</code> tag:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;h:inputText id="ccno" size="19"
  ...
  required="true"&gt;
  &lt;mystore:formatValidator
  formatPatterns="9999999999999999|9999 9999 9999 9999|9999-9999-9999-9999"/&gt;
&lt;/h:inputText&gt;
&lt;h:message styleClass="validationMessage" for="ccno"/&gt;
</pre>
<p>This tag validates the input of the <code>ccno</code> field against the patterns defined by the page author in the <code>formatPatterns</code> attribute.</p>
<p>You can use the same custom validator for any similar component by simply nesting the custom validator tag within the component tag.</p>
<p><a id="sthref999" name="sthref999"></a>If the application developer who created the custom validator prefers to configure the attributes in the <code>Validator</code> implementation rather than allow the page author to configure the attributes from the page, the developer will not create a custom tag for use with the validator.</p>
<p>In this case, the page author must nest the <code>f:validator</code> tag inside the tag of the component whose data needs to be validated. Then the page author needs to do one of the following.</p>
<ul>
<li>
<p>Set the <code>f:validator</code> tag's <code>validatorId</code> attribute to the ID of the validator that is defined in the application configuration resource file.</p>
</li>
<li>
<p>Bind the custom <code>Validator</code> implementation to a managed bean property using the <code>f:validator</code> tag's <code>binding</code> attribute, as described in <a href="jsf-custom013.htm#BNATM">Binding Converters, Listeners, and Validators to Managed Bean Properties</a>.</p>
</li>
</ul>
<p>The following tag registers a hypothetical validator on a component using an <code>f:validator</code> tag and references the ID of the validator:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;h:inputText id="name" value="#{CustomerBean.name}"
            size="10" ...&gt;
    &lt;f:validator validatorId="customValidator" /&gt;
    ...
&lt;/h:inputText&gt;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jsf-custom010.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jsf-custom012.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

