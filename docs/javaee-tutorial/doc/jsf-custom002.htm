<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:1Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Understanding the Image Map Example" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Understanding the Image Map Example | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<ul style="list-style-type:none">
<li><a href="jsf-custom001.htm#BNAVH"><span class="secnum">15.1</span> Determining Whether You Need a Custom Component or Renderer</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom001.htm#BNAVI"><span class="secnum">15.1.1</span> When to Use a Custom Component</a></li>
<li><a href="jsf-custom001.htm#BNAVJ"><span class="secnum">15.1.2</span> When to Use a Custom Renderer</a></li>
<li><a href="jsf-custom001.htm#BNAVK"><span class="secnum">15.1.3</span> Component, Renderer, and Tag Combinations</a></li>
</ul>
</li>
<li><div id="backgroundColor"><a href="jsf-custom002.htm#GLPCB"><span class="secnum">15.2</span> Understanding the Image Map Example</a><ul style="list-style-type:none">
<li><a href="jsf-custom002.htm#GLPBD"><span class="secnum">15.2.1</span> Why Use JavaServer Faces Technology to Implement an Image Map?</a></li>
<li><a href="jsf-custom002.htm#GLPEM"><span class="secnum">15.2.2</span> Understanding the Rendered HTML</a></li>
<li><a href="jsf-custom002.htm#GLPCD"><span class="secnum">15.2.3</span> Understanding the Facelets Page</a></li>
<li><a href="jsf-custom002.htm#GLPBO"><span class="secnum">15.2.4</span> Configuring Model Data</a></li>
<li><a href="jsf-custom002.htm#GLPEL"><span class="secnum">15.2.5</span> Summary of the Image Map Application Classes</a></li>
</ul>
</div></li>
<li><a href="jsf-custom003.htm#BNAVT"><span class="secnum">15.3</span> Steps for Creating a Custom Component</a></li>
<li><a href="jsf-custom004.htm#BNAVU"><span class="secnum">15.4</span> Creating Custom Component Classes</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom004.htm#BNAVV"><span class="secnum">15.4.1</span> Specifying the Component Family</a></li>
<li><a href="jsf-custom004.htm#BNAVW"><span class="secnum">15.4.2</span> Performing Encoding</a></li>
<li><a href="jsf-custom004.htm#BNAVX"><span class="secnum">15.4.3</span> Performing Decoding</a></li>
<li><a href="jsf-custom004.htm#BNAVY"><span class="secnum">15.4.4</span> Enabling Component Properties to Accept Expressions</a></li>
<li><a href="jsf-custom004.htm#BNAVZ"><span class="secnum">15.4.5</span> Saving and Restoring State</a></li>
</ul>
</li>
<li><a href="jsf-custom005.htm#BNAWA"><span class="secnum">15.5</span> Delegating Rendering to a Renderer</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom005.htm#BNAWB"><span class="secnum">15.5.1</span> Creating the Renderer Class</a></li>
<li><a href="jsf-custom005.htm#BNAWC"><span class="secnum">15.5.2</span> Identifying the Renderer Type</a></li>
</ul>
</li>
<li><a href="jsf-custom006.htm#BNAUT"><span class="secnum">15.6</span> Implementing an Event Listener</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom006.htm#BNAUU"><span class="secnum">15.6.1</span> Implementing Value-Change Listeners</a></li>
<li><a href="jsf-custom006.htm#BNAUV"><span class="secnum">15.6.2</span> Implementing Action Listeners</a></li>
</ul>
</li>
<li><a href="jsf-custom007.htm#BNAWD"><span class="secnum">15.7</span> Handling Events for Custom Components</a></li>
<li><a href="jsf-custom008.htm#BNAWN"><span class="secnum">15.8</span> Defining the Custom Component Tag in a Tag Library Descriptor</a></li>
<li><a href="jsf-custom009.htm#BNATT"><span class="secnum">15.9</span> Using a Custom Component</a></li>
<li><a href="jsf-custom010.htm#BNAUS"><span class="secnum">15.10</span> Creating and Using a Custom Converter</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom010.htm#GLPHB"><span class="secnum">15.10.1</span> Creating a Custom Converter</a></li>
<li><a href="jsf-custom010.htm#BNATU"><span class="secnum">15.10.2</span> Using a Custom Converter</a></li>
</ul>
</li>
<li><a href="jsf-custom011.htm#BNAUW"><span class="secnum">15.11</span> Creating and Using a Custom Validator</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom011.htm#BNAUX"><span class="secnum">15.11.1</span> Implementing the Validator Interface</a></li>
<li><a href="jsf-custom011.htm#BNAUY"><span class="secnum">15.11.2</span> Specifying a Custom Tag</a></li>
<li><a href="jsf-custom011.htm#BNATV"><span class="secnum">15.11.3</span> Using a Custom Validator</a></li>
</ul>
</li>
<li><a href="jsf-custom012.htm#BNATG"><span class="secnum">15.12</span> Binding Component Values and Instances to Managed Bean Properties</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom012.htm#BNATI"><span class="secnum">15.12.1</span> Binding a Component Value to a Property</a></li>
<li><a href="jsf-custom012.htm#BNATJ"><span class="secnum">15.12.2</span> Binding a Component Value to an Implicit Object</a></li>
<li><a href="jsf-custom012.htm#BNATL"><span class="secnum">15.12.3</span> Binding a Component Instance to a Bean Property</a></li>
</ul>
</li>
<li><a href="jsf-custom013.htm#BNATM"><span class="secnum">15.13</span> Binding Converters, Listeners, and Validators to Managed Bean Properties</a></li>
</ul>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jsf-custom001.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jsf-custom003.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="GLPCB" name="GLPCB"></a><a id="JEETT00379" name="JEETT00379"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">15.2</span> Understanding the Image Map Example</h1>
<p>Duke's Bookstore includes a custom image map component on the <code>index.xhtml</code> page. This image map displays a selection of six book titles. When the user clicks one of the book titles in the image map, the application goes to a page that displays the title of the selected book as well as information about a featured book. The page allows the user to add either book (or none) to the shopping cart.</p>
<a id="GLPBD" name="GLPBD"></a><a id="JEETT00981" name="JEETT00981"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">15.2.1</span> Why Use JavaServer Faces Technology to Implement an Image Map?</h2>
<p>JavaServer Faces technology is an ideal framework to use for implementing this kind of image map because it can perform the work that must be done on the server without requiring you to create a server-side image map.</p>
<p>In general, client-side image maps are preferred over server-side image maps for several reasons. One reason is that the client-side image map allows the browser to provide immediate feedback when a user positions the mouse over a hotspot. Another reason is that client-side image maps perform better because they don't require round-trips to the server. However, in some situations, your image map might need to access the server to retrieve data or to change the appearance of nonform controls, tasks that a client-side image map cannot do.</p>
<p>Because the image map custom component uses JavaServer Faces technology, it has the best of both styles of image maps: It can handle the parts of the application that need to be performed on the server while allowing the other parts of the application to be performed on the client side.</p>
</div>
<!-- class="sect2" -->
<a id="GLPEM" name="GLPEM"></a><a id="JEETT00982" name="JEETT00982"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">15.2.2</span> Understanding the Rendered HTML</h2>
<p>Here is an abbreviated version of the form part of the HTML page that the application needs to render:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;form id="j_idt13" name="j_idt13" method="post"
        action="/dukesbookstore/index.xhtml" ...&gt;
    ...
    &lt;img id="j_idt13:mapImage"
         src="/dukesbookstore/javax.faces.resource/book_all.jpg?ln=images"
         alt="Choose a Book from our Catalog"
         usemap="#bookMap" /&gt;
    ...
    &lt;map name="bookMap"&gt;
       &lt;area alt="Duke"                        
          coords="67,23,212,268"
          shape="rect"
          onmouseout="document.forms[0]['j_idt13:mapImage'].src='resources/images/book_all.jpg'"
          onmouseover="document.forms[0]['j_idt13:mapImage'].src='resources/images/book_201.jpg'"
          onclick="document.forms[0]['bookMap_current'].value='Duke'; document.forms[0].submit()"
       /&gt;
    ...
       &lt;input type="hidden" name="bookMap_current"&gt;
    &lt;/map&gt;
    ...
&lt;/form&gt;
</pre>
<p>The <code>img</code> tag associates an image (<code>book_all.jpg</code>) with the image map referenced in the <code>usemap</code> attribute value.</p>
<p>The <code>map</code> tag specifies the image map and contains a set of <code>area</code> tags.</p>
<p>Each <code>area</code> tag specifies a region of the image map. The <code>onmouseover</code>, <code>onmouseout</code>, and <code>onclick</code> attributes define which JavaScript code is executed when these events occur. When the user moves the mouse over a region, the <code>onmouseover</code> function associated with the region displays the map with that region highlighted. When the user moves the mouse out of a region, the <code>onmouseout</code> function redisplays the original image. If the user clicks on a region, the <code>onclick</code> function sets the value of the <code>input</code> tag to the ID of the selected area and submits the page.</p>
<p>The <code>input</code> tag represents a hidden control that stores the value of the currently selected area between client-server exchanges so that the server-side component classes can retrieve the value.</p>
<p>The server-side objects retrieve the value of <code>bookMap_current</code> and set the locale in the <code>javax.faces.context.FacesContext</code> instance according to the region that was selected.</p>
</div>
<!-- class="sect2" -->
<a id="GLPCD" name="GLPCD"></a><a id="JEETT00983" name="JEETT00983"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">15.2.3</span> Understanding the Facelets Page</h2>
<p>Here is an abbreviated form of the Facelets page that the image map component uses to generate the HTML page shown in the preceding section. It uses custom <code>bookstore:map</code> and <code>bookstore:area</code> tags to represent the custom components:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;h:form&gt;
    ...
        &lt;h:graphicImage id="mapImage" 
                        name="book_all.jpg"
                        library="images"
                        alt="#{bundle.ChooseBook}"
                        usemap="#bookMap" /&gt;
        &lt;bookstore:map id="bookMap" 
                       current="map1"
                       immediate="true"
                       action="bookstore"&gt;
            &lt;f:actionListener
                type="dukesbookstore.listeners.MapBookChangeListener" /&gt;
            &lt;bookstore:area id="map1" value="#{Book201}"
                            onmouseover="resources/images/book_201.jpg"
                            onmouseout="resources/images/book_all.jpg"
                            targetImage="mapImage" /&gt;
            &lt;bookstore:area id="map2" value="#{Book202}" 
                            onmouseover="resources/images/book_202.jpg"
                            onmouseout="resources/images/book_all.jpg" 
                            targetImage="mapImage"/&gt;
            ...
        &lt;/bookstore:map&gt;
    ...
&lt;/h:form&gt;
</pre>
<p><a id="sthref879" name="sthref879"></a><a id="sthref880" name="sthref880"></a>The <code>alt</code> attribute of the <code>h:graphicImage</code> tag maps to the localized string <code>"Choose a Book from our Catalog"</code>.</p>
<p><a id="sthref881" name="sthref881"></a><a id="sthref882" name="sthref882"></a>The <code>f:actionListener</code> tag within the <code>bookstore:map</code> tag points to a listener class for an action event. The <code>processAction</code> method of the listener places the book ID for the selected map area into the session map. The way this event is handled is explained more in <a href="jsf-custom007.htm#BNAWD">Handling Events for Custom Components</a>.</p>
<p><a id="sthref883" name="sthref883"></a><a id="sthref884" name="sthref884"></a>The <code>action</code> attribute of the <code>bookstore:map</code> tag specifies a logical outcome <code>String</code>, <code>"bookstore"</code>, which by implicit navigation rules sends the application to the page <code>bookstore.xhtml</code>. For more information on navigation, see <a href="jsf-configure009.htm#BNAXF">Configuring Navigation Rules</a>.</p>
<p><a id="sthref885" name="sthref885"></a><a id="sthref886" name="sthref886"></a>The <code>immediate</code> attribute of the <code>bookstore:map</code> tag is set to <code>true</code>, which indicates that the default <code>javax.faces.event.ActionListener</code> implementation should execute during the Apply Request Values phase of the request-processing lifecycle, instead of waiting for the Invoke Application phase. Because the request resulting from clicking the map does not require any validation, data conversion, or server-side object updates, it makes sense to skip directly to the Invoke Application phase.</p>
<p>The <code>current</code> attribute of the <code>bookstore:map</code> tag is set to the default area, which is <code>map1</code> (the book <span class="italic">My Early Years: Growing Up on Star7</span>, by Duke).</p>
<p>Notice that the <code>bookstore:area</code> tags do not contain any of the JavaScript, coordinate, or shape data that is displayed on the HTML page. The JavaScript is generated by the <code>dukesbookstore.renderers.AreaRenderer</code> class. The <code>onmouseover</code> and <code>onmouseout</code> attribute values indicate the image to be loaded when these events occur. How the JavaScript is generated is explained more in <a href="jsf-custom004.htm#BNAVW">Performing Encoding</a>.</p>
<p>The coordinate, shape, and alternate text data are obtained through the <code>value</code> attribute, whose value refers to an attribute in application scope. The value of this attribute is a bean, which stores the <code>coords</code>, <code>shape</code>, and <code>alt</code> data. How these beans are stored in the application scope is explained more in the next section.</p>
</div>
<!-- class="sect2" -->
<a id="GLPBO" name="GLPBO"></a><a id="JEETT00984" name="JEETT00984"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">15.2.4</span> Configuring Model Data</h2>
<p><a id="sthref887" name="sthref887"></a><a id="sthref888" name="sthref888"></a>In a JavaServer Faces application, data such as the coordinates of a hotspot of an image map is retrieved from the <code>value</code> attribute through a bean. However, the shape and coordinates of a hotspot should be defined together because the coordinates are interpreted differently depending on what shape the hotspot is. Because a component's value can be bound only to one property, the <code>value</code> attribute cannot refer to both the shape and the coordinates.</p>
<p><a id="sthref889" name="sthref889"></a><a id="sthref890" name="sthref890"></a>To solve this problem, the application encapsulates all of this information in a set of <code>ImageArea</code> objects. These objects are initialized into application scope by the managed bean creation facility (see <a href="jsf-configure004.htm#BNAWR">Section 16.4.1, "Using the managed-bean Element"</a>). Here is part of the managed bean declaration for the <code>ImageArea</code> bean corresponding to the South America hotspot:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;managed-bean eager="true"&gt;
    ...
    &lt;managed-bean-name&gt;Book201&lt;/managed-bean-name&gt;
    &lt;managed-bean-class&gt;
        javaeetutorial.dukesbookstore.model.ImageArea
    &lt;/managed-bean-class&gt;
    &lt;managed-bean-scope&gt;application&lt;/managed-bean-scope&gt;
    &lt;managed-property&gt;
        ...
        &lt;property-name&gt;shape&lt;/property-name&gt;
        &lt;value&gt;rect&lt;/value&gt;
    &lt;/managed-property&gt;
    &lt;managed-property&gt;
        ...
        &lt;property-name&gt;alt&lt;/property-name&gt;
        &lt;value&gt;Duke&lt;/value&gt;
    &lt;/managed-property&gt;
    &lt;managed-property&gt;
        ...
        &lt;property-name&gt;coords&lt;/property-name&gt;
        &lt;value&gt;67,23,212,268&lt;/value&gt;
    &lt;/managed-property&gt;
&lt;/managed-bean&gt;
</pre>
<p>For more information on initializing managed beans with the managed bean creation facility, see the section <a href="jsf-configure002.htm#BNAWP">Application Configuration Resource File</a>.</p>
<p>The <code>value</code> attributes of the <code>bookstore:area</code> tags refer to the beans in the application scope, as shown in this <code>bookstore:area</code> tag from <code>index.xhtml</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;bookstore:area id="map1" <span class="bold">value</span>="#{Book201}"
                onmouseover="resources/images/book_201.jpg"
                onmouseout="resources/images/book_all.jpg"
                targetImage="mapImage" /&gt;
</pre>
<p>To reference the <code>ImageArea</code> model object bean values from the component class, you implement a <code>getValue</code> method in the component class. This method calls <code>super.getValue</code>. The superclass of <span class="variable">tut-install</span><code>/examples/case-studies/dukes-bookstore/src/java/dukesbookstore/components/AreaComponent.java</code>, <code>UIOutput</code>, has a <code>getValue</code> method that does the work of finding the <code>ImageArea</code> object associated with <code>AreaComponent</code>. The <code>AreaRenderer</code> class, which needs to render the <code>alt</code>, <code>shape</code>, and <code>coords</code> values from the <code>ImageArea</code> object, calls the <code>getValue</code> method of <code>AreaComponent</code> to retrieve the <code>ImageArea</code> object.</p>
<pre xml:space="preserve" class="oac_no_warn">
ImageArea iarea = (ImageArea) area.getValue();
</pre>
<p><code>ImageArea</code> is a simple bean, so you can access the shape, coordinates, and alternative text values by calling the appropriate accessor methods of <code>ImageArea</code>. <a href="jsf-custom005.htm#BNAWB">Creating the Renderer Class</a> explains how to do this in the <code>AreaRenderer</code> class.</p>
</div>
<!-- class="sect2" -->
<a id="GLPEL" name="GLPEL"></a><a id="JEETT00985" name="JEETT00985"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">15.2.5</span> Summary of the Image Map Application Classes</h2>
<p><a href="#GLPEK">Table 15-2</a> summarizes all the classes needed to implement the image map component.</p>
<div class="tblhruleformal"><a id="sthref891" name="sthref891"></a><a id="GLPEK" name="GLPEK"></a>
<p class="titleintable">Table 15-2 Image Map Classes</p>
<table class="HRuleFormal" title="Image Map Classes" summary="This table lists and describes the classes needed for an image map implementation." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="26%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t3">Class</th>
<th align="left" valign="bottom" id="r1c2-t3">Function</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t3" headers="r1c1-t3">
<p><code>AreaSelectedEvent</code></p>
</td>
<td align="left" headers="r2c1-t3 r1c2-t3">
<p>The <code>javax.faces.event.ActionEvent</code> indicating that an <code>AreaComponent</code> from the <code>MapComponent</code> has been selected.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t3" headers="r1c1-t3">
<p><code>AreaComponent</code></p>
</td>
<td align="left" headers="r3c1-t3 r1c2-t3">
<p>The class that defines <code>AreaComponent</code>, which corresponds to the <code>bookstore:area</code> custom tag.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t3" headers="r1c1-t3">
<p><code>MapComponent</code></p>
</td>
<td align="left" headers="r4c1-t3 r1c2-t3">
<p>The class that defines <code>MapComponent</code>, which corresponds to the <code>bookstore:map</code> custom tag.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t3" headers="r1c1-t3">
<p><code>AreaRenderer</code></p>
</td>
<td align="left" headers="r5c1-t3 r1c2-t3">
<p>This <code>javax.faces.render.Renderer</code> performs the delegated rendering for <code>AreaComponent</code>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t3" headers="r1c1-t3">
<p><code>ImageArea</code></p>
</td>
<td align="left" headers="r6c1-t3 r1c2-t3">
<p>The bean that stores the shape and coordinates of the hotspots.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r7c1-t3" headers="r1c1-t3">
<p><code>MapBookChangeListener</code></p>
</td>
<td align="left" headers="r7c1-t3 r1c2-t3">
<p>The action listener for the <code>MapComponent</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>The Duke's Bookstore source directory, called <span class="variable">bookstore-dir</span>, is <span class="variable">tut-install</span><code>/examples/case-studies/dukes-bookstore/src/java/dukesbookstore/</code>. The event and listener classes are located in <span class="variable">bookstore-dir</span><code>/listeners/</code>. The component classes are located in <span class="variable">bookstore-dir</span><code>/components/</code>. The renderer classes are located in <span class="variable">bookstore-dir</span><code>/renderers/</code>. <code>ImageArea</code> is located in <span class="variable">bookstore-dir</span><code>/model/</code>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jsf-custom001.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jsf-custom003.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

