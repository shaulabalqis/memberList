<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:3Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Using the Criteria API and Metamodel API to Create Basic Typesafe Queries" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Using the Criteria API and Metamodel API to Create Basic Typesafe Queries | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<ul style="list-style-type:none">
<li><a href="persistence-criteria001.htm#GJRIJ"><span class="secnum">40.1</span> Overview of the Criteria and Metamodel APIs</a></li>
<li><a href="persistence-criteria002.htm#GJIUP"><span class="secnum">40.2</span> Using the Metamodel API to Model Entity Classes</a>
<ul style="list-style-type:none">
<li><a href="persistence-criteria002.htm#GJIVL"><span class="secnum">40.2.1</span> Using Metamodel Classes</a></li>
</ul>
</li>
<li><div id="backgroundColor"><a href="persistence-criteria003.htm#GJIVM"><span class="secnum">40.3</span> Using the Criteria API and Metamodel API to Create Basic Typesafe Queries</a><ul style="list-style-type:none">
<li><a href="persistence-criteria003.htm#GJIVS"><span class="secnum">40.3.1</span> Creating a Criteria Query</a></li>
<li><a href="persistence-criteria003.htm#GJIVQ"><span class="secnum">40.3.2</span> Query Roots</a></li>
<li><a href="persistence-criteria003.htm#GJIUV"><span class="secnum">40.3.3</span> Querying Relationships Using Joins</a></li>
<li><a href="persistence-criteria003.htm#GJIVE"><span class="secnum">40.3.4</span> Path Navigation in Criteria Queries</a></li>
<li><a href="persistence-criteria003.htm#GJIVI"><span class="secnum">40.3.5</span> Restricting Criteria Query Results</a>
<ul style="list-style-type:none">
<li><a href="persistence-criteria003.htm#GJIWN"><span class="secnum">40.3.5.1</span> The Expression Interface Methods</a></li>
<li><a href="persistence-criteria003.htm#GJIXA"><span class="secnum">40.3.5.2</span> Expression Methods in the CriteriaBuilder Interface</a></li>
</ul>
</li>
<li><a href="persistence-criteria003.htm#GJIXE"><span class="secnum">40.3.6</span> Managing Criteria Query Results</a>
<ul style="list-style-type:none">
<li><a href="persistence-criteria003.htm#GJIWO"><span class="secnum">40.3.6.1</span> Ordering Results</a></li>
<li><a href="persistence-criteria003.htm#GJIXG"><span class="secnum">40.3.6.2</span> Grouping Results</a></li>
</ul>
</li>
<li><a href="persistence-criteria003.htm#GJIVY"><span class="secnum">40.3.7</span> Executing Queries</a>
<ul style="list-style-type:none">
<li><a href="persistence-criteria003.htm#GJIUR"><span class="secnum">40.3.7.1</span> Single-Valued Query Results</a></li>
<li><a href="persistence-criteria003.htm#GJIVP"><span class="secnum">40.3.7.2</span> Collection-Valued Query Results</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="persistence-criteria002.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="persistence-string-queries.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="GJIVM" name="GJIVM"></a><a id="JEETT00503" name="JEETT00503"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">40.3</span> Using the Criteria API and Metamodel API to Create Basic Typesafe Queries</h1>
<p>The basic semantics of a Criteria query consists of a <code>SELECT</code> clause, a <code>FROM</code> clause, and an optional <code>WHERE</code> clause, similar to a JPQL query. Criteria queries set these clauses by using Java programming language objects, so the query can be created in a typesafe manner.</p>
<a id="GJIVS" name="GJIVS"></a><a id="JEETT01197" name="JEETT01197"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">40.3.1</span> <a id="sthref2133" name="sthref2133"></a><a id="sthref2134" name="sthref2134"></a>Creating a Criteria Query</h2>
<p>The <code>javax.persistence.criteria.CriteriaBuilder</code> interface is used to construct</p>
<ul>
<li>
<p>Criteria queries</p>
</li>
<li>
<p>Selections</p>
</li>
<li>
<p>Expressions</p>
</li>
<li>
<p>Predicates</p>
</li>
<li>
<p>Ordering</p>
</li>
</ul>
<p>To obtain an instance of the <code>CriteriaBuilder</code> interface, call the <code>getCriteriaBuilder</code> method on either an <code>EntityManager</code> or an <code>EntityManagerFactory</code> instance.</p>
<p>The following code shows how to obtain a <code>CriteriaBuilder</code> instance by using the <code>EntityManager.getCriteriaBuilder</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
EntityManager em = ...;
CriteriaBuilder cb = em.getCriteriaBuilder();
</pre>
<p>Criteria queries are constructed by obtaining an instance of the following interface:</p>
<pre xml:space="preserve" class="oac_no_warn">
<code>javax.persistence.criteria.CriteriaQuery</code>
</pre>
<p><code>CriteriaQuery</code> objects define a particular query that will navigate over one or more entities. Obtain <code>CriteriaQuery</code> instances by calling one of the <code>CriteriaBuilder.createQuery</code> methods. To create typesafe queries, call the <code>CriteriaBuilder.createQuery</code> method as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
</pre>
<p>The <code>CriteriaQuery</code> object's type should be set to the expected result type of the query. In the preceding code, the object's type is set to <code>CriteriaQuery&lt;Pet&gt;</code> for a query that will find instances of the <code>Pet</code> entity.</p>
<p>The following code snippet creates a <code>CriteriaQuery</code> object for a query that returns a <code>String</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;String&gt; cq = cb.createQuery(String.class);
</pre></div>
<!-- class="sect2" -->
<a id="GJIVQ" name="GJIVQ"></a><a id="JEETT01198" name="JEETT01198"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">40.3.2</span> <a id="sthref2135" name="sthref2135"></a>Query Roots</h2>
<p>For a particular <code>CriteriaQuery</code> object, the root entity of the query, from which all navigation originates, is called the <span class="glossaryterm">query root</span>. It is similar to the <code>FROM</code> clause in a JPQL query.</p>
<p>Create the query root by calling the <code>from</code> method on the <code>CriteriaQuery</code> instance. The argument to the <code>from</code> method is either the entity class or an <code>EntityType&lt;T&gt;</code> instance for the entity.</p>
<p>The following code sets the query root to the <code>Pet</code> entity:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
</pre>
<p>The following code sets the query root to the <code>Pet</code> class by using an <code>EntityType&lt;T&gt;</code> instance:</p>
<pre xml:space="preserve" class="oac_no_warn">
EntityManager em = ...;
Metamodel m = em.getMetamodel();
EntityType&lt;Pet&gt; Pet_ = m.entity(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet_);
</pre>
<p>Criteria queries may have more than one query root. This usually occurs when the query navigates from several entities.</p>
<p>The following code has two <code>Root</code> instances:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet1 = cq.from(Pet.class);
Root&lt;Pet&gt; pet2 = cq.from(Pet.class);
</pre></div>
<!-- class="sect2" -->
<a id="GJIUV" name="GJIUV"></a><a id="JEETT01199" name="JEETT01199"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">40.3.3</span> <a id="sthref2136" name="sthref2136"></a>Querying Relationships Using Joins</h2>
<p>For queries that navigate to related entity classes, the query must define a join to the related entity by calling one of the <code>From.join</code> methods on the query root object or another join object. The <code>join</code> methods are similar to the <code>JOIN</code> keyword in JPQL.</p>
<p>The target of the join uses the Metamodel class of type <code>EntityType&lt;T&gt;</code> to specify the persistent field or property of the joined entity.</p>
<p>The <code>join</code> methods return an object of type <code>Join&lt;X, Y&gt;</code>, where <code>X</code> is the source entity and <code>Y</code> is the target of the join. In the following code snippet, <code>Pet</code> is the source entity, <code>Owner</code> is the target, and <code>Pet_</code> is a statically generated metamodel class:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);

Root&lt;Pet&gt; pet = cq.from(Pet.class);
Join&lt;Pet, Owner&gt; owner = pet.join(Pet_.owners);
</pre>
<p>You can chain joins together to navigate to related entities of the target entity without having to create a <code>Join&lt;X, Y&gt;</code> instance for each join:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);

Root&lt;Pet&gt; pet = cq.from(Pet.class);
Join&lt;Owner, Address&gt; address = pet.join(Pet_.owners).join(Owner_.addresses);
</pre></div>
<!-- class="sect2" -->
<a id="GJIVE" name="GJIVE"></a><a id="JEETT01200" name="JEETT01200"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">40.3.4</span> <a id="sthref2137" name="sthref2137"></a><a id="sthref2138" name="sthref2138"></a>Path Navigation in Criteria Queries</h2>
<p><code>Path</code> objects, which are used in the <code>SELECT</code> and <code>WHERE</code> clauses of a Criteria query, can be query root entities, join entities, or other <code>Path</code> objects. Use the <code>Path.get</code> method to navigate to attributes of the entities of a query.</p>
<p>The argument to the <code>get</code> method is the corresponding attribute of the entity's Metamodel class. The attribute can be either a single-valued attribute, specified by <code>@SingularAttribute</code> in the Metamodel class, or a collection-valued attribute, specified by one of <code>@CollectionAttribute</code>, <code>@SetAttribute</code>, <code>@ListAttribute</code>, or <code>@MapAttribute</code>.</p>
<p>The following query returns the names of all the pets in the data store. The <code>get</code> method is called on the query root, <code>pet</code>, with the <code>name</code> attribute of the <code>Pet</code> entity's Metamodel class, <code>Pet_</code>, as the argument:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;String&gt; cq = cb.createQuery(String.class);

Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.select(pet.get(Pet_.name));
</pre></div>
<!-- class="sect2" -->
<a id="GJIVI" name="GJIVI"></a><a id="JEETT01201" name="JEETT01201"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">40.3.5</span> <a id="sthref2139" name="sthref2139"></a><a id="sthref2140" name="sthref2140"></a>Restricting Criteria Query Results</h2>
<p>Conditions that are set by calling the <code>CriteriaQuery.where</code> method can restrict the results of a query on the <code>CriteriaQuery</code> object. Calling the <code>where</code> method is analogous to setting the <code>WHERE</code> clause in a JPQL query.</p>
<p>The <code>where</code> method evaluates instances of the <code>Expression</code> interface to restrict the results according to the conditions of the expressions. To create <code>Expression</code> instances, use methods defined in the <code>Expression</code> and <code>CriteriaBuilder</code> interfaces.</p>
<a id="GJIWN" name="GJIWN"></a><a id="JEETT00747" name="JEETT00747"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">40.3.5.1</span> <a id="sthref2141" name="sthref2141"></a><a id="sthref2142" name="sthref2142"></a>The Expression Interface Methods</h3>
<p>An <code>Expression</code> object is used in a query's <code>SELECT</code>, <code>WHERE</code>, or <code>HAVING</code> clause. <a href="#GJIWW">Table 40-1</a> shows conditional methods you can use with <code>Expression</code> objects.</p>
<div class="tblhruleformal"><a id="sthref2143" name="sthref2143"></a><a id="GJIWW" name="GJIWW"></a>
<p class="titleintable">Table 40-1 Conditional Methods in the Expression Interface</p>
<table class="HRuleFormal" title="Conditional Methods in the Expression Interface" summary="This table lists and describes the conditional methods used with Expression objects." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="20%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t3">Method</th>
<th align="left" valign="bottom" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t3" headers="r1c1-t3">
<p><code>isNull</code></p>
</td>
<td align="left" headers="r2c1-t3 r1c2-t3">
<p>Tests whether an expression is null</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t3" headers="r1c1-t3">
<p><code>isNotNull</code></p>
</td>
<td align="left" headers="r3c1-t3 r1c2-t3">
<p>Tests whether an expression is not null</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t3" headers="r1c1-t3">
<p><code>in</code></p>
</td>
<td align="left" headers="r4c1-t3 r1c2-t3">
<p>Tests whether an expression is within a list of values</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>The following query uses the <code>Expression.isNull</code> method to find all pets where the <code>color</code> attribute is null:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.where(pet.get(Pet_.color).isNull());
</pre>
<p>The following query uses the <code>Expression.in</code> method to find all brown and black pets:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.where(pet.get(Pet_.color).in("brown", "black"));
</pre>
<p>The <code>in</code> method can also check whether an attribute is a member of a collection.</p>
</div>
<!-- class="sect3" -->
<a id="GJIXA" name="GJIXA"></a><a id="JEETT00748" name="JEETT00748"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">40.3.5.2</span> <a id="sthref2144" name="sthref2144"></a><a id="sthref2145" name="sthref2145"></a>Expression Methods in the CriteriaBuilder Interface</h3>
<p>The <code>CriteriaBuilder</code> interface defines additional methods for creating expressions. These methods correspond to the arithmetic, string, date, time, and case operators and functions of JPQL. <a href="#GJIXL">Table 40-2</a> shows conditional methods you can use with <code>CriteriaBuilder</code> objects.</p>
<div class="tblhruleformal"><a id="sthref2146" name="sthref2146"></a><a id="GJIXL" name="GJIXL"></a>
<p class="titleintable">Table 40-2 Conditional Methods in the CriteriaBuilder Interface</p>
<table class="HRuleFormal" title="Conditional Methods in the CriteriaBuilder Interface" summary="This table lists and describes the conditional methods used with CriteriaBuilder objects." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="20%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t4">Conditional Method</th>
<th align="left" valign="bottom" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t4" headers="r1c1-t4">
<p><code>equal</code></p>
</td>
<td align="left" headers="r2c1-t4 r1c2-t4">
<p>Tests whether two expressions are equal</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t4" headers="r1c1-t4">
<p><code>notEqual</code></p>
</td>
<td align="left" headers="r3c1-t4 r1c2-t4">
<p>Tests whether two expressions are not equal</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t4" headers="r1c1-t4">
<p><code>gt</code></p>
</td>
<td align="left" headers="r4c1-t4 r1c2-t4">
<p>Tests whether the first numeric expression is greater than the second numeric expression</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t4" headers="r1c1-t4">
<p><code>ge</code></p>
</td>
<td align="left" headers="r5c1-t4 r1c2-t4">
<p>Tests whether the first numeric expression is greater than or equal to the second numeric expression</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t4" headers="r1c1-t4">
<p><code>lt</code></p>
</td>
<td align="left" headers="r6c1-t4 r1c2-t4">
<p>Tests whether the first numeric expression is less than the second numeric expression</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r7c1-t4" headers="r1c1-t4">
<p><code>le</code></p>
</td>
<td align="left" headers="r7c1-t4 r1c2-t4">
<p>Tests whether the first numeric expression is less than or equal to the second numeric expression</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r8c1-t4" headers="r1c1-t4">
<p><code>between</code></p>
</td>
<td align="left" headers="r8c1-t4 r1c2-t4">
<p>Tests whether the first expression is between the second and third expression in value</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r9c1-t4" headers="r1c1-t4">
<p><code>like</code></p>
</td>
<td align="left" headers="r9c1-t4 r1c2-t4">
<p>Tests whether the expression matches a given pattern</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>The following code uses the <code>CriteriaBuilder.equal</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.where(cb.equal(pet.get(Pet_.name), "Fido"));
</pre>
<p>The following code uses the <code>CriteriaBuilder.gt</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
Date someDate = new Date(...);
cq.where(cb.gt(pet.get(Pet_.birthday), date));
</pre>
<p>The following code uses the <code>CriteriaBuilder.between</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
Date firstDate = new Date(...);
Date secondDate = new Date(...);
cq.where(cb.between(pet.get(Pet_.birthday), firstDate, secondDate));
</pre>
<p>The following code uses the <code>CriteriaBuilder.like</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.where(cb.like(pet.get(Pet_.name), "*do"));
</pre>
<p>To specify multiple conditional predicates, use the compound predicate methods of the <code>CriteriaBuilder</code> interface, as shown in <a href="#GJIWU">Table 40-3</a>.</p>
<div class="tblhruleformal"><a id="sthref2147" name="sthref2147"></a><a id="GJIWU" name="GJIWU"></a>
<p class="titleintable">Table 40-3 Compound Predicate Methods in the CriteriaBuilder Interface</p>
<table class="HRuleFormal" title="Compound Predicate Methods in the CriteriaBuilder Interface" summary="This table lists and describes the compound predicate methods used with CriteriaBuilder objects." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="20%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t5">Method</th>
<th align="left" valign="bottom" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t5" headers="r1c1-t5">
<p><code>and</code></p>
</td>
<td align="left" headers="r2c1-t5 r1c2-t5">
<p>A logical conjunction of two Boolean expressions</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t5" headers="r1c1-t5">
<p><code>or</code></p>
</td>
<td align="left" headers="r3c1-t5 r1c2-t5">
<p>A logical disjunction of two Boolean expressions</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t5" headers="r1c1-t5">
<p><code>not</code></p>
</td>
<td align="left" headers="r4c1-t5 r1c2-t5">
<p>A logical negation of the given Boolean expression</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>The following code shows the use of compound predicates in queries:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.where(cb.equal(pet.get(Pet_.name), "Fido")
        .and(cb.equal(pet.get(Pet_.color), "brown")));
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="GJIXE" name="GJIXE"></a><a id="JEETT01202" name="JEETT01202"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">40.3.6</span> <a id="sthref2148" name="sthref2148"></a><a id="sthref2149" name="sthref2149"></a>Managing Criteria Query Results</h2>
<p>For queries that return more than one result, it is often helpful to organize those results. The <code>CriteriaQuery</code> interface defines the following ordering and grouping methods:</p>
<ul>
<li>
<p>The <code>orderBy</code> method orders query results according to attributes of an entity</p>
</li>
<li>
<p>The <code>groupBy</code> method groups the results of a query together according to attributes of an entity, and the <code>having</code> method restricts those groups according to a condition</p>
</li>
</ul>
<a id="GJIWO" name="GJIWO"></a><a id="JEETT00749" name="JEETT00749"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">40.3.6.1</span> Ordering Results</h3>
<p>To order the results of a query, call the <code>CriteriaQuery.orderBy</code> method, passing in an <code>Order</code> object. To create an <code>Order</code> object, call either the <code>CriteriaBuilder.asc</code> or the <code>CriteriaBuilder.desc</code> method. The <code>asc</code> method is used to order the results by ascending value of the passed expression parameter. The <code>desc</code> method is used to order the results by descending value of the passed expression parameter. The following query shows the use of the <code>desc</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.select(pet);
cq.orderBy(cb.desc(pet.get(Pet_.birthday)));
</pre>
<p>In this query, the results will be ordered by the pet's birthday from highest to lowest. That is, pets born in December will appear before pets born in May.</p>
<p>The following query shows the use of the <code>asc</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
Join&lt;Owner, Address&gt; address = pet.join(Pet_.owners).join(Owner_.address);
cq.select(pet);
cq.orderBy(cb.asc(address.get(Address_.postalCode)));
</pre>
<p>In this query, the results will be ordered by the pet owner's postal code from lowest to highest. That is, pets whose owner lives in the 10001 zip code will appear before pets whose owner lives in the 91000 zip code.</p>
<p>If more than one <code>Order</code> object is passed to <code>orderBy</code>, the precedence is determined by the order in which they appear in the argument list of <code>orderBy</code>. The first <code>Order</code> object has precedence.</p>
<p>The following code orders results by multiple criteria:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
Join&lt;Pet, Owner&gt; owner = pet.join(Pet_.owners);
cq.select(pet);
cq.orderBy(cb.asc(owner.get(Owner_.lastName)), owner.get(Owner_.firstName)));
</pre>
<p>The results of this query will be ordered alphabetically by the pet owner's last name, then first name.</p>
</div>
<!-- class="sect3" -->
<a id="GJIXG" name="GJIXG"></a><a id="JEETT00750" name="JEETT00750"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">40.3.6.2</span> Grouping Results</h3>
<p>The <code>CriteriaQuery.groupBy</code> method partitions the query results into groups. To set these groups, pass an expression to <code>groupBy</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.groupBy(pet.get(Pet_.color));
</pre>
<p>This query returns all <code>Pet</code> entities and groups the results by the pet's color.</p>
<p>Use the <code>CriteriaQuery.having</code> method in conjunction with <code>groupBy</code> to filter over the groups. The <code>having</code> method, which takes a conditional expression as a parameter, restricts the query result according to the conditional expression:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.groupBy(pet.get(Pet_.color));
cq.having(cb.in(pet.get(Pet_.color)).value("brown").value("blonde"));
</pre>
<p>In this example, the query groups the returned <code>Pet</code> entities by color, as in the preceding example. However, the only returned groups will be <code>Pet</code> entities where the <code>color</code> attribute is set to <code>brown</code> or <code>blonde</code>. That is, no gray-colored pets will be returned in this query.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="GJIVY" name="GJIVY"></a><a id="JEETT01203" name="JEETT01203"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">40.3.7</span> <a id="sthref2150" name="sthref2150"></a><a id="sthref2151" name="sthref2151"></a>Executing Queries</h2>
<p>To prepare a query for execution, create a <code>TypedQuery&lt;T&gt;</code> object with the type of the query result, passing the <code>CriteriaQuery</code> object to <code>EntityManager.createQuery</code>.</p>
<p>To execute a query, call either <code>getSingleResult</code> or <code>getResultList</code> on the <code>TypedQuery&lt;T&gt;</code> object.</p>
<a id="GJIUR" name="GJIUR"></a><a id="JEETT00751" name="JEETT00751"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">40.3.7.1</span> Single-Valued Query Results</h3>
<p>Use the <code>TypedQuery&lt;T&gt;.getSingleResult</code> method to execute queries that return a single result:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
...
TypedQuery&lt;Pet&gt; q = em.createQuery(cq);
Pet result = q.getSingleResult();
</pre></div>
<!-- class="sect3" -->
<a id="GJIVP" name="GJIVP"></a><a id="JEETT00752" name="JEETT00752"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">40.3.7.2</span> <a id="sthref2152" name="sthref2152"></a>Collection-Valued Query Results</h3>
<p>Use the <code>TypedQuery&lt;T&gt;.getResultList</code> method to execute queries that return a collection of objects:</p>
<pre xml:space="preserve" class="oac_no_warn">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
...
TypedQuery&lt;Pet&gt; q = em.createQuery(cq);
List&lt;Pet&gt; results = q.getResultList();
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="persistence-criteria002.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="persistence-string-queries.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

