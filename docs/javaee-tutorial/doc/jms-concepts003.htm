<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:3Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="The JMS API Programming Model" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:The JMS API Programming Model | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<ul style="list-style-type:none">
<li><a href="jms-concepts001.htm#BNCDR"><span class="secnum">45.1</span> Overview of the JMS API</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts001.htm#BNCDS"><span class="secnum">45.1.1</span> What Is Messaging?</a></li>
<li><a href="jms-concepts001.htm#BNCDT"><span class="secnum">45.1.2</span> What Is the JMS API?</a></li>
<li><a href="jms-concepts001.htm#BNCDU"><span class="secnum">45.1.3</span> When Can You Use the JMS API?</a></li>
<li><a href="jms-concepts001.htm#BNCDW"><span class="secnum">45.1.4</span> How Does the JMS API Work with the Java EE Platform?</a></li>
</ul>
</li>
<li><a href="jms-concepts002.htm#BNCDX"><span class="secnum">45.2</span> Basic JMS API Concepts</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts002.htm#BNCDY"><span class="secnum">45.2.1</span> JMS API Architecture</a></li>
<li><a href="jms-concepts002.htm#BNCEA"><span class="secnum">45.2.2</span> Messaging Styles</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts002.htm#BNCEB"><span class="secnum">45.2.2.1</span> Point-to-Point Messaging Style</a></li>
<li><a href="jms-concepts002.htm#BNCED"><span class="secnum">45.2.2.2</span> Publish/Subscribe Messaging Style</a></li>
</ul>
</li>
<li><a href="jms-concepts002.htm#BNCEG"><span class="secnum">45.2.3</span> Message Consumption</a></li>
</ul>
</li>
<li><div id="backgroundColor"><a href="jms-concepts003.htm#BNCEH"><span class="secnum">45.3</span> The JMS API Programming Model</a><ul style="list-style-type:none">
<li><a href="jms-concepts003.htm#BNCEJ"><span class="secnum">45.3.1</span> JMS Administered Objects</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts003.htm#BNCEK"><span class="secnum">45.3.1.1</span> JMS Connection Factories</a></li>
<li><a href="jms-concepts003.htm#BNCEL"><span class="secnum">45.3.1.2</span> JMS Destinations</a></li>
</ul>
</li>
<li><a href="jms-concepts003.htm#BNCEM"><span class="secnum">45.3.2</span> Connections</a></li>
<li><a href="jms-concepts003.htm#BNCEN"><span class="secnum">45.3.3</span> Sessions</a></li>
<li><a href="jms-concepts003.htm#BABGDFEA"><span class="secnum">45.3.4</span> JMSContext Objects</a></li>
<li><a href="jms-concepts003.htm#BNCEO"><span class="secnum">45.3.5</span> JMS Message Producers</a></li>
<li><a href="jms-concepts003.htm#BNCEP"><span class="secnum">45.3.6</span> JMS Message Consumers</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts003.htm#BNCEQ"><span class="secnum">45.3.6.1</span> JMS Message Listeners</a></li>
<li><a href="jms-concepts003.htm#BNCER"><span class="secnum">45.3.6.2</span> JMS Message Selectors</a></li>
<li><a href="jms-concepts003.htm#BABEEJJJ"><span class="secnum">45.3.6.3</span> Consuming Messages from Topics</a></li>
<li><a href="jms-concepts003.htm#BNCGD"><span class="secnum">45.3.6.4</span> Creating Durable Subscriptions</a></li>
<li><a href="jms-concepts003.htm#BABJCIGJ"><span class="secnum">45.3.6.5</span> Creating Shared Subscriptions</a></li>
</ul>
</li>
<li><a href="jms-concepts003.htm#BNCES"><span class="secnum">45.3.7</span> JMS Messages</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts003.htm#BNCET"><span class="secnum">45.3.7.1</span> Message Headers</a></li>
<li><a href="jms-concepts003.htm#BNCEV"><span class="secnum">45.3.7.2</span> Message Properties</a></li>
<li><a href="jms-concepts003.htm#BNCEW"><span class="secnum">45.3.7.3</span> Message Bodies</a></li>
</ul>
</li>
<li><a href="jms-concepts003.htm#BNCEY"><span class="secnum">45.3.8</span> JMS Queue Browsers</a></li>
<li><a href="jms-concepts003.htm#BNCEZ"><span class="secnum">45.3.9</span> JMS Exception Handling</a></li>
</ul>
</div></li>
<li><a href="jms-concepts004.htm#BNCFU"><span class="secnum">45.4</span> Using Advanced JMS Features</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts004.htm#BNCFW"><span class="secnum">45.4.1</span> Controlling Message Acknowledgment</a></li>
<li><a href="jms-concepts004.htm#BNCFV"><span class="secnum">45.4.2</span> Specifying Options for Sending Messages</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts004.htm#BNCFY"><span class="secnum">45.4.2.1</span> Specifying Message Persistence</a></li>
<li><a href="jms-concepts004.htm#BNCFZ"><span class="secnum">45.4.2.2</span> Setting Message Priority Levels</a></li>
<li><a href="jms-concepts004.htm#BNCGA"><span class="secnum">45.4.2.3</span> Allowing Messages to Expire</a></li>
<li><a href="jms-concepts004.htm#BABGEADH"><span class="secnum">45.4.2.4</span> Specifying a Delivery Delay</a></li>
<li><a href="jms-concepts004.htm#BABJFIAD"><span class="secnum">45.4.2.5</span> Using JMSProducer Method Chaining</a></li>
</ul>
</li>
<li><a href="jms-concepts004.htm#BNCGB"><span class="secnum">45.4.3</span> Creating Temporary Destinations</a></li>
<li><a href="jms-concepts004.htm#BNCGH"><span class="secnum">45.4.4</span> Using JMS Local Transactions</a></li>
<li><a href="jms-concepts004.htm#BABFIFAJ"><span class="secnum">45.4.5</span> Sending Messages Asynchronously</a></li>
</ul>
</li>
<li><a href="jms-concepts005.htm#BNCGL"><span class="secnum">45.5</span> Using the JMS API in Java EE Applications</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts005.htm#BABHFBDH"><span class="secnum">45.5.1</span> Creating Resources for Java EE Applications</a></li>
<li><a href="jms-concepts005.htm#BNCGM"><span class="secnum">45.5.2</span> Using Resource Injection in Enterprise Bean or Web Components</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts005.htm#sthref2355"><span class="secnum">45.5.2.1</span> Injecting a ConnectionFactory, Queue, or Topic</a></li>
<li><a href="jms-concepts005.htm#BABCJBEE"><span class="secnum">45.5.2.2</span> Injecting a JMSContext Object</a></li>
</ul>
</li>
<li><a href="jms-concepts005.htm#BNCGN"><span class="secnum">45.5.3</span> Using Java EE Components to Produce and to Synchronously Receive Messages</a>
<ul style="list-style-type:none">
<li><a href="jms-concepts005.htm#BNCGO"><span class="secnum">45.5.3.1</span> Managing JMS Resources in Web and EJB Components</a></li>
<li><a href="jms-concepts005.htm#BNCGP"><span class="secnum">45.5.3.2</span> Managing Transactions in Session Beans</a></li>
</ul>
</li>
<li><a href="jms-concepts005.htm#BNCGQ"><span class="secnum">45.5.4</span> Using Message-Driven Beans to Receive Messages Asynchronously</a></li>
<li><a href="jms-concepts005.htm#BNCGS"><span class="secnum">45.5.5</span> Managing JTA Transactions</a></li>
</ul>
</li>
<li><a href="jms-concepts006.htm#BNCGU"><span class="secnum">45.6</span> Further Information about JMS</a></li>
</ul>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jms-concepts002.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jms-concepts004.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BNCEH" name="BNCEH"></a><a id="JEETT00550" name="JEETT00550"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">45.3</span> <a id="sthref2220" name="sthref2220"></a><a id="sthref2221" name="sthref2221"></a>The JMS API Programming Model</h1>
<p>The basic building blocks of a JMS application are</p>
<ul>
<li>
<p>Administered objects: connection factories and destinations</p>
</li>
<li>
<p>Connections</p>
</li>
<li>
<p>Sessions</p>
</li>
<li>
<p><code>JMSContext</code> objects, which combine a connection and a session in one object</p>
</li>
<li>
<p>Message producers</p>
</li>
<li>
<p>Message consumers</p>
</li>
<li>
<p>Messages</p>
</li>
</ul>
<p><a href="#BNCEI">Figure 45-5</a> shows how all these objects fit together in a JMS client application.</p>
<div class="figure"><a id="BNCEI" name="BNCEI"></a><a id="JEETT00050" name="JEETT00050"></a>
<p class="titleinfigure">Figure 45-5 The JMS API Programming Model</p>
<img src="img/jeett_dt_030.png" alt="Description of Figure 45-5 follows" title="Description of Figure 45-5 follows" longdesc="img_text/jeett_dt_030.htm" /><br />
<a id="sthref2222" name="sthref2222" href="img_text/jeett_dt_030.htm">Description of "Figure 45-5 The JMS API Programming Model"</a><br />
<br /></div>
<!-- class="figure" -->
<p>JMS also provides queue browsers, objects that allow an application to browse messages on a queue.</p>
<p>This section describes all these objects briefly and provides sample commands and code snippets that show how to create and use the objects. The last subsection briefly describes JMS API exception handling.</p>
<p>Examples that show how to combine all these objects in applications appear in <a href="jms-examples.htm#BNCGV">Chapter 46, "Java Message Service Examples,"</a> beginning with <a href="jms-examples002.htm#BNCFA">Writing Simple JMS Applications</a>. For more detail, see the JMS API documentation, part of the Java EE API documentation.</p>
<a id="BNCEJ" name="BNCEJ"></a><a id="JEETT01276" name="JEETT01276"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">45.3.1</span> <a id="sthref2223" name="sthref2223"></a><a id="sthref2224" name="sthref2224"></a><a id="sthref2225" name="sthref2225"></a><a id="sthref2226" name="sthref2226"></a>JMS Administered Objects</h2>
<p>Two parts of a JMS application, destinations and connection factories, are commonly maintained administratively rather than programmatically. The technology underlying these objects is likely to be very different from one implementation of the JMS API to another. Therefore, the management of these objects belongs with other administrative tasks that vary from provider to provider.</p>
<p>JMS clients access administered objects through interfaces that are portable, so a client application can run with little or no change on more than one implementation of the JMS API. Ordinarily, an administrator configures administered objects in a JNDI namespace, and JMS clients then access them by using resource injection.</p>
<p>With GlassFish Server, you can use the <code>asadmin create-jms-resource</code> command or the Administration Console to create JMS administered objects in the form of connector resources. You can also specify the resources in a file named <code>glassfish-resources.xml</code> that you can bundle with an application.</p>
<p>NetBeans IDE provides a wizard that allows you to create JMS resources for GlassFish Server. See <a href="jms-examples002.htm#GKTJS">Creating JMS Administered Objects</a> for details.</p>
<p>The Java EE platform specification allows a developer to create administered objects using annotations or deployment descriptor elements. Objects created in this way are specific to the application for which they are created. See <a href="jms-concepts005.htm#BABHFBDH">Creating Resources for Java EE Applications</a> for details. Definitions in a deployment descriptor override those specified by annotations.</p>
<a id="BNCEK" name="BNCEK"></a><a id="JEETT00806" name="JEETT00806"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">45.3.1.1</span> <a id="sthref2227" name="sthref2227"></a><a id="sthref2228" name="sthref2228"></a>JMS Connection Factories</h3>
<p>A <span class="glossaryterm">connection factory</span> is the object a client uses to create a connection to a provider. A connection factory encapsulates a set of connection configuration parameters that has been defined by an administrator. Each connection factory is an instance of the <code>ConnectionFactory</code>, <code>QueueConnectionFactory</code>, or <code>TopicConnectionFactory</code> interface. To learn how to create connection factories, see <a href="jms-examples002.htm#GKTJS">Creating JMS Administered Objects</a>.</p>
<p><a id="sthref2229" name="sthref2229"></a><a id="sthref2230" name="sthref2230"></a>At the beginning of a JMS client program, you usually inject a connection factory resource into a <code>ConnectionFactory</code> object. A Java EE server must provide a JMS connection factory with the logical JNDI name <code>java:comp/DefaultJMSConnectionFactory</code>. The actual JNDI name will be implementation-specific.</p>
<p>For example, the following code fragment looks up the default JMS connection factory and assigns it to a <code>ConnectionFactory</code> object:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Resource(lookup = "java:comp/DefaultJMSConnectionFactory")
private static ConnectionFactory connectionFactory;
</pre></div>
<!-- class="sect3" -->
<a id="BNCEL" name="BNCEL"></a><a id="JEETT00807" name="JEETT00807"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">45.3.1.2</span> <a id="sthref2231" name="sthref2231"></a><a id="sthref2232" name="sthref2232"></a><a id="sthref2233" name="sthref2233"></a><a id="sthref2234" name="sthref2234"></a><a id="sthref2235" name="sthref2235"></a><a id="sthref2236" name="sthref2236"></a><a id="sthref2237" name="sthref2237"></a><a id="sthref2238" name="sthref2238"></a>JMS Destinations</h3>
<p>A <span class="glossaryterm">destination</span> is the object a client uses to specify the target of messages it produces and the source of messages it consumes. In the PTP messaging style, destinations are called queues. In the pub/sub messaging style, destinations are called topics. A JMS application can use multiple queues or topics (or both). To learn how to create destination resources, see <a href="jms-examples002.htm#GKTJS">Creating JMS Administered Objects</a>.</p>
<p>To create a destination using GlassFish Server, you create a JMS destination resource that specifies a JNDI name for the destination.</p>
<p>In the GlassFish Server implementation of JMS, each destination resource refers to a physical destination. You can create a physical destination explicitly, but if you do not, the Application Server creates it when it is needed and deletes it when you delete the destination resource.</p>
<p><a id="sthref2239" name="sthref2239"></a>In addition to injecting a connection factory resource into a client program, you usually inject a destination resource. Unlike connection factories, destinations are specific to either the PTP or pub/sub messaging style. To create an application that allows you to use the same code for both topics and queues, you assign the destination to a <code>Destination</code> object.</p>
<p><a id="sthref2240" name="sthref2240"></a>The following code specifies two resources, a queue and a topic. The resource names are mapped to destination resources created in the JNDI namespace:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Resource(lookup = "jms/MyQueue")
private static Queue queue;

@Resource(lookup = "jms/MyTopic")
private static Topic topic;
</pre>
<p>In a Java EE application, JMS administered objects are normally placed in the <code>jms</code> naming subcontext.<a id="sthref2241" name="sthref2241"></a></p>
<p>With the common interfaces, you can mix or match connection factories and destinations. That is, in addition to using the <code>ConnectionFactory</code> interface, you can inject a <code>QueueConnectionFactory</code> resource and use it with a <code>Topic</code>, and you can inject a <code>TopicConnectionFactory</code> resource and use it with a <code>Queue</code>. The behavior of the application will depend on the kind of destination you use and not on the kind of connection factory you use.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNCEM" name="BNCEM"></a><a id="JEETT01277" name="JEETT01277"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">45.3.2</span> <a id="sthref2242" name="sthref2242"></a><a id="sthref2243" name="sthref2243"></a>Connections</h2>
<p>A <span class="glossaryterm">connection</span> encapsulates a virtual connection with a JMS provider. For example, a connection could represent an open TCP/IP socket between a client and a provider service daemon. You use a connection to create one or more sessions.</p>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>In the Java EE platform, the ability to create multiple sessions from a single connection is limited to application clients. In web and enterprise bean components, a connection can create no more than one session.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
<p>You normally create a connection by creating a <code>JMSContext</code> object. See <a href="#BABGDFEA">JMSContext Objects</a> for details.</p>
</div>
<!-- class="sect2" -->
<a id="BNCEN" name="BNCEN"></a><a id="JEETT01278" name="JEETT01278"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">45.3.3</span> <a id="sthref2244" name="sthref2244"></a><a id="sthref2245" name="sthref2245"></a>Sessions</h2>
<p>A <span class="glossaryterm">session</span> is a single-threaded context for producing and consuming messages.</p>
<p>You normally create a session (as well as a connection) by creating a <code>JMSContext</code> object. See <a href="#BABGDFEA">JMSContext Objects</a> for details. You use sessions to create message producers, message consumers, messages, queue browsers, and temporary destinations.</p>
<p>Sessions serialize the execution of message listeners; for details, see <a href="#BNCEQ">JMS Message Listeners</a>.</p>
<p>A session provides a transactional context with which to group a set of sends and receives into an atomic unit of work. For details, see <a href="jms-concepts004.htm#BNCGH">Using JMS Local Transactions</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABGDFEA" name="BABGDFEA"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2"><span class="secnum">45.3.4</span> <a id="sthref2246" name="sthref2246"></a><a id="sthref2247" name="sthref2247"></a>JMSContext Objects</h2>
<p>A <code>JMSContext</code> object combines a connection and a session in a single object. That is, it provides both an active connection to a JMS provider and a single-threaded context for sending and receiving messages.</p>
<p>You use the <code>JMSContext</code> to create the following objects:</p>
<ul>
<li>
<p>Message producers</p>
</li>
<li>
<p>Message consumers</p>
</li>
<li>
<p>Messages</p>
</li>
<li>
<p>Queue browsers</p>
</li>
<li>
<p>Temporary queues and topics (see <a href="jms-concepts004.htm#BNCGB">Creating Temporary Destinations</a>)</p>
</li>
</ul>
<p>You can create a <code>JMSContext</code> in a <code>try</code>-with-resources block.</p>
<p>To create a <code>JMSContext</code>, call the <code>createContext</code> method on the connection factory:</p>
<pre xml:space="preserve" class="oac_no_warn">
JMSContext context = connectionFactory.createContext();
</pre>
<p>When called with no arguments from an application client or a Java SE client, or from the Java EE web or EJB container when there is no active JTA transaction in progress, the <code>createContext</code> method creates a non-transacted session with an acknowledgment mode of <code>JMSContext.AUTO_ACKNOWLEDGE</code>. When called with no arguments from the web or EJB container when there is an active JTA transaction in progress, the <code>createContext</code> method creates a transacted session. For information about the way JMS transactions work in Java EE applications, see <a href="jms-concepts005.htm#BNCGL">Using the JMS API in Java EE Applications</a>.</p>
<p>From an application client or a Java SE client, you can also call the <code>createContext</code> method with the argument <code>JMSContext.SESSION_TRANSACTED</code> to create a transacted session:</p>
<pre xml:space="preserve" class="oac_no_warn">
JMSContext context = 
        connectionFactory.createContext(JMSContext.SESSION_TRANSACTED);
</pre>
<p>The session uses local transactions; see <a href="jms-concepts004.htm#BNCGH">Using JMS Local Transactions</a> for details.</p>
<p>Alternatively, you can specify a non-default acknowledgment mode; see <a href="jms-concepts004.htm#BNCFW">Controlling Message Acknowledgment</a> for more information.</p>
<p>When you use a <code>JMSContext</code>, message delivery normally begins as soon as you create a consumer. See <a href="#BNCEP">JMS Message Consumers</a> for more information.</p>
<p>If you create a <code>JMSContext</code> in a <code>try</code>-with-resources block, you do not need to close it explicitly. It will be closed when the <code>try</code> block comes to an end. Make sure that your application completes all its JMS activity within the <code>try</code>-with-resources block. If you do not use a <code>try</code>-with-resources block, you must call the <code>close</code> method on the <code>JMSContext</code> to close the connection when the application has finished its work.</p>
</div>
<!-- class="sect2" -->
<a id="BNCEO" name="BNCEO"></a><a id="JEETT01279" name="JEETT01279"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">45.3.5</span> <a id="sthref2248" name="sthref2248"></a><a id="sthref2249" name="sthref2249"></a><a id="sthref2250" name="sthref2250"></a>JMS Message Producers</h2>
<p>A <span class="glossaryterm">message producer</span> is an object that is created by a <code>JMSContext</code> or a session and used for sending messages to a destination. A message producer created by a <code>JMSContext</code> implements the <code>JMSProducer</code> interface. You could create it this way:</p>
<pre xml:space="preserve" class="oac_no_warn">
try (JMSContext context = connectionFactory.createContext();) {
    JMSProducer producer = context.createProducer();
    ...
</pre>
<p>However, a <code>JMSProducer</code> is a lightweight object that does not consume significant resources. For this reason, you do not need to save the <code>JMSProducer</code> in a variable; you can create a new one each time you send a message. You send messages to a specific destination by using the <code>send</code> method. For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
context.createProducer().send(dest, message);
</pre>
<p>You can create the message in a variable before sending it, as shown here, or you can create it within the <code>send</code> call. See <a href="#BNCES">JMS Messages</a> for more information.</p>
</div>
<!-- class="sect2" -->
<a id="BNCEP" name="BNCEP"></a><a id="JEETT01280" name="JEETT01280"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">45.3.6</span> <a id="sthref2251" name="sthref2251"></a><a id="sthref2252" name="sthref2252"></a>JMS Message Consumers</h2>
<p>A <span class="glossaryterm">message consumer</span> is an object that is created by a <code>JMSContext</code> or a session and used for receiving messages sent to a destination. A message producer created by a <code>JMSContext</code> implements the <code>JMSConsumer</code> interface. The simplest way to create a message consumer is to use the <code>JMSContext.createConsumer</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
try (JMSContext context = connectionFactory.createContext();) {
    JMSConsumer consumer = context.createConsumer(dest);
    ...
</pre>
<p>A message consumer allows a JMS client to register interest in a destination with a JMS provider. The JMS provider manages the delivery of messages from a destination to the registered consumers of the destination.</p>
<p>When you use a <code>JMSContext</code> to create a message consumer, message delivery begins as soon as you have created the consumer. You can disable this behavior by calling <code>setAutoStart(false)</code> when you create the <code>JMSContext</code> and then calling the <code>start</code> method explicitly to start message delivery. If you want to stop message delivery temporarily without closing the connection, you can call the <code>stop</code> method; to restart message delivery, call <code>start</code>.</p>
<p>You use the <code>receive</code> method to consume a message synchronously. You can use this method at any time after you create the consumer.</p>
<p>If you specify no arguments or an argument of <code>0</code>, the method blocks indefinitely until a message arrives:</p>
<pre xml:space="preserve" class="oac_no_warn">
Message m = consumer.receive();
Message m = consumer.receive(0);
</pre>
<p>For a simple client, this may not matter. But if it is possible that a message might not be available, use a synchronous receive with a timeout: Call the <code>receive</code> method with a timeout argument greater than <code>0</code>. One second is a recommended timeout value:</p>
<pre xml:space="preserve" class="oac_no_warn">
Message m = consumer.receive(1000); // time out after a second
</pre>
<p>To enable asynchronous message delivery from an application client or a Java SE client, you use a message listener, as described in the next section.</p>
<p>You can use the <code>JMSContext.createDurableConsumer</code> method to create a durable topic subscription. This method is valid only if you are using a topic. For details, see <a href="#BNCGD">Creating Durable Subscriptions</a>. For topics, you can also create shared consumers; see <a href="#BABJCIGJ">Creating Shared Subscriptions</a>.</p>
<a id="BNCEQ" name="BNCEQ"></a><a id="JEETT00808" name="JEETT00808"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">45.3.6.1</span> <a id="sthref2253" name="sthref2253"></a><a id="sthref2254" name="sthref2254"></a><a id="sthref2255" name="sthref2255"></a>JMS Message Listeners</h3>
<p>A message listener is an object that acts as an asynchronous event handler for messages. This object implements the <code>MessageListener</code> interface, which contains one method, <code>onMessage</code>. In the <code>onMessage</code> method, you define the actions to be taken when a message arrives.</p>
<p>From an application client or a Java SE client, you register the message listener with a specific message consumer by using the <code>setMessageListener</code> method. For example, if you define a class named <code>Listener</code> that implements the <code>MessageListener</code> interface, you can register the message listener as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
Listener myListener = new Listener();
consumer.setMessageListener(myListener);
</pre>
<p>When message delivery begins, the JMS provider automatically calls the message listener's <code>onMessage</code> method whenever a message is delivered. The <code>onMessage</code> method takes one argument of type <code>Message</code>, which your implementation of the method can cast to another message subtype as needed (see <a href="#BNCEW">Message Bodies</a>).</p>
<p>In the Java EE web or EJB container, you use message-driven beans for asynchronous message delivery. A message-driven bean also implements the <code>MessageListener</code> interface and contains an <code>onMessage</code> method. For details, see <a href="jms-concepts005.htm#BNCGQ">Using Message-Driven Beans to Receive Messages Asynchronously</a>.</p>
<p>Your <code>onMessage</code> method should handle all exceptions. Throwing a <code>RuntimeException</code> is considered a programming error.</p>
<p>For a simple example of the use of a message listener, see <a href="jms-examples002.htm#BNCFH">Using a Message Listener for Asynchronous Message Delivery</a>. <a href="jms-examples.htm#BNCGV">Chapter 46, "Java Message Service Examples,"</a> contains several more examples of message listeners and message-driven beans.</p>
</div>
<!-- class="sect3" -->
<a id="BNCER" name="BNCER"></a><a id="JEETT00809" name="JEETT00809"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">45.3.6.2</span> <a id="sthref2256" name="sthref2256"></a>JMS Message Selectors</h3>
<p>If your messaging application needs to filter the messages it receives, you can use a JMS message selector, which allows a message consumer for a destination to specify the messages that interest it. Message selectors assign the work of filtering messages to the JMS provider rather than to the application. For an example of an application that uses a message selector, see <a href="jms-examples007.htm#BNCGW">Sending Messages from a Session Bean to an MDB</a>.</p>
<p>A message selector is a <code>String</code> that contains an expression. The syntax of the expression is based on a subset of the SQL92 conditional expression syntax. The message selector in the example selects any message that has a <code>NewsType</code> property that is set to the value <code>'Sports'</code> or <code>'Opinion'</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
NewsType = 'Sports' OR NewsType = 'Opinion'
</pre>
<p>The <code>createConsumer</code> and <code>createDurableConsumer</code> methods, as well as the methods for creating shared consumers, allow you to specify a message selector as an argument when you create a message consumer.</p>
<p>The message consumer then receives only messages whose headers and properties match the selector. (See <a href="#BNCET">Message Headers</a> and <a href="#BNCEV">Message Properties</a>.) A message selector cannot select messages on the basis of the content of the message body.</p>
</div>
<!-- class="sect3" -->
<a id="BABEEJJJ" name="BABEEJJJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3"><span class="secnum">45.3.6.3</span> Consuming Messages from Topics</h3>
<p>The semantics of consuming messages from topics are more complex than the semantics of consuming messages from queues.</p>
<p>An application consumes messages from a topic by creating a subscription on that topic and creating a consumer on that subscription. Subscriptions may be durable or nondurable, and they may be shared or unshared.</p>
<p>A subscription may be thought of as an entity within the JMS provider itself, whereas a consumer is a JMS object within the application.</p>
<p>A subscription will receive a copy of every message that is sent to the topic after the subscription is created, unless a message selector is specified. If a message selector is specified, only those messages whose properties match the message selector will be added to the subscription.</p>
<p>Unshared subscriptions are restricted to a single consumer. In this case, all the messages in the subscription are delivered to that consumer. Shared subscriptions allow multiple consumers. In this case, each message in the subscription is delivered to only one consumer. JMS does not define how messages are distributed between multiple consumers on the same subscription.</p>
<p>Subscriptions may be durable or nondurable.</p>
<p>A nondurable subscription exists only as long as there is an active consumer on the subscription. This means that any messages sent to the topic will be added to the subscription only while a consumer exists and is not closed.</p>
<p>A nondurable subscription may be either unshared or shared.</p>
<ul>
<li>
<p>An unshared nondurable subscription does not have a name and may have only a single consumer object associated with it. It is created automatically when the consumer object is created. It is not persisted and is deleted automatically when the consumer object is closed.</p>
<p>The <code>JMSContext.createConsumer</code> method creates a consumer on an unshared nondurable subscription if a topic is specified as the destination.</p>
</li>
<li>
<p>A shared nondurable subscription is identified by name and an optional client identifier, and may have several consumer objects consuming messages from it. It is created automatically when the first consumer object is created. It is not persisted and is deleted automatically when the last consumer object is closed. See <a href="#BABJCIGJ">Creating Shared Subscriptions</a> for more information.</p>
</li>
</ul>
<p>At the cost of higher overhead, a subscription may be durable. A durable subscription is persisted and continues to accumulate messages until explicitly deleted, even if there are no consumer objects consuming messages from it. See <a href="#BNCGD">Creating Durable Subscriptions</a> for details.</p>
</div>
<!-- class="sect3" -->
<a id="BNCGD" name="BNCGD"></a><a id="JEETT00818" name="JEETT00818"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">45.3.6.4</span> <a id="sthref2257" name="sthref2257"></a><a id="sthref2258" name="sthref2258"></a><a id="sthref2259" name="sthref2259"></a><a id="sthref2260" name="sthref2260"></a><a id="sthref2261" name="sthref2261"></a>Creating Durable Subscriptions</h3>
<p>To ensure that a pub/sub application receives all sent messages, use durable subscriptions for the consumers on the topic.</p>
<p>Like a nondurable subscription, a durable subscription may be either unshared or shared.</p>
<ul>
<li>
<p>An unshared durable subscription is identified by name and client identifier (which must be set) and may have only a single consumer object associated with it.</p>
</li>
<li>
<p>A shared durable subscription is identified by name and an optional client identifier, and may have several consumer objects consuming messages from it.</p>
</li>
</ul>
<p>A durable subscription that exists but that does not currently have a non-closed consumer object associated with it is described as being inactive.</p>
<p>You can use the <code>JMSContext.createDurableConsumer</code> method to create a consumer on an unshared durable subscription. An unshared durable subscription can have only one active consumer at a time.</p>
<p>A consumer identifies the durable subscription from which it consumes messages by specifying a unique identity that is retained by the JMS provider. Subsequent consumer objects that have the same identity resume the subscription in the state in which it was left by the preceding consumer. If a durable subscription has no active consumer, the JMS provider retains the subscription's messages until they are received by the subscription or until they expire.</p>
<p><a id="sthref2262" name="sthref2262"></a><a id="sthref2263" name="sthref2263"></a>You establish the unique identity of an unshared durable subscription by setting the following:</p>
<ul>
<li>
<p>A client ID for the connection</p>
</li>
<li>
<p>A topic and a subscription name for the subscription</p>
</li>
</ul>
<p>You can set the client ID administratively for a client-specific connection factory using either the command line or the Administration Console. (In an application client or a Java SE client, you can instead call <code>JMSContext.setClientID</code>.)</p>
<p>After using this connection factory to create the <code>JMSContext</code>, you call the <code>createDurableConsumer</code> method with two arguments: the topic and a string that specifies the name of the subscription:</p>
<pre xml:space="preserve" class="oac_no_warn">
String subName = "MySub";
JMSConsumer consumer = context.createDurableConsumer(myTopic, subName);
</pre>
<p>The subscription becomes active after you create the consumer. Later, you might close the consumer:</p>
<pre xml:space="preserve" class="oac_no_warn">
consumer.close();
</pre>
<p>The JMS provider stores the messages sent to the topic, as it would store messages sent to a queue. If the program or another application calls <code>createDurableConsumer</code> using the same connection factory and its client ID, the same topic, and the same subscription name, then the subscription is reactivated and the JMS provider delivers the messages that were sent while the subscription was inactive.</p>
<p>To delete a durable subscription, first close the consumer, then call the <code>unsubscribe</code> method with the subscription name as the argument:</p>
<pre xml:space="preserve" class="oac_no_warn">
consumer.close();
context.unsubscribe(subName);
</pre>
<p>The <code>unsubscribe</code> method deletes the state the provider maintains for the subscription.</p>
<p><a href="#BNCGE">Figure 45-6</a> and <a href="#BNCGF">Figure 45-7</a> show the difference between a nondurable and a durable subscription. With an ordinary, nondurable subscription, the consumer and the subscription begin and end at the same point and are, in effect, identical. When the consumer is closed, the subscription also ends. Here, <code>create</code> stands for a call to <code>JMSContext.createConsumer</code> with a <code>Topic</code> argument, and <code>close</code> stands for a call to <code>JMSConsumer.close</code>. Any messages sent to the topic between the time of the first <code>close</code> and the time of the second <code>create</code> are not added to either subscription. In <a href="#BNCGE">Figure 45-6</a>, the consumers receive messages M1, M2, M5, and M6, but they do not receive messages M3 and M4.</p>
<div class="figure"><a id="BNCGE" name="BNCGE"></a><a id="JEETT00051" name="JEETT00051"></a>
<p class="titleinfigure">Figure 45-6 Nondurable Subscriptions and Consumers</p>
<img src="img/jeett_dt_031.png" alt="Description of Figure 45-6 follows" title="Description of Figure 45-6 follows" longdesc="img_text/jeett_dt_031.htm" /><br />
<a id="sthref2264" name="sthref2264" href="img_text/jeett_dt_031.htm">Description of "Figure 45-6 Nondurable Subscriptions and Consumers"</a><br />
<br /></div>
<!-- class="figure" -->
<p>With a durable subscription, the consumer can be closed and re-created, but the subscription continues to exist and to hold messages until the application calls the <code>unsubscribe</code> method. In <a href="#BNCGF">Figure 45-7</a>, <code>create</code> stands for a call to <code>JMSContext.createDurableConsumer</code>, <code>close</code> stands for a call to <code>JMSConsumer.close</code>, and <code>unsubscribe</code> stands for a call to <code>JMSContext.unsubscribe</code>. Messages sent after the first consumer is closed are received when the second consumer is created (on the same durable subscription), so even though messages M2, M4, and M5 arrive while there is no consumer, they are not lost.</p>
<div class="figure"><a id="BNCGF" name="BNCGF"></a><a id="JEETT00052" name="JEETT00052"></a>
<p class="titleinfigure">Figure 45-7 Consumers on a Durable Subscription</p>
<img src="img/jeett_dt_032.png" alt="Description of Figure 45-7 follows" title="Description of Figure 45-7 follows" longdesc="img_text/jeett_dt_032.htm" /><br />
<a id="sthref2265" name="sthref2265" href="img_text/jeett_dt_032.htm">Description of "Figure 45-7 Consumers on a Durable Subscription"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a id="sthref2266" name="sthref2266"></a><a id="sthref2267" name="sthref2267"></a>A shared durable subscription allows you to use multiple consumers to receive messages from a durable subscription. If you use a shared durable subscription, the connection factory you use does not need to have a client identifier. To create a shared durable subscription, call the <code>JMSContext.createSharedDurableConsumer</code> method, specifying the topic and subscription name:</p>
<pre xml:space="preserve" class="oac_no_warn">
JMSConsumer consumer = 
        context.createSharedDurableConsumer(topic, "MakeItLast");
</pre>
<p>See <a href="jms-examples002.htm#BNCFX">Acknowledging Messages</a>, <a href="jms-examples003.htm#BNCGG">Using Durable Subscriptions</a>, <a href="jms-examples004.htm#BABEJBHA">Using Shared Durable Subscriptions</a>, and <a href="jms-examples007.htm#BNCGW">Sending Messages from a Session Bean to an MDB</a> for examples of Java EE applications that use durable subscriptions.</p>
</div>
<!-- class="sect3" -->
<a id="BABJCIGJ" name="BABJCIGJ"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3"><span class="secnum">45.3.6.5</span> <a id="sthref2268" name="sthref2268"></a><a id="sthref2269" name="sthref2269"></a>Creating Shared Subscriptions</h3>
<p>A topic subscription created by the <code>createConsumer</code> or <code>createDurableConsumer</code> method can have only one consumer (although a topic can have many). Multiple clients consuming from the same topic have, by definition, multiple subscriptions to the topic, and all the clients receive all the messages sent to the topic (unless they filter them with message selectors).</p>
<p>It is, however, possible to create a nondurable shared subscription to a topic by using the <code>createSharedConsumer</code> method and specifying not only a destination but a subscription name:</p>
<pre xml:space="preserve" class="oac_no_warn">
consumer = context.createSharedConsumer(topicName, "SubName");
</pre>
<p>With a shared subscription, messages will be distributed among multiple clients that use the same topic and subscription name. Each message sent to the topic will be added to every subscription (subject to any message selectors), but each message added to a subscription will be delivered to only one of the consumers on that subscription, so it will be received by only one of the clients. A shared subscription can be useful if you want to share the message load among several consumers on the subscription rather than having just one consumer on the subscription receive each message. This feature can improve the scalability of Java EE application client applications and Java SE applications. (Message-driven beans share the work of processing messages from a topic among multiple threads.)</p>
<p>See <a href="jms-examples004.htm#BABIBEAC">Using Shared Nondurable Subscriptions</a> for a simple example of using shared nondurable consumers.</p>
<p>You can also create shared durable subscriptions by using the <code>JMSContext.createSharedDurableConsumer</code> method. For details, see <a href="#BNCGD">Creating Durable Subscriptions</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNCES" name="BNCES"></a><a id="JEETT01281" name="JEETT01281"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">45.3.7</span> <a id="sthref2270" name="sthref2270"></a>JMS Messages</h2>
<p>The ultimate purpose of a JMS application is to produce and consume messages that can then be used by other software applications. JMS messages have a basic format that is simple but highly flexible, allowing you to create messages that match formats used by non-JMS applications on heterogeneous platforms.</p>
<p>A JMS message can have three parts: a header, properties, and a body. Only the header is required. The following sections describe these parts.</p>
<p>For complete documentation of message headers, properties, and bodies, see the documentation of the <code>Message</code> interface in the API documentation. For a list of possible message types, see <a href="#BNCEW">Message Bodies</a>.</p>
<a id="BNCET" name="BNCET"></a><a id="JEETT00810" name="JEETT00810"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">45.3.7.1</span> <a id="sthref2271" name="sthref2271"></a><a id="sthref2272" name="sthref2272"></a>Message Headers</h3>
<p>A JMS message header contains a number of predefined fields that contain values used by both clients and providers to identify and route messages. <a href="#BNCEU">Table 45-1</a> lists and describes the JMS message header fields and indicates how their values are set. For example, every message has a unique identifier, which is represented in the header field <code>JMSMessageID</code>. The value of another header field, <code>JMSDestination</code>, represents the queue or the topic to which the message is sent. Other fields include a timestamp and a priority level.</p>
<p>Each header field has associated setter and getter methods, which are documented in the description of the <code>Message</code> interface. Some header fields are intended to be set by a client, but many are set automatically by the <code>send</code> method, which overrides any client-set values.</p>
<div class="tblhruleformal"><a id="sthref2273" name="sthref2273"></a><a id="BNCEU" name="BNCEU"></a>
<p class="titleintable">Table 45-1 How JMS Message Header Field Values Are Set</p>
<table class="HRuleFormal" title="How JMS Message Header Field Values Are Set" summary="This table lists the JMS message header fields and how their values are set." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="22%" />
<col width="*" />
<col width="35%" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t3">Header Field</th>
<th align="left" valign="bottom" id="r1c2-t3">Description</th>
<th align="left" valign="bottom" id="r1c3-t3">Set By</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t3" headers="r1c1-t3">
<p><a id="sthref2274" name="sthref2274"></a><a id="sthref2275" name="sthref2275"></a><code>JMSDestination</code></p>
</td>
<td align="left" headers="r2c1-t3 r1c2-t3">
<p>Destination to which the message is being sent</p>
</td>
<td align="left" headers="r2c1-t3 r1c3-t3">
<p>JMS provider <code>send</code> method</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t3" headers="r1c1-t3">
<p><a id="sthref2276" name="sthref2276"></a><a id="sthref2277" name="sthref2277"></a><code>JMSDeliveryMode</code></p>
</td>
<td align="left" headers="r3c1-t3 r1c2-t3">
<p>Delivery mode specified when the message was sent (see <a href="jms-concepts004.htm#BNCFY">Specifying Message Persistence</a>)</p>
</td>
<td align="left" headers="r3c1-t3 r1c3-t3">
<p>JMS provider <code>send</code> method</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t3" headers="r1c1-t3">
<p><code><a id="sthref2278" name="sthref2278"></a>JMSDeliveryTime</code></p>
</td>
<td align="left" headers="r4c1-t3 r1c2-t3">
<p>The time the message was sent plus the delivery delay specified when the message was sent (see <a href="jms-concepts004.htm#BABGEADH">Specifying a Delivery Delay</a></p>
</td>
<td align="left" headers="r4c1-t3 r1c3-t3">
<p>JMS provider <code>send</code> method</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t3" headers="r1c1-t3">
<p><a id="sthref2279" name="sthref2279"></a><a id="sthref2280" name="sthref2280"></a><code>JMSExpiration</code></p>
</td>
<td align="left" headers="r5c1-t3 r1c2-t3">
<p>Expiration time of the message (see <a href="jms-concepts004.htm#BNCGA">Allowing Messages to Expire</a>)</p>
</td>
<td align="left" headers="r5c1-t3 r1c3-t3">
<p>JMS provider <code>send</code> method</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t3" headers="r1c1-t3">
<p><a id="sthref2281" name="sthref2281"></a><a id="sthref2282" name="sthref2282"></a><code>JMSPriority</code></p>
</td>
<td align="left" headers="r6c1-t3 r1c2-t3">
<p>The priority of the message (see <a href="jms-concepts004.htm#BNCFZ">Setting Message Priority Levels</a>)</p>
</td>
<td align="left" headers="r6c1-t3 r1c3-t3">
<p>JMS provider <code>send</code> method</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r7c1-t3" headers="r1c1-t3">
<p><a id="sthref2283" name="sthref2283"></a><a id="sthref2284" name="sthref2284"></a><code>JMSMessageID</code></p>
</td>
<td align="left" headers="r7c1-t3 r1c2-t3">
<p>Value that uniquely identifies each message sent by a provider</p>
</td>
<td align="left" headers="r7c1-t3 r1c3-t3">
<p>JMS provider <code>send</code> method</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r8c1-t3" headers="r1c1-t3">
<p><a id="sthref2285" name="sthref2285"></a><a id="sthref2286" name="sthref2286"></a><code>JMSTimestamp</code></p>
</td>
<td align="left" headers="r8c1-t3 r1c2-t3">
<p>The time the message was handed off to a provider to be sent</p>
</td>
<td align="left" headers="r8c1-t3 r1c3-t3">
<p>JMS provider <code>send</code> method</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r9c1-t3" headers="r1c1-t3">
<p><a id="sthref2287" name="sthref2287"></a><a id="sthref2288" name="sthref2288"></a><code>JMSCorrelationID</code></p>
</td>
<td align="left" headers="r9c1-t3 r1c2-t3">
<p>Value that links one message to another; commonly the <code>JMSMessageID</code> value is used</p>
</td>
<td align="left" headers="r9c1-t3 r1c3-t3">
<p>Client application</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r10c1-t3" headers="r1c1-t3">
<p><a id="sthref2289" name="sthref2289"></a><a id="sthref2290" name="sthref2290"></a><code>JMSReplyTo</code></p>
</td>
<td align="left" headers="r10c1-t3 r1c2-t3">
<p>Destination where replies to the message should be sent</p>
</td>
<td align="left" headers="r10c1-t3 r1c3-t3">
<p>Client application</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r11c1-t3" headers="r1c1-t3">
<p><a id="sthref2291" name="sthref2291"></a><code>JMSType</code></p>
</td>
<td align="left" headers="r11c1-t3 r1c2-t3">
<p>Type identifier supplied by client application</p>
</td>
<td align="left" headers="r11c1-t3 r1c3-t3">
<p>Client application</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r12c1-t3" headers="r1c1-t3">
<p><a id="sthref2292" name="sthref2292"></a><a id="sthref2293" name="sthref2293"></a><code>JMSRedelivered</code></p>
</td>
<td align="left" headers="r12c1-t3 r1c2-t3">
<p>Whether the message is being redelivered</p>
</td>
<td align="left" headers="r12c1-t3 r1c3-t3">
<p>JMS provider prior to delivery</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect3" -->
<a id="BNCEV" name="BNCEV"></a><a id="JEETT00811" name="JEETT00811"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">45.3.7.2</span> <a id="sthref2294" name="sthref2294"></a><a id="sthref2295" name="sthref2295"></a>Message Properties</h3>
<p>You can create and set properties for messages if you need values in addition to those provided by the header fields. You can use properties to provide compatibility with other messaging systems, or you can use them to create message selectors (see <a href="#BNCER">JMS Message Selectors</a>). For an example of setting a property to be used as a message selector, see <a href="jms-examples007.htm#BNCGW">Sending Messages from a Session Bean to an MDB</a>.</p>
<p>The JMS API provides some predefined property names that begin with <code>JMSX</code>. A JMS provider is required to implement only one of these, <code>JMSXDeliveryCount</code> (which specifies the number of times a message has been delivered); the rest are optional. The use of these predefined properties or of user-defined properties in applications is optional.</p>
</div>
<!-- class="sect3" -->
<a id="BNCEW" name="BNCEW"></a><a id="JEETT00812" name="JEETT00812"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">45.3.7.3</span> <a id="sthref2296" name="sthref2296"></a><a id="sthref2297" name="sthref2297"></a>Message Bodies</h3>
<p>The JMS API defines six different types of messages. Each message type corresponds to a different message body. These message types allow you to send and receive data in many different forms. <a href="#BNCEX">Table 45-2</a> describes these message types.</p>
<div class="tblhruleformal"><a id="sthref2298" name="sthref2298"></a><a id="BNCEX" name="BNCEX"></a>
<p class="titleintable">Table 45-2 JMS Message Types</p>
<table class="HRuleFormal" title="JMS Message Types" summary="This table lists the JMS message types and describes their contents." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="25%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t4">Message Type</th>
<th align="left" valign="bottom" id="r1c2-t4">Body Contains</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t4" headers="r1c1-t4">
<p><a id="sthref2299" name="sthref2299"></a><code>TextMessage</code></p>
</td>
<td align="left" headers="r2c1-t4 r1c2-t4">
<p>A <code>java.lang.String</code> object (for example, the contents of an XML file).</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t4" headers="r1c1-t4">
<p><a id="sthref2300" name="sthref2300"></a><code>MapMessage</code></p>
</td>
<td align="left" headers="r3c1-t4 r1c2-t4">
<p>A set of name-value pairs, with names as <code>String</code> objects and values as primitive types in the Java programming language. The entries can be accessed sequentially by enumerator or randomly by name. The order of the entries is undefined.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t4" headers="r1c1-t4">
<p><a id="sthref2301" name="sthref2301"></a><code>BytesMessage</code></p>
</td>
<td align="left" headers="r4c1-t4 r1c2-t4">
<p>A stream of uninterpreted bytes. This message type is for literally encoding a body to match an existing message format.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t4" headers="r1c1-t4">
<p><a id="sthref2302" name="sthref2302"></a><code>StreamMessage</code></p>
</td>
<td align="left" headers="r5c1-t4 r1c2-t4">
<p>A stream of primitive values in the Java programming language, filled and read sequentially.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t4" headers="r1c1-t4">
<p><a id="sthref2303" name="sthref2303"></a><code>ObjectMessage</code></p>
</td>
<td align="left" headers="r6c1-t4 r1c2-t4">
<p>A <code>Serializable</code> object in the Java programming language.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r7c1-t4" headers="r1c1-t4">
<p><a id="sthref2304" name="sthref2304"></a><code>Message</code></p>
</td>
<td align="left" headers="r7c1-t4 r1c2-t4">
<p>Nothing. Composed of header fields and properties only. This message type is useful when a message body is not required.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>The JMS API provides methods for creating messages of each type and for filling in their contents. For example, to create and send a <code>TextMessage</code>, you might use the following statements:</p>
<pre xml:space="preserve" class="oac_no_warn">
TextMessage message = context.createTextMessage();
message.setText(msg_text);     // msg_text is a String
context.createProducer().send(message);
</pre>
<p><a id="sthref2305" name="sthref2305"></a>At the consuming end, a message arrives as a generic <code>Message</code> object. You can then cast the object to the appropriate message type and use more specific methods to access the body and extract the message contents (and its headers and properties if needed). For example, you might use the stream-oriented read methods of <code>BytesMessage</code>. You must always cast to the appropriate message type to retrieve the body of a <code>StreamMessage</code>.</p>
<p>Instead of casting the message to a message type, you can call the <code>getBody</code> method on the <code>Message</code>, specifying the type of the message as an argument. For example, you can retrieve a <code>TextMessage</code> as a <code>String</code>. The following code fragment uses the <code>getBody</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
Message m = consumer.receive();
if (m instanceof TextMessage) {
    String message = m.getBody(String.class);
    System.out.println("Reading message: " + message);
} else {
    // Handle error or process another message type
}
</pre>
<p>The JMS API provides shortcuts for creating and receiving a <code>TextMessage</code>, <code>BytesMessage</code>, <code>MapMessage</code>, or <code>ObjectMessage</code>. For example, you do not have to wrap a string in a <code>TextMessage</code>; instead, you can send and receive the string directly. For example, you can send a string as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
String message = "This is a message";
context.createProducer().send(dest, message);
</pre>
<p><a id="sthref2306" name="sthref2306"></a>You can receive the message by using the <code>receiveBody</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
String message = receiver.receiveBody(String.class);
</pre>
<p>You can use the <code>receiveBody</code> method to receive any type of message except <code>StreamMessage</code> and <code>Message</code>, as long as the body of the message can be assigned to a particular type.</p>
<p>An empty <code>Message</code> can be useful if you want to send a message that is simply a signal to the application. Some of the examples in <a href="jms-examples.htm#BNCGV">Chapter 46, "Java Message Service Examples,"</a> send an empty message after sending a series of text messages. For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
context.createProducer().send(dest, context.createMessage());
</pre>
<p>The consumer code can then interpret a non-text message as a signal that all the messages sent have now been received.</p>
<p>The examples in <a href="jms-examples.htm#BNCGV">Chapter 46, "Java Message Service Examples,"</a> use messages of type <code>TextMessage</code>, <code>MapMessage</code>, and <code>Message</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNCEY" name="BNCEY"></a><a id="JEETT01282" name="JEETT01282"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">45.3.8</span> <a id="sthref2307" name="sthref2307"></a><a id="sthref2308" name="sthref2308"></a><a id="sthref2309" name="sthref2309"></a>JMS Queue Browsers</h2>
<p>Messages sent to a queue remain in the queue until the message consumer for that queue consumes them. The JMS API provides a <code>QueueBrowser</code> object that allows you to browse the messages in the queue and display the header values for each message. To create a <code>QueueBrowser</code> object, use the <code>JMSContext.createBrowser</code> method. For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
QueueBrowser browser = context.createBrowser(queue);
</pre>
<p>See <a href="jms-examples002.htm#BNCFL">Browsing Messages on a Queue</a> for an example of using a <code>QueueBrowser</code> object.</p>
<p>The <code>createBrowser</code> method allows you to specify a message selector as a second argument when you create a <code>QueueBrowser</code>. For information on message selectors, see <a href="#BNCER">JMS Message Selectors</a>.</p>
<p>The JMS API provides no mechanism for browsing a topic. Messages usually disappear from a topic as soon as they appear: If there are no message consumers to consume them, the JMS provider removes them. Although durable subscriptions allow messages to remain on a topic while the message consumer is not active, JMS does not define any facility for examining them.</p>
</div>
<!-- class="sect2" -->
<a id="BNCEZ" name="BNCEZ"></a><a id="JEETT01283" name="JEETT01283"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">45.3.9</span> <a id="sthref2310" name="sthref2310"></a><a id="sthref2311" name="sthref2311"></a>JMS Exception Handling</h2>
<p>The root class for all checked exceptions in the JMS API is <code>JMSException</code>. The root cause for all unchecked exceptions in the JMS API is <code>JMSRuntimeException</code>.</p>
<p>Catching <code>JMSException</code> and <code>JMSRuntimeException</code> provides a generic way of handling all exceptions related to the JMS API.</p>
<p>The <code>JMSException</code> and <code>JMSRuntimeException</code> classes include the following subclasses, described in the API documentation:</p>
<ul>
<li>
<p><code>IllegalStateException</code>, <code>IllegalStateRuntimeException</code></p>
</li>
<li>
<p><code>InvalidClientIDException</code>, <code>InvalidClientIDRuntimeException</code></p>
</li>
<li>
<p><code>InvalidDestinationException</code>, <code>InvalidDestinationRuntimeException</code></p>
</li>
<li>
<p><code>InvalidSelectorException</code>, <code>InvalidSelectorRuntimeException</code></p>
</li>
<li>
<p><code>JMSSecurityException</code>, <code>JMSSecurityRuntimeException</code></p>
</li>
<li>
<p><code>MessageEOFException</code></p>
</li>
<li>
<p><code>MessageFormatException</code>, <code>MessageFormatRuntimeException</code></p>
</li>
<li>
<p><code>MessageNotReadableException</code></p>
</li>
<li>
<p><code>MessageNotWriteableException</code>, <code>MessageNotWriteableRuntimeException</code></p>
</li>
<li>
<p><code>ResourceAllocationException</code>, <code>ResourceAllocationRuntimeException</code></p>
</li>
<li>
<p><code>TransactionInProgressException</code>, <code>TransactionInProgressRuntimeException</code></p>
</li>
<li>
<p><code>TransactionRolledBackException</code>, <code>TransactionRolledBackRuntimeException</code></p>
</li>
</ul>
<p>All the examples in the tutorial catch and handle <code>JMSException</code> or <code>JMSRuntimeException</code> when it is appropriate to do so.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jms-concepts002.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jms-concepts004.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

