<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:1Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Creating and Using a Custom Converter" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Creating and Using a Custom Converter | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<ul style="list-style-type:none">
<li><a href="jsf-custom001.htm#BNAVH"><span class="secnum">15.1</span> Determining Whether You Need a Custom Component or Renderer</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom001.htm#BNAVI"><span class="secnum">15.1.1</span> When to Use a Custom Component</a></li>
<li><a href="jsf-custom001.htm#BNAVJ"><span class="secnum">15.1.2</span> When to Use a Custom Renderer</a></li>
<li><a href="jsf-custom001.htm#BNAVK"><span class="secnum">15.1.3</span> Component, Renderer, and Tag Combinations</a></li>
</ul>
</li>
<li><a href="jsf-custom002.htm#GLPCB"><span class="secnum">15.2</span> Understanding the Image Map Example</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom002.htm#GLPBD"><span class="secnum">15.2.1</span> Why Use JavaServer Faces Technology to Implement an Image Map?</a></li>
<li><a href="jsf-custom002.htm#GLPEM"><span class="secnum">15.2.2</span> Understanding the Rendered HTML</a></li>
<li><a href="jsf-custom002.htm#GLPCD"><span class="secnum">15.2.3</span> Understanding the Facelets Page</a></li>
<li><a href="jsf-custom002.htm#GLPBO"><span class="secnum">15.2.4</span> Configuring Model Data</a></li>
<li><a href="jsf-custom002.htm#GLPEL"><span class="secnum">15.2.5</span> Summary of the Image Map Application Classes</a></li>
</ul>
</li>
<li><a href="jsf-custom003.htm#BNAVT"><span class="secnum">15.3</span> Steps for Creating a Custom Component</a></li>
<li><a href="jsf-custom004.htm#BNAVU"><span class="secnum">15.4</span> Creating Custom Component Classes</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom004.htm#BNAVV"><span class="secnum">15.4.1</span> Specifying the Component Family</a></li>
<li><a href="jsf-custom004.htm#BNAVW"><span class="secnum">15.4.2</span> Performing Encoding</a></li>
<li><a href="jsf-custom004.htm#BNAVX"><span class="secnum">15.4.3</span> Performing Decoding</a></li>
<li><a href="jsf-custom004.htm#BNAVY"><span class="secnum">15.4.4</span> Enabling Component Properties to Accept Expressions</a></li>
<li><a href="jsf-custom004.htm#BNAVZ"><span class="secnum">15.4.5</span> Saving and Restoring State</a></li>
</ul>
</li>
<li><a href="jsf-custom005.htm#BNAWA"><span class="secnum">15.5</span> Delegating Rendering to a Renderer</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom005.htm#BNAWB"><span class="secnum">15.5.1</span> Creating the Renderer Class</a></li>
<li><a href="jsf-custom005.htm#BNAWC"><span class="secnum">15.5.2</span> Identifying the Renderer Type</a></li>
</ul>
</li>
<li><a href="jsf-custom006.htm#BNAUT"><span class="secnum">15.6</span> Implementing an Event Listener</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom006.htm#BNAUU"><span class="secnum">15.6.1</span> Implementing Value-Change Listeners</a></li>
<li><a href="jsf-custom006.htm#BNAUV"><span class="secnum">15.6.2</span> Implementing Action Listeners</a></li>
</ul>
</li>
<li><a href="jsf-custom007.htm#BNAWD"><span class="secnum">15.7</span> Handling Events for Custom Components</a></li>
<li><a href="jsf-custom008.htm#BNAWN"><span class="secnum">15.8</span> Defining the Custom Component Tag in a Tag Library Descriptor</a></li>
<li><a href="jsf-custom009.htm#BNATT"><span class="secnum">15.9</span> Using a Custom Component</a></li>
<li><div id="backgroundColor"><a href="jsf-custom010.htm#BNAUS"><span class="secnum">15.10</span> Creating and Using a Custom Converter</a><ul style="list-style-type:none">
<li><a href="jsf-custom010.htm#GLPHB"><span class="secnum">15.10.1</span> Creating a Custom Converter</a></li>
<li><a href="jsf-custom010.htm#BNATU"><span class="secnum">15.10.2</span> Using a Custom Converter</a></li>
</ul>
</div></li>
<li><a href="jsf-custom011.htm#BNAUW"><span class="secnum">15.11</span> Creating and Using a Custom Validator</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom011.htm#BNAUX"><span class="secnum">15.11.1</span> Implementing the Validator Interface</a></li>
<li><a href="jsf-custom011.htm#BNAUY"><span class="secnum">15.11.2</span> Specifying a Custom Tag</a></li>
<li><a href="jsf-custom011.htm#BNATV"><span class="secnum">15.11.3</span> Using a Custom Validator</a></li>
</ul>
</li>
<li><a href="jsf-custom012.htm#BNATG"><span class="secnum">15.12</span> Binding Component Values and Instances to Managed Bean Properties</a>
<ul style="list-style-type:none">
<li><a href="jsf-custom012.htm#BNATI"><span class="secnum">15.12.1</span> Binding a Component Value to a Property</a></li>
<li><a href="jsf-custom012.htm#BNATJ"><span class="secnum">15.12.2</span> Binding a Component Value to an Implicit Object</a></li>
<li><a href="jsf-custom012.htm#BNATL"><span class="secnum">15.12.3</span> Binding a Component Instance to a Bean Property</a></li>
</ul>
</li>
<li><a href="jsf-custom013.htm#BNATM"><span class="secnum">15.13</span> Binding Converters, Listeners, and Validators to Managed Bean Properties</a></li>
</ul>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jsf-custom009.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jsf-custom011.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BNAUS" name="BNAUS"></a><a id="JEETT00387" name="JEETT00387"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">15.10</span> <a id="sthref955" name="sthref955"></a>Creating and Using a Custom Converter</h1>
<p>A JavaServer Faces converter class converts strings to objects and objects to strings as required. Several standard converters are provided by JavaServer Faces for this purpose. See <a href="jsf-page-core001.htm#BNAST">Using the Standard Converters</a> for more information on these included converters.</p>
<p>As explained in <a href="jsf-intro004.htm#BNAQI">Conversion Model</a>, if the standard converters included with JavaServer Faces cannot perform the data conversion that you need, you can create a custom converter to perform this specialized conversion. This implementation, at a minimum, must define how to convert data both ways between the two views of the data described in <a href="jsf-intro004.htm#BNAQI">Conversion Model</a>.</p>
<p>All custom converters must implement the <code>javax.faces.convert.Converter</code> interface. This section explains how to implement this interface to perform a custom data conversion.</p>
<p>The Duke's Bookstore case study uses a custom <code>Converter</code> implementation, located in <span class="variable">tut-install</span><code>/examples/case-studies/dukes-bookstore/src/java/dukesbookstore/converters/CreditCardConverter.java</code>, to convert the data entered in the Credit Card Number field on the <code>bookcashier.xhtml</code> page. It strips blanks and hyphens from the text string and formats it so that a blank space separates every four characters.</p>
<p>Another common use case for a custom converter is in a list for a nonstandard object type. In the Duke's Tutoring case study, the <code>Student</code> and <code>Guardian</code> entities require a custom converter so that they can be converted to and from a <code>UISelectItems</code> input component.</p>
<a id="GLPHB" name="GLPHB"></a><a id="JEETT00997" name="JEETT00997"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">15.10.1</span> Creating a Custom Converter</h2>
<p>The <code>CreditCardConverter</code> custom converter class is created as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
@FacesConverter("ccno")
public class CreditCardConverter implements Converter {
    ...
}
</pre>
<p>The <code>@FacesConverter</code> annotation registers the custom converter class as a converter with the name of <code>ccno</code> with the JavaServer Faces implementation. Alternatively, you can register the converter with entries in the application configuration resource file, as shown in <a href="jsf-configure008.htm#BNAXE">Registering a Custom Converter</a>.</p>
<p><a id="sthref956" name="sthref956"></a><a id="sthref957" name="sthref957"></a><a id="sthref958" name="sthref958"></a><a id="sthref959" name="sthref959"></a>To define how the data is converted from the presentation view to the model view, the <code>Converter</code> implementation must implement the <code>getAsObject(FacesContext, UIComponent, String)</code> method from the <code>Converter</code> interface. Here is the implementation of this method from <code>CreditCardConverter</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Override
public Object getAsObject(FacesContext context,
        UIComponent component, String newValue)
        throws ConverterException {

    if (newValue.isEmpty()) {
        return null;
    }
    // Since this is only a String to String conversion,
    // this conversion does not throw ConverterException.
    
    String convertedValue = newValue.trim();
    if ( (convertedValue.contains("-")) || (convertedValue.contains(" "))) {
        char[] input = convertedValue.toCharArray();
        StringBuilder builder = new StringBuilder(input.length);
        for (int i = 0; i &lt; input.length; ++i) {
            if ((input[i] == '-') || (input[i] == ' ')) {
            } else {
                builder.append(input[i]);
            }
        }
        convertedValue = builder.toString();
    }
    return convertedValue;
}
</pre>
<p><a id="sthref960" name="sthref960"></a><a id="sthref961" name="sthref961"></a><a id="sthref962" name="sthref962"></a><a id="sthref963" name="sthref963"></a>During the Apply Request Values phase, when the components' <code>decode</code> methods are processed, the JavaServer Faces implementation looks up the component's local value in the request and calls the <code>getAsObject</code> method. When calling this method, the JavaServer Faces implementation passes in the current <code>FacesContext</code> instance, the component whose data needs conversion, and the local value as a <code>String</code>. The method then writes the local value to a character array, trims the hyphens and blanks, adds the rest of the characters to a <code>String</code>, and returns the <code>String</code>.</p>
<p><a id="sthref964" name="sthref964"></a><a id="sthref965" name="sthref965"></a><a id="sthref966" name="sthref966"></a>To define how the data is converted from the model view to the presentation view, the <code>Converter</code> implementation must implement the <code>getAsString(FacesContext, UIComponent, Object)</code> method from the <code>Converter</code> interface. Here is an implementation of this method:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Override
public String getAsString(FacesContext context,
        UIComponent component, Object value)
        throws ConverterException {
    
    String inputVal = null;
    if ( value == null ) {
        return "";
    }
    // value must be of a type that can be cast to a String.
    try {
        inputVal = (String)value;
    } catch (ClassCastException ce) {
        FacesMessage errMsg = new FacesMessage(CONVERSION_ERROR_MESSAGE_ID);
        FacesContext.getCurrentInstance().addMessage(null, errMsg);
        throw new ConverterException(errMsg.getSummary());
    }
    // insert spaces after every four characters for better
    // readability if they are not already present.
    char[] input = inputVal.toCharArray();
    StringBuilder builder = new StringBuilder(input.length + 3);
    for (int i = 0; i &lt; input.length; ++i) {
        if ((i % 4) == 0 &amp;&amp; (i != 0)) {
            if ({input[i] != ' ') || (input[i] != '-')){
                builder.append(" ");
                // if there are any "-"'s convert them to blanks.
            } else if (input[i] == '-') {
                builder.append(" ");
            }
         }
         builder.append(input[i]);
    }
    String convertedValue = builder.toString();
    return convertedValue;
}
</pre>
<p><a id="sthref967" name="sthref967"></a><a id="sthref968" name="sthref968"></a><a id="sthref969" name="sthref969"></a><a id="sthref970" name="sthref970"></a>During the Render Response phase, in which the components' <code>encode</code> methods are called, the JavaServer Faces implementation calls the <code>getAsString</code> method in order to generate the appropriate output. When the JavaServer Faces implementation calls this method, it passes in the current <code>FacesContext</code>, the <code>UIComponent</code> whose value needs to be converted, and the bean value to be converted. Because this converter does a <code>String</code>-to-<code>String</code> conversion, this method can cast the bean value to a <code>String</code>.</p>
<p>If the value cannot be converted to a <code>String</code>, the method throws an exception, passing an error message from the resource bundle that is registered with the application. <a href="jsf-configure005.htm#BNAXB">Registering Application Messages</a> explains how to register custom error messages with the application.</p>
<p>If the value can be converted to a <code>String</code>, the method reads the <code>String</code> to a character array and loops through the array, adding a space after every four characters.</p>
<p>You can also create a custom converter with a <code>@FacesConverter</code> annotation that specifies the <code>forClass</code> attribute, as shown in the following example from the Duke's Tutoring case study:</p>
<pre xml:space="preserve" class="oac_no_warn">
@FacesConverter(forClass=Guardian.class, value="guardian")
public class GuardianConverter extends EntityConverter implements Converter { ...
</pre>
<p>The <code>forClass</code> attribute registers the converter as the default converter for the <code>Guardian</code> class. Therefore, whenever that class is specified by a <code>value</code> attribute of an input component, the converter is invoked automatically.</p>
<p>A converter class can be a separate Java POJO class, as in the Duke's Bookstore case study. If it needs to access objects defined in a managed bean class, however, it can be a subclass of a JavaServer Faces managed bean, as in the <code>address-book</code> persistence example, in which the converters use an enterprise bean that is injected into the managed bean class.</p>
</div>
<!-- class="sect2" -->
<a id="BNATU" name="BNATU"></a><a id="JEETT00998" name="JEETT00998"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">15.10.2</span> <a id="sthref971" name="sthref971"></a><a id="sthref972" name="sthref972"></a><a id="sthref973" name="sthref973"></a>Using a Custom Converter</h2>
<p>To apply the data conversion performed by a custom converter to a particular component's value, you must do one of the following.</p>
<ul>
<li>
<p><a id="sthref974" name="sthref974"></a><a id="sthref975" name="sthref975"></a>Reference the converter from the component tag's <code>converter</code> attribute.</p>
</li>
<li>
<p><a id="sthref976" name="sthref976"></a><a id="sthref977" name="sthref977"></a>Nest an <code>f:converter</code> tag inside the component's tag and reference the custom converter from one of the <code>f:converter</code> tag's attributes.</p>
</li>
</ul>
<p>If you are using the component tag's <code>converter</code> attribute, this attribute must reference the <code>Converter</code> implementation's identifier or the fully-qualified class name of the converter. <a href="#BNAUS">Creating and Using a Custom Converter</a> explains how to implement a custom converter.</p>
<p>The identifier for the credit card converter class is <code>ccno</code>, the value specified in the <code>@FacesConverter</code> annotation:</p>
<pre xml:space="preserve" class="oac_no_warn">
@FacesConverter("ccno")
public class CreditCardConverter implements Converter {
    ...
</pre>
<p>Therefore, the <code>CreditCardConverter</code> instance can be registered on the <code>ccno</code> component as shown in the following example:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;h:inputText id="ccno"
             size="19"
             converter="ccno"
             value="#{cashierBean.creditCardNumber}"
             required="true"
             requiredMessage="#{bundle.ReqCreditCard}"&gt;
    ...
&lt;/h:inputText&gt;
</pre>
<p><a id="sthref978" name="sthref978"></a>By setting the <code>converter</code> attribute of a component's tag to the converter's identifier or its class name, you cause that component's local value to be automatically converted according to the rules specified in the <code>Converter</code> implementation.</p>
<p>Instead of referencing the converter from the component tag's <code>converter</code> attribute, you can reference the converter from an <code>f:converter</code> tag nested inside the component's tag. To reference the custom converter using the <code>f:converter</code> tag, you do one of the following.</p>
<ul>
<li>
<p>Set the <code>f:converter</code> tag's <code>converterId</code> attribute to the <code>Converter</code> implementation's identifier defined in the <code>@FacesConverter</code> annotation or in the application configuration resource file. This method is shown in <code>bookcashier.xhtml</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;h:inputText id="ccno" 
             size="19"
             value="#{cashierBean.creditCardNumber}"
             required="true"
             requiredMessage="#{bundle.ReqCreditCard}"&gt;
    &lt;f:converter converterId="ccno"/&gt;
    &lt;f:validateRegex 
       pattern="\d{16}|\d{4} \d{4} \d{4} \d{4}|\d{4}-\d{4}-\d{4}-\d{4}"/&gt;
&lt;/h:inputText&gt;
</pre></li>
<li>
<p>Bind the <code>Converter</code> implementation to a managed bean property using the <code>f:converter</code> tag's <code>binding</code> attribute, as described in <a href="jsf-custom013.htm#BNATM">Binding Converters, Listeners, and Validators to Managed Bean Properties</a>.</p>
</li>
</ul>
<p>The JavaServer Faces implementation calls the converter's <code>getAsObject</code> method to strip spaces and hyphens from the input value. The <code>getAsString</code> method is called when the <code>bookcashier.xhtml</code> page is redisplayed; this happens if the user orders more than $100 worth of books.</p>
<p>In the Duke's Tutoring case study, each converter is registered as the converter for a particular class. The converter is automatically invoked whenever that class is specified by a <code>value</code> attribute of an input component. In the following example, the <code>itemValue</code> attribute (highlighted in <span class="bold">bold</span>) calls the converter for the <code>Guardian</code> class:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;h:selectManyListbox id="selectGuardiansMenu"
                     title="#{bundle['action.add.guardian']}"
                     value="#{guardianManager.selectedGuardians}"
                     size="5"
                     converter="guardian"&gt;
    &lt;f:selectItems value="#{guardianManager.allGuardians}"
                   var="selectedGuardian"
                   itemLabel="#{selectedGuardian.name}"
                   <span class="bold">itemValue="#{selectedGuardian}"</span> /&gt;
&lt;/h:selectManyListbox&gt;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jsf-custom009.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jsf-custom011.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

