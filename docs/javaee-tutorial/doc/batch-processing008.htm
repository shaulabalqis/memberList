<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:5Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="The webserverlog Example Application" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:The webserverlog Example Application | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<ul style="list-style-type:none">
<li><a href="batch-processing001.htm#BCGJDEEH"><span class="secnum">55.1</span> Introduction to Batch Processing</a>
<ul style="list-style-type:none">
<li><a href="batch-processing001.htm#sthref2942"><span class="secnum">55.1.1</span> Steps in Batch Jobs</a></li>
<li><a href="batch-processing001.htm#sthref2945"><span class="secnum">55.1.2</span> Parallel Processing</a></li>
<li><a href="batch-processing001.htm#sthref2946"><span class="secnum">55.1.3</span> Status and Decision Elements</a></li>
<li><a href="batch-processing001.htm#sthref2949"><span class="secnum">55.1.4</span> Batch Framework Functionality</a></li>
</ul>
</li>
<li><a href="batch-processing002.htm#BCGGIBHA"><span class="secnum">55.2</span> Batch Processing in Java EE</a>
<ul style="list-style-type:none">
<li><a href="batch-processing002.htm#sthref2951"><span class="secnum">55.2.1</span> The Batch Processing Framework</a></li>
<li><a href="batch-processing002.htm#sthref2953"><span class="secnum">55.2.2</span> Creating Batch Applications</a></li>
<li><a href="batch-processing002.htm#sthref2955"><span class="secnum">55.2.3</span> Elements of a Batch Job</a></li>
<li><a href="batch-processing002.htm#sthref2957"><span class="secnum">55.2.4</span> Properties and Parameters</a></li>
<li><a href="batch-processing002.htm#sthref2959"><span class="secnum">55.2.5</span> Job Instances and Job Executions</a></li>
<li><a href="batch-processing002.htm#sthref2961"><span class="secnum">55.2.6</span> Batch and Exit Status</a></li>
</ul>
</li>
<li><a href="batch-processing003.htm#BCGHBJIG"><span class="secnum">55.3</span> Simple Use Case</a>
<ul style="list-style-type:none">
<li><a href="batch-processing003.htm#sthref2966"><span class="secnum">55.3.1</span> Chunk Step</a></li>
<li><a href="batch-processing003.htm#sthref2968"><span class="secnum">55.3.2</span> Task Step</a></li>
</ul>
</li>
<li><a href="batch-processing004.htm#BCGDDBBG"><span class="secnum">55.4</span> Using the Job Specification Language</a>
<ul style="list-style-type:none">
<li><a href="batch-processing004.htm#sthref2972"><span class="secnum">55.4.1</span> The job Element</a></li>
<li><a href="batch-processing004.htm#sthref2974"><span class="secnum">55.4.2</span> The step Element</a>
<ul style="list-style-type:none">
<li><a href="batch-processing004.htm#sthref2976"><span class="secnum">55.4.2.1</span> The chunk Element</a></li>
<li><a href="batch-processing004.htm#sthref2979"><span class="secnum">55.4.2.2</span> The batchlet Element</a></li>
<li><a href="batch-processing004.htm#sthref2981"><span class="secnum">55.4.2.3</span> The partition Element</a></li>
</ul>
</li>
<li><a href="batch-processing004.htm#sthref2983"><span class="secnum">55.4.3</span> The flow Element</a></li>
<li><a href="batch-processing004.htm#sthref2985"><span class="secnum">55.4.4</span> The split Element</a></li>
<li><a href="batch-processing004.htm#sthref2987"><span class="secnum">55.4.5</span> The decision Element</a></li>
</ul>
</li>
<li><a href="batch-processing005.htm#BCGHDHGH"><span class="secnum">55.5</span> Creating Batch Artifacts</a>
<ul style="list-style-type:none">
<li><a href="batch-processing005.htm#sthref2990"><span class="secnum">55.5.1</span> Batch Artifact Interfaces</a></li>
<li><a href="batch-processing005.htm#BCGIFJBB"><span class="secnum">55.5.2</span> Dependency Injection in Batch Artifacts</a></li>
<li><a href="batch-processing005.htm#BCGCJEEF"><span class="secnum">55.5.3</span> Using the Context Objects from the Batch Runtime</a></li>
</ul>
</li>
<li><a href="batch-processing006.htm#BCGCAHCB"><span class="secnum">55.6</span> Submitting Jobs to the Batch Runtime</a>
<ul style="list-style-type:none">
<li><a href="batch-processing006.htm#sthref2997"><span class="secnum">55.6.1</span> Starting a Job</a></li>
<li><a href="batch-processing006.htm#BCGIBGFC"><span class="secnum">55.6.2</span> Checking the Status of a Job</a></li>
<li><a href="batch-processing006.htm#sthref3000"><span class="secnum">55.6.3</span> Invoking the Batch Runtime in Your Application</a></li>
</ul>
</li>
<li><a href="batch-processing007.htm#BCGBBGJI"><span class="secnum">55.7</span> Packaging Batch Applications</a></li>
<li><div id="backgroundColor"><a href="batch-processing008.htm#BCGJHEHJ"><span class="secnum">55.8</span> The webserverlog Example Application</a><ul style="list-style-type:none">
<li><a href="batch-processing008.htm#sthref3004"><span class="secnum">55.8.1</span> Architecture of the webserverlog Example Application</a>
<ul style="list-style-type:none">
<li><a href="batch-processing008.htm#sthref3005"><span class="secnum">55.8.1.1</span> The Job Definition File</a></li>
<li><a href="batch-processing008.htm#sthref3006"><span class="secnum">55.8.1.2</span> The LogLine and LogFilteredLine Items</a></li>
<li><a href="batch-processing008.htm#sthref3007"><span class="secnum">55.8.1.3</span> The Chunk Step Batch Artifacts</a></li>
<li><a href="batch-processing008.htm#BCGCCFAC"><span class="secnum">55.8.1.4</span> The Listener Batch Artifacts</a></li>
<li><a href="batch-processing008.htm#sthref3008"><span class="secnum">55.8.1.5</span> The Task Step Batch Artifact</a></li>
<li><a href="batch-processing008.htm#sthref3009"><span class="secnum">55.8.1.6</span> The JavaServer Faces Pages</a></li>
<li><a href="batch-processing008.htm#sthref3010"><span class="secnum">55.8.1.7</span> The Managed Bean</a></li>
</ul>
</li>
<li><a href="batch-processing008.htm#sthref3011"><span class="secnum">55.8.2</span> Running the webserverlog Example Application</a>
<ul style="list-style-type:none">
<li><a href="batch-processing008.htm#sthref3012"><span class="secnum">55.8.2.1</span> To Run the webserverlog Example Application Using NetBeans IDE</a></li>
<li><a href="batch-processing008.htm#sthref3013"><span class="secnum">55.8.2.2</span> To Run the webserverlog Example Application Using Maven</a></li>
</ul>
</li>
</ul>
</div></li>
<li><a href="batch-processing009.htm#BCGFCACD"><span class="secnum">55.9</span> The phonebilling Example Application</a>
<ul style="list-style-type:none">
<li><a href="batch-processing009.htm#sthref3016"><span class="secnum">55.9.1</span> Architecture of the phonebilling Example Application</a>
<ul style="list-style-type:none">
<li><a href="batch-processing009.htm#sthref3017"><span class="secnum">55.9.1.1</span> The Job Definition File</a></li>
<li><a href="batch-processing009.htm#sthref3018"><span class="secnum">55.9.1.2</span> The CallRecord and PhoneBill Entities</a></li>
<li><a href="batch-processing009.htm#sthref3019"><span class="secnum">55.9.1.3</span> The Call Records Chunk Step</a></li>
<li><a href="batch-processing009.htm#BCGGGAHB"><span class="secnum">55.9.1.4</span> The Phone Billing Chunk Step</a></li>
<li><a href="batch-processing009.htm#sthref3020"><span class="secnum">55.9.1.5</span> The JavaServer Faces Pages</a></li>
<li><a href="batch-processing009.htm#sthref3021"><span class="secnum">55.9.1.6</span> The Managed Bean</a></li>
</ul>
</li>
<li><a href="batch-processing009.htm#sthref3022"><span class="secnum">55.9.2</span> Running the phonebilling Example Application</a>
<ul style="list-style-type:none">
<li><a href="batch-processing009.htm#sthref3023"><span class="secnum">55.9.2.1</span> To Run the phonebilling Example Application Using NetBeans IDE</a></li>
<li><a href="batch-processing009.htm#sthref3024"><span class="secnum">55.9.2.2</span> To Run the phonebilling Example Application Using Maven</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="batch-processing010.htm#BCGHCHAJ"><span class="secnum">55.10</span> Further Information about Batch Processing</a></li>
</ul>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="batch-processing007.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="batch-processing009.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BCGJHEHJ" name="BCGJHEHJ"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h1 class="sect1"><span class="secnum">55.8</span> <a id="sthref3002" name="sthref3002"></a><a id="sthref3003" name="sthref3003"></a>The webserverlog Example Application</h1>
<p>The <code>webserverlog</code> example application, located in the <span class="variable">tut-install</span><code>/examples/batch/webserverlog/</code> directory, demonstrates how to use the batch framework in Java EE to analyze the log file from a web server. This example application reads a log file and finds what percentage of page views from tablet devices are product sales.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref3004" name="sthref3004"></a>
<h2 class="sect2"><span class="secnum">55.8.1</span> Architecture of the webserverlog Example Application</h2>
<p>The <code>webserverlog</code> example application consists of the following elements.</p>
<ul>
<li>
<p>A job definition file (<code>webserverlog.xml</code>) that uses the Job Specification Language (JSL) to define a batch job with a chunk step and a task step. The chunk step acts as a filter, and the task step calculates statistics on the remaining entries.</p>
</li>
<li>
<p>A log file (<code>log1.txt</code>) that serves as input data to the batch job.</p>
</li>
<li>
<p>Two Java classes (<code>LogLine</code> and <code>LogFilteredLine</code>) that represent input items and output items for the chunk step.</p>
</li>
<li>
<p>Three batch artifacts (<code>LogLineReader</code>, <code>LogLineProcessor</code>, and <code>LogFilteredLineWriter</code>) that implement the chunk step of the application. This step reads items from the web server log file, filters them by the web browser used by the client, and writes the results to a text file.</p>
</li>
<li>
<p>Two batch artifacts (<code>InfoJobListener</code> and <code>InfoItemProcessListener</code>) that implement two simple listeners.</p>
</li>
<li>
<p>A batch artifact (<code>MobileBatchlet.java</code>) that calculates statistics on the filtered items.</p>
</li>
<li>
<p>Two Facelets pages (<code>index.xhtml</code> and <code>jobstarted.xhtml</code>) that provide the front end of the batch application. The first page shows the log file that will be processed by the batch job, and the second page enables the user to check on the status of the job and shows the results.</p>
</li>
<li>
<p>A managed bean (<code>JsfBean</code>) that is accessed from the Facelets pages. The bean submits the job to the batch runtime, checks on the status of the job, and reads the results from a text file.</p>
</li>
</ul>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref3005" name="sthref3005"></a>
<h3 class="sect3"><span class="secnum">55.8.1.1</span> The Job Definition File</h3>
<p>The <code>webserverlog.xml</code> job definition file is located in the <code>WEB-INF/classes/META-INF/batch-jobs/</code> directory. The file specifies seven job-level properties and two steps:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;job id="webserverlog" xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
     version="1.0"&gt;
    &lt;properties&gt;
        &lt;property name="log_file_name" value="log1.txt"/&gt;
        &lt;property name="filtered_file_name" value="filtered1.txt"/&gt;
        &lt;property name="num_browsers" value="2"/&gt;
        &lt;property name="browser_1" value="Tablet Browser D"/&gt;
        &lt;property name="browser_2" value="Tablet Browser E"/&gt;
        &lt;property name="buy_page" value="/auth/buy.html"/&gt;
        &lt;property name="out_file_name" value="result1.txt"/&gt;
    &lt;/properties&gt;
    &lt;listeners&gt;
        &lt;listener ref="InfoJobListener"/&gt;
    &lt;/listeners&gt;
    &lt;step id="mobilefilter" next="mobileanalyzer"&gt; ... &lt;/step&gt;
    &lt;step id="mobileanalyzer"&gt; ... &lt;/step&gt;
&lt;/job&gt;
</pre>
<p>The first step is defined as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;step id="mobilefilter" next="mobileanalyzer"&gt;
    &lt;listeners&gt;
        &lt;listener ref="InfoItemProcessListeners"/&gt;
    &lt;/listeners&gt;
    &lt;chunk checkpoint-policy="item" item-count="10"&gt;
        &lt;reader ref="LogLineReader"&gt;&lt;/reader&gt;
        &lt;processor ref="LogLineProcessor"&gt;&lt;/processor&gt;
        &lt;writer ref="LogFilteredLineWriter"&gt;&lt;/writer&gt;
    &lt;/chunk&gt;
&lt;/step&gt;
</pre>
<p>This step is a normal chunk step that specifies the batch artifacts that implement each phase of the step. The batch artifact names are not fully qualified class names, so the batch artifacts are CDI beans annotated with <code>@Named</code>.</p>
<p>The second step is defined as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;step id="mobileanalyzer"&gt;
    &lt;batchlet ref="MobileBatchlet"&gt;&lt;/batchlet&gt;
    &lt;end on="COMPLETED"/&gt;
&lt;/step&gt;
</pre>
<p>This step is a task step that specifies the batch artifact that implements it. This is the last step of the job.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref3006" name="sthref3006"></a>
<h3 class="sect3"><span class="secnum">55.8.1.2</span> The LogLine and LogFilteredLine Items</h3>
<p>The <code>LogLine</code> class represents entries in the web server log file and it is defined as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
public class LogLine {
    private final String datetime;
    private final String ipaddr;
    private final String browser;
    private final String url;

    /* ... Constructor, getters, and setters ... */
}
</pre>
<p>The <code>LogFileteredLine</code> class is similar to this class but only has two fields: the IP address of the client and the URL.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref3007" name="sthref3007"></a>
<h3 class="sect3"><span class="secnum">55.8.1.3</span> The Chunk Step Batch Artifacts</h3>
<p>The first step is composed of the <code>LogLineReader</code>, <code>LogLineProcessor</code>, and <code>LogFilteredLineWriter</code> batch artifacts.</p>
<p>The <code>LogLineReader</code> artifact reads records from the web server log file:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Dependent
@Named("LogLineReader")
public class LogLineReader implements ItemReader {
    private ItemNumberCheckpoint checkpoint;
    private String fileName;
    private BufferedReader breader;
    @Inject
    private JobContext jobCtx;
    
    public LogLineReader() { }

    /* ... Override the open, close, readItem, and 
     *     checkpointInfo methods ... */
}
</pre>
<p>The <code>open</code> method reads the <code>log_file_name</code> property and opens the log file with a buffered reader. In this example, the log file has been included with the application under <code>webserverlog/WEB-INF/classes/log1.txt</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
fileName = jobCtx.getProperties().getProperty("log_file_name");
ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
InputStream iStream = classLoader.getResourceAsStream(fileName);
breader = new BufferedReader(new InputStreamReader(iStream));
</pre>
<p>If a checkpoint object is provided, the <code>open</code> method advances the reader up to the last checkpoint. Otherwise, this method creates a new checkpoint object. The checkpoint object keeps track of the line number from the last committed chunk.</p>
<p>The <code>readItem</code> method returns a new <code>LogLine</code> object or null at the end of the log file:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Override
public Object readItem() throws Exception {
    String entry = breader.readLine();
    if (entry != null) {
        checkpoint.nextLine();
        return new LogLine(entry);
    } else {
        return null;
    }
}
</pre>
<p>The <code>LogLineProcessor</code> artifact obtains a list of browsers from the job properties and filters the log entries according to the list:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Override
public Object processItem(Object item) {
    /* Obtain a list of browsers we are interested in */
    if (nbrowsers == 0) {
        Properties props = jobCtx.getProperties();
        nbrowsers = Integer.parseInt(props.getProperty("num_browsers"));
        browsers = new String[nbrowsers];
        for (int i = 1; i &lt; nbrowsers + 1; i++)
            browsers[i - 1] = props.getProperty("browser_" + i);
    }
    
    LogLine logline = (LogLine) item;
    /* Filter for only the mobile/tablet browsers as specified */
    for (int i = 0; i &lt; nbrowsers; i++) {
        if (logline.getBrowser().equals(browsers[i])) {
            return new LogFilteredLine(logline);
        }
    }
    return null;
}
</pre>
<p>The <code>LogFilteredLineWriter</code> artifact reads the name of the output file from the job properties. The <code>open</code> method opens the file for writing. If a checkpoint object is provided, the artifact continues writing at the end of the file; otherwise, it overwrites the file if it exists. The <code>writeItems</code> method writes filtered items to the output file:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Override
public void writeItems(List&lt;Object&gt; items) throws Exception {
    /* Write the filtered lines to the output file */
    for (int i = 0; i &lt; items.size(); i++) {
        LogFilteredLine filtLine = (LogFilteredLine) items.get(i);
        bwriter.write(filtLine.toString());
        bwriter.newLine();
    }
}
</pre></div>
<!-- class="sect3" -->
<a id="BCGCCFAC" name="BCGCCFAC"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3"><span class="secnum">55.8.1.4</span> The Listener Batch Artifacts</h3>
<p>The <code>InfoJobListener</code> batch artifact implements a simple listener that writes log messages when the job starts and when it ends:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Dependent
@Named("InfoJobListener")
public class InfoJobListener implements JobListener {
    ...
    @Override
    public void beforeJob() throws Exception {
        logger.log(Level.INFO, "The job is starting");
    }
 
    @Override
    public void afterJob() throws Exception { ... }
}
</pre>
<p>The <code>InfoItemProcessListener</code> batch artifact implements the <code>ItemProcessListener</code> interface for chunk steps:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Dependent
@Named("InfoItemProcessListener")
public class InfoItemProcessListener implements ItemProcessListener {
    ...
    @Override
    public void beforeProcess(Object o) throws Exception {
        LogLine logline = (LogLine) o;
        llogger.log(Level.INFO, "Processing entry {0}", logline);
    }
    ...
}
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref3008" name="sthref3008"></a>
<h3 class="sect3"><span class="secnum">55.8.1.5</span> The Task Step Batch Artifact</h3>
<p>The task step is implemented by the <code>MobileBatchlet</code> artifact, which computes what percentage of the filtered log entries are purchases:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Override
public String process() throws Exception {
    /* Get properties from the job definition file */
    ...
    /* Count from the output of the previous chunk step */
    breader = new BufferedReader(new FileReader(fileName));
    String line = breader.readLine();
    while (line != null) {
        String[] lineSplit = line.split(", ");
        if (buyPage.compareTo(lineSplit[1]) == 0)
            pageVisits++;
        totalVisits++;
        line = breader.readLine();
    }
    breader.close();
    /* Write the result */
    ...
}
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref3009" name="sthref3009"></a>
<h3 class="sect3"><span class="secnum">55.8.1.6</span> The JavaServer Faces Pages</h3>
<p>The <code>index.xhtml</code> page contains a text area that shows the web server log. The page provides a button for the user to submit the batch job and navigate to the next page:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;body&gt;
    ...
    &lt;textarea cols="90" rows="25" 
              readonly="true"&gt;#{jsfBean.getInputLog()}&lt;/textarea&gt;
    &lt;p&gt; &lt;/p&gt;
    &lt;h:form&gt;
        &lt;h:commandButton value="Start Batch Job" 
                         action="#{jsfBean.startBatchJob()}" /&gt;
    &lt;/h:form&gt;
&lt;/body&gt;
</pre>
<p>This page calls the methods of the managed bean to show the log file and submit the batch job.</p>
<p>The <code>jobstarted.xhtml</code> page provides a button to check the current status of the batch job and displays the results when the job finishes:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;p&gt;Current Status of the Job: &lt;b&gt;#{jsfBean.jobStatus}&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;#{jsfBean.showResults()}&lt;/p&gt;
&lt;h:form&gt;
    &lt;h:commandButton value="Check Status" 
                     action="jobstarted"
                     rendered="#{jsfBean.completed==false}" /&gt;
&lt;/h:form&gt;
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref3010" name="sthref3010"></a>
<h3 class="sect3"><span class="secnum">55.8.1.7</span> The Managed Bean</h3>
<p>The <code>JsfBean</code> managed bean submits the job to the batch runtime, checks on the status of the job, and reads the results from a text file.</p>
<p>The <code>startBatchJob</code> method submits the job to the batch runtime:</p>
<pre xml:space="preserve" class="oac_no_warn">
/* Submit the batch job to the batch runtime.
 * JSF Navigation method (return the name of the next page) */
public String startBatchJob() {
    jobOperator = BatchRuntime.getJobOperator();
    execID = jobOperator.start("webserverlog", null);
    return "jobstarted";
}
</pre>
<p>The <code>getJobStatus</code> method checks the status of the job:</p>
<pre xml:space="preserve" class="oac_no_warn">
/* Get the status of the job from the batch runtime */
public String getJobStatus() {
    return jobOperator.getJobExecution(execID).getBatchStatus().toString();
}
</pre>
<p>The <code>showResults</code> method reads the results from a text file.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref3011" name="sthref3011"></a>
<h2 class="sect2"><span class="secnum">55.8.2</span> Running the webserverlog Example Application</h2>
<p>You can use either NetBeans IDE or Maven to build, package, deploy, and run the <code>webserverlog</code> example application.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref3012" name="sthref3012"></a>
<h3 class="sect3"><span class="secnum">55.8.2.1</span> To Run the webserverlog Example Application Using NetBeans IDE</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the Open Project dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="italic">tut-install</span>/examples/batch
</pre></li>
<li>
<p>Select the <code>webserverlog</code> folder.</p>
</li>
<li>
<p>Click <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>webserverlog</code> project and select <span class="gui-object-action">Run</span>.</p>
<p>This command builds and packages the application into a WAR file, <code>webserverlog.war</code>, located in the <code>target/</code> directory; deploys it to the server; and launches a web browser window at the following URL:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/webserverlog/
</pre></li>
</ol>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref3013" name="sthref3013"></a>
<h3 class="sect3"><span class="secnum">55.8.2.2</span> To Run the webserverlog Example Application Using Maven</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>In a terminal window, go to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="italic">tut-install</span>/examples/batch/webserverlog/
</pre></li>
<li>
<p>Enter the following command to deploy the application:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre></li>
<li>
<p>Open a web browser window at the following URL:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/webserverlog/
</pre></li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="batch-processing007.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="batch-processing009.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

