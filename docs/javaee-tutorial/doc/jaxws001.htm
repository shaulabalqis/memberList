<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:2Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Creating a Simple Web Service and Clients with JAX-WS" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Creating a Simple Web Service and Clients with JAX-WS | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<ul style="list-style-type:none">
<li><div id="backgroundColor"><a href="jaxws001.htm#BNAYN"><span class="secnum">28.1</span> Creating a Simple Web Service and Clients with JAX-WS</a><ul style="list-style-type:none">
<li><a href="jaxws001.htm#BNAYP"><span class="secnum">28.1.1</span> Requirements of a JAX-WS Endpoint</a></li>
<li><a href="jaxws001.htm#BNAYQ"><span class="secnum">28.1.2</span> Coding the Service Endpoint Implementation Class</a></li>
<li><a href="jaxws001.htm#BNAYR"><span class="secnum">28.1.3</span> Building, Packaging, and Deploying the Service</a>
<ul style="list-style-type:none">
<li><a href="jaxws001.htm#BNAYS"><span class="secnum">28.1.3.1</span> To Build, Package, and Deploy the Service Using NetBeans IDE</a></li>
<li><a href="jaxws001.htm#BNAYT"><span class="secnum">28.1.3.2</span> To Build, Package, and Deploy the Service Using Maven</a></li>
</ul>
</li>
<li><a href="jaxws001.htm#GKAJL"><span class="secnum">28.1.4</span> Testing the Methods of a Web Service Endpoint</a>
<ul style="list-style-type:none">
<li><a href="jaxws001.htm#BNAYW"><span class="secnum">28.1.4.1</span> To Test the Service without a Client</a></li>
</ul>
</li>
<li><a href="jaxws001.htm#BNAYX"><span class="secnum">28.1.5</span> A Simple JAX-WS Application Client</a>
<ul style="list-style-type:none">
<li><a href="jaxws001.htm#BNAYY"><span class="secnum">28.1.5.1</span> Coding the Application Client</a></li>
<li><a href="jaxws001.htm#BNAYZ"><span class="secnum">28.1.5.2</span> Running the Application Client</a></li>
</ul>
</li>
<li><a href="jaxws001.htm#GJYGB"><span class="secnum">28.1.6</span> A Simple JAX-WS Web Client</a>
<ul style="list-style-type:none">
<li><a href="jaxws001.htm#GJYFL"><span class="secnum">28.1.6.1</span> Coding the Servlet</a></li>
<li><a href="jaxws001.htm#GJYGE"><span class="secnum">28.1.6.2</span> Running the Web Client</a></li>
</ul>
</li>
</ul>
</div></li>
<li><a href="jaxws002.htm#BNAZC"><span class="secnum">28.2</span> Types Supported by JAX-WS</a>
<ul style="list-style-type:none">
<li><a href="jaxws002.htm#BNAZT"><span class="secnum">28.2.1</span> Schema-to-Java Mapping</a></li>
<li><a href="jaxws002.htm#BNAZW"><span class="secnum">28.2.2</span> Java-to-Schema Mapping</a></li>
</ul>
</li>
<li><a href="jaxws003.htm#BNAZD"><span class="secnum">28.3</span> Web Services Interoperability and JAX-WS</a></li>
<li><a href="jaxws004.htm#BNAZE"><span class="secnum">28.4</span> Further Information about JAX-WS</a></li>
</ul>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jaxws.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jaxws002.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BNAYN" name="BNAYN"></a><a id="JEETT00423" name="JEETT00423"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">28.1</span> <a id="sthref1465" name="sthref1465"></a><a id="sthref1466" name="sthref1466"></a><a id="sthref1467" name="sthref1467"></a>Creating a Simple Web Service and Clients with JAX-WS</h1>
<p>This section shows how to build and deploy a simple web service and two clients: an application client and a web client. The source code for the service is in the <span class="variable">tut-install</span><code>/examples/jaxws/helloservice-war/</code> directory, and the clients are in the <span class="variable">tut-install</span><code>/examples/jaxws/hello-appclient/</code> and <span class="variable">tut-install</span><code>/examples/jaxws/hello-webclient/</code> directories.</p>
<p><a href="#BNAYO">Figure 28-1</a> illustrates how JAX-WS technology manages communication between a web service and a client.</p>
<div class="figure"><a id="BNAYO" name="BNAYO"></a><a id="JEETT00021" name="JEETT00021"></a>
<p class="titleinfigure">Figure 28-1 Communication between a JAX-WS Web Service and a Client</p>
<img src="img/jeett_dt_019.png" alt="Description of Figure 28-1 follows" title="Description of Figure 28-1 follows" longdesc="img_text/jeett_dt_019.htm" /><br />
<a id="sthref1468" name="sthref1468" href="img_text/jeett_dt_019.htm">Description of "Figure 28-1 Communication between a JAX-WS Web Service and a Client"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a id="sthref1469" name="sthref1469"></a>The starting point for developing a JAX-WS web service is a Java class annotated with the <code>javax.jws.WebService</code> annotation. The <code>@WebService</code> annotation defines the class as a web service endpoint.</p>
<p><a id="sthref1470" name="sthref1470"></a>A <span class="glossaryterm">service endpoint interface</span> or <span class="glossaryterm">service endpoint implementation</span> (SEI) is a Java interface or class, respectively, that declares the methods that a client can invoke on the service. An interface is not required when building a JAX-WS endpoint. The web service implementation class implicitly defines an SEI.</p>
<p>You may specify an explicit interface by adding the <code>endpointInterface</code> element to the <code>@WebService</code> annotation in the implementation class. You must then provide an interface that defines the public methods made available in the endpoint implementation class.</p>
<p>The basic steps for creating a web service and client are as follows.</p>
<ol>
<li>
<p>Code the implementation class.</p>
</li>
<li>
<p>Compile the implementation class.</p>
</li>
<li>
<p>Package the files into a WAR file.</p>
</li>
<li>
<p>Deploy the WAR file. The web service artifacts, which are used to communicate with clients, are generated by GlassFish Server during deployment.</p>
</li>
<li>
<p>Code the client class.</p>
</li>
<li>
<p>Use the <code>wsimport</code> Maven goal to generate and compile the web service artifacts needed to connect to the service.</p>
</li>
<li>
<p>Compile the client class.</p>
</li>
<li>
<p>Run the client.</p>
</li>
</ol>
<p>If you use NetBeans IDE to create a service and client, the IDE performs the <code>wsimport</code> task for you.</p>
<p>The sections that follow cover these steps in greater detail.</p>
<a id="BNAYP" name="BNAYP"></a><a id="JEETT01044" name="JEETT01044"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">28.1.1</span> Requirements of a JAX-WS Endpoint<a id="sthref1471" name="sthref1471"></a></h2>
<p>JAX-WS endpoints must follow these requirements.</p>
<ul>
<li>
<p>The implementing class must be annotated with either the <code>javax.jws.WebService</code> or the <code>javax.jws.WebServiceProvider</code> annotation.</p>
</li>
<li>
<p>The implementing class may explicitly reference an SEI through the <code>endpointInterface</code> element of the <code>@WebService</code> annotation but is not required to do so. If no <code>endpointInterface</code> is specified in <code>@WebService</code>, an SEI is implicitly defined for the implementing class.</p>
</li>
<li>
<p>The business methods of the implementing class must be public and must not be declared <code>static</code> or <code>final</code>.</p>
</li>
<li>
<p>Business methods that are exposed to web service clients must be annotated with <code>javax.jws.WebMethod</code>.</p>
</li>
<li>
<p>Business methods that are exposed to web service clients must have JAXB-compatible parameters and return types. See the list of JAXB default data type bindings in <a href="jaxws002.htm#BNAZC">Types Supported by JAX-WS</a>.</p>
</li>
<li>
<p>The implementing class must not be declared <code>final</code> and must not be <code>abstract</code>.</p>
</li>
<li>
<p>The implementing class must have a default public constructor.</p>
</li>
<li>
<p>The implementing class must not define the <code>finalize</code> method.</p>
</li>
<li>
<p>The implementing class may use the <code>javax.annotation.PostConstruct</code> or the <code>javax.annotation.PreDestroy</code> annotations on its methods for lifecycle event callbacks.</p>
<p>The <code>@PostConstruct</code> method is called by the container before the implementing class begins responding to web service clients.</p>
<p>The <code>@PreDestroy</code> method is called by the container before the endpoint is removed from operation.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BNAYQ" name="BNAYQ"></a><a id="JEETT01045" name="JEETT01045"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">28.1.2</span> Coding the Service Endpoint Implementation Class</h2>
<p>In this example, the implementation class, <code>Hello</code>, is annotated as a web service endpoint using the <code>@WebService</code> annotation. <code>Hello</code> declares a single method named <code>sayHello</code>, annotated with the <code>@WebMethod</code> annotation, which exposes the annotated method to web service clients. The <code>sayHello</code> method returns a greeting to the client, using the name passed to it to compose the greeting. The implementation class also must define a default, public, no-argument constructor.</p>
<pre xml:space="preserve" class="oac_no_warn">
package javaeetutorial.helloservice;

import javax.jws.WebService;
import javax.jws.WebMethod;

@WebService
public class Hello {
    private final String message = "Hello, ";

    public void Hello() {
    }

    @WebMethod
    public String sayHello(String name) {
        return message + name + ".";
    }
}
</pre></div>
<!-- class="sect2" -->
<a id="BNAYR" name="BNAYR"></a><a id="JEETT01046" name="JEETT01046"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">28.1.3</span> Building, Packaging, and Deploying the Service</h2>
<p>You can use either NetBeans IDE or Maven to build, package, and deploy the <code>helloservice-war</code> application.</p>
<a id="BNAYS" name="BNAYS"></a><a id="JEETT00179" name="JEETT00179"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">28.1.3.1</span> To Build, Package, and Deploy the Service Using NetBeans IDE</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/jaxws
</pre></li>
<li>
<p>Select the <code>helloservice-war</code> folder.</p>
</li>
<li>
<p>Click <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>helloservice-war</code> project and select <span class="gui-object-action">Run</span>.</p>
<p>This command builds and packages the application into a WAR file, <code>helloservice-war.war</code>, located in <span class="variable">tut-install</span><code>/examples/jaxws/helloservice-war/target/</code>, and deploys this WAR file to your GlassFish Server instance. It also opens the web service test interface at the URL shown in <a href="#BNAYW">To Test the Service without a Client</a>.</p>
</li>
</ol>
<a id="sthref1472" name="sthref1472"></a>
<p class="subhead2">Next Steps</p>
<p>You can view the WSDL file of the deployed service by requesting the URL <code>http://localhost:8080/helloservice-war/HelloService?wsdl</code> in a web browser. Now you are ready to create a client that accesses this service.</p>
</div>
<!-- class="sect3" -->
<a id="BNAYT" name="BNAYT"></a><a id="JEETT00180" name="JEETT00180"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">28.1.3.2</span> To Build, Package, and Deploy the Service Using Maven</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>In a terminal window, go to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/jaxws/helloservice-war/
</pre></li>
<li>
<p>Enter the following command:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre>
<p>This command builds and packages the application into a WAR file, <code>helloservice-war.war</code>, located in the <code>target</code> directory, and then deploys the WAR to GlassFish Server.</p>
</li>
</ol>
<a id="sthref1473" name="sthref1473"></a>
<p class="subhead2">Next Steps</p>
<p>You can view the WSDL file of the deployed service by requesting the URL <code>http://localhost:8080/helloservice-war/HelloService?wsdl</code> in a web browser. Now you are ready to create a client that accesses this service.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="GKAJL" name="GKAJL"></a><a id="JEETT01047" name="JEETT01047"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">28.1.4</span> Testing the Methods of a Web Service Endpoint</h2>
<p>GlassFish Server allows you to test the methods of a web service endpoint.</p>
<a id="BNAYW" name="BNAYW"></a><a id="JEETT00181" name="JEETT00181"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">28.1.4.1</span> To Test the Service without a Client</h3>
<p>To test the <code>sayHello</code> method of <code>HelloService</code>, follow these steps.</p>
<ol>
<li>
<p>Open the web service test interface by entering the following URL in a web browser:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/helloservice-war/HelloService?Tester
</pre></li>
<li>
<p>Under <span class="gui-object-action">Methods</span>, enter a name as the parameter to the <code>sayHello</code> method.</p>
</li>
<li>
<p>Click <span class="gui-object-action">sayHello</span>.</p>
<p>This takes you to the <code>sayHello</code> Method invocation page.</p>
<p>Under <span class="gui-object-action">Method returned</span>, you'll see the response from the endpoint.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNAYX" name="BNAYX"></a><a id="JEETT01048" name="JEETT01048"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">28.1.5</span> A Simple JAX-WS Application Client</h2>
<p>The <code>HelloAppClient</code> class is a stand-alone application client that accesses the <code>sayHello</code> method of <code>HelloService</code>. This call is made through a port, a local object that acts as a proxy for the remote service. The port is created at development time by the <code>wsimport</code> Maven goal, which generates JAX-WS portable artifacts based on a WSDL file.</p>
<a id="BNAYY" name="BNAYY"></a><a id="JEETT00634" name="JEETT00634"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">28.1.5.1</span> Coding the Application Client</h3>
<p>When invoking the remote methods on the port, the client performs these steps.</p>
<ol>
<li>
<p>It uses the generated <code>helloservice.endpoint.HelloService</code> class, which represents the service at the URI of the deployed service's WSDL file:</p>
<pre xml:space="preserve" class="oac_no_warn">
import javaeetutorial.helloservice.endpoint.HelloService;
import javax.xml.ws.WebServiceRef;

public class HelloAppClient {
    @WebServiceRef(wsdlLocation = 
      "http://localhost:8080/helloservice-war/HelloService?WSDL")
    private static HelloService service;
</pre></li>
<li>
<p>It retrieves a proxy to the service, also known as a port, by invoking <code>getHelloPort</code> on the service:</p>
<pre xml:space="preserve" class="oac_no_warn">
javaeetutorial.helloservice.endpoint.Hello port = service.getHelloPort();
</pre>
<p>The port implements the SEI defined by the service.</p>
</li>
<li>
<p>It invokes the port's <code>sayHello</code> method, passing a string to the service:</p>
<pre xml:space="preserve" class="oac_no_warn">
return port.sayHello(arg0);
</pre></li>
</ol>
<p>Here is the full source of <code>HelloAppClient.java</code>, which is located in the <span class="variable">tut-install</span><code>/examples/jaxws/hello-appclient/src/main/java/javaeetutorial/hello/appclient/</code> directory:</p>
<pre xml:space="preserve" class="oac_no_warn">
package javaeetutorial.hello.appclient;

import javaeetutorial.helloservice.endpoint.HelloService;
import javax.xml.ws.WebServiceRef;

public class HelloAppClient {
    @WebServiceRef(wsdlLocation = 
      "http://localhost:8080/helloservice-war/HelloService?WSDL")
    private static HelloService service;

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
       System.out.println(sayHello("world"));
    }

    private static String sayHello(java.lang.String arg0) {
        javaeetutorial.helloservice.endpoint.Hello port = 
                service.getHelloPort();
        return port.sayHello(arg0);
    }
}
</pre></div>
<!-- class="sect3" -->
<a id="BNAYZ" name="BNAYZ"></a><a id="JEETT00635" name="JEETT00635"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">28.1.5.2</span> Running the Application Client</h3>
<p>You can use either NetBeans IDE or Maven to build, package, deploy, and run the <code>hello-appclient</code> application. To build the client, you must first have deployed <code>helloservice-war</code>, as described in <a href="#BNAYR">Building, Packaging, and Deploying the Service</a>.</p>
<p class="orderedlisttitle">To Run the Application Client Using NetBeans IDE&nbsp;</p>
<ol>
<li>
<p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/jaxws
</pre></li>
<li>
<p>Select the <code>hello-appclient</code> folder.</p>
</li>
<li>
<p>Click <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>hello-appclient</code> project and select <span class="gui-object-action">Build</span>.</p>
<p>This command runs the <code>wsimport</code> goal, then builds, packages, and runs the client. You will see the output of the application client in the <span class="gui-object-action">hello-appclient</span> output tab:</p>
<pre xml:space="preserve" class="oac_no_warn">
--- exec-maven-plugin:1.2.1:exec (run-appclient) @ hello-appclient ---
Hello, world.
</pre></li>
</ol>
<p class="orderedlisttitle">To Run the Application Client Using Maven&nbsp;</p>
<ol>
<li>
<p>In a terminal window, go to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/jaxws/hello-appclient/
</pre></li>
<li>
<p>Enter the following command:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre>
<p>This command runs the <code>wsimport</code> goal, then builds, packages, and runs the client. The application client output looks like this:</p>
<pre xml:space="preserve" class="oac_no_warn">
--- exec-maven-plugin:1.2.1:exec (run-appclient) @ hello-appclient ---
Hello, world.
</pre></li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="GJYGB" name="GJYGB"></a><a id="JEETT01049" name="JEETT01049"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">28.1.6</span> A Simple JAX-WS Web Client</h2>
<p><code>HelloServlet</code> is a servlet that, like the Java client, calls the <code>sayHello</code> method of the web service. Like the application client, it makes this call through a port.</p>
<a id="GJYFL" name="GJYFL"></a><a id="JEETT00636" name="JEETT00636"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">28.1.6.1</span> Coding the Servlet</h3>
<p>To invoke the method on the port, the client performs these steps.</p>
<ol>
<li>
<p>It imports the <code>HelloService</code> endpoint and the <code>WebServiceRef</code> annotation:</p>
<pre xml:space="preserve" class="oac_no_warn">
import javaeetutorial.helloservice.endpoint.HelloService;
...
import javax.xml.ws.WebServiceRef;
</pre></li>
<li>
<p>It defines a reference to the web service by specifying the WSDL location:</p>
<pre xml:space="preserve" class="oac_no_warn">
@WebServiceRef(wsdlLocation = 
  "http://localhost:8080/helloservice-war/HelloService?WSDL")
</pre></li>
<li>
<p>It declares the web service, then defines a private method that calls the <code>sayHello</code> method on the port:</p>
<pre xml:space="preserve" class="oac_no_warn">
private HelloService service;
...
private String sayHello(java.lang.String arg0) {
    javaeetutorial.helloservice.endpoint.Hello port =
            service.getHelloPort();
    return port.sayHello(arg0);
}
</pre></li>
<li>
<p>In the servlet, it calls this private method:</p>
<pre xml:space="preserve" class="oac_no_warn">
out.println("&lt;p&gt;" + sayHello("world") + "&lt;/p&gt;");
</pre></li>
</ol>
<p>The significant parts of the <code>HelloServlet</code> code follow. The code is located in the <span class="variable">tut-install</span><code>/examples/jaxws/hello-webclient/src/java/javaeetutorial/hello/<br />
webclient/</code> directory.</p>
<pre xml:space="preserve" class="oac_no_warn">
package javaeetutorial.hello.webclient;

import javaeetutorial.helloservice.endpoint.HelloService;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.ws.WebServiceRef;

@WebServlet(name="HelloServlet", urlPatterns={"/HelloServlet"})
public class HelloServlet extends HttpServlet {
    @WebServiceRef(wsdlLocation = 
      "http://localhost:8080/helloservice-war/HelloService?WSDL")
    private HelloService service;
   
    /** 
     * Processes requests for both HTTP &lt;code&gt;GET&lt;/code&gt; 
     *   and &lt;code&gt;POST&lt;/code&gt; methods.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, 
            HttpServletResponse response)
    throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            
            out.println("&lt;html lang=\"en\"&gt;");
            out.println("&lt;head&gt;");
            out.println("&lt;title&gt;Servlet HelloServlet&lt;/title&gt;");  
            out.println("&lt;/head&gt;");
            out.println("&lt;body&gt;");
            out.println("&lt;h1&gt;Servlet HelloServlet at " + 
                request.getContextPath () + "&lt;/h1&gt;");
            out.println("&lt;p&gt;" + sayHello("world") + "&lt;/p&gt;");
            out.println("&lt;/body&gt;");
            out.println("&lt;/html&gt;");
        }
    } 
    
    // doGet and doPost methods, which call processRequest, and
    //   getServletInfo method
    
    private String sayHello(java.lang.String arg0) {
        javaeetutorial.helloservice.endpoint.Hello port = 
                service.getHelloPort();
        return port.sayHello(arg0);
    }
}
</pre></div>
<!-- class="sect3" -->
<a id="GJYGE" name="GJYGE"></a><a id="JEETT00637" name="JEETT00637"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">28.1.6.2</span> Running the Web Client</h3>
<p>You can use either NetBeans IDE or Maven to build, package, deploy, and run the <code>hello-webclient</code> application. To build the client, you must first have deployed <code>helloservice-war</code>, as described in <a href="#BNAYR">Building, Packaging, and Deploying the Service</a>.</p>
<p class="orderedlisttitle">To Run the Web Client Using NetBeans IDE&nbsp;</p>
<ol>
<li>
<p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/jaxws
</pre></li>
<li>
<p>Select the <code>hello-webclient</code> folder.</p>
</li>
<li>
<p>Click <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>hello-webclient</code> project and select <span class="gui-object-action">Build</span>.</p>
<p>This task runs the <code>wsimport</code> goal, builds and packages the application into a WAR file, <code>hello-webclient.war</code>, located in the <code>target</code> directory, and deploys it to GlassFish Server.</p>
</li>
<li>
<p>In a web browser, enter the following URL:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/hello-webclient/HelloServlet
</pre>
<p>The output of the <code>sayHello</code> method appears in the window.</p>
</li>
</ol>
<p class="orderedlisttitle">To Run the Web Client Using Maven&nbsp;</p>
<ol>
<li>
<p>In a terminal window, go to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/jaxws/hello-webclient/
</pre></li>
<li>
<p>Enter the following command:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre>
<p>This command runs the <code>wsimport</code> goal, then build and packages the application into a WAR file, <code>hello-webclient.war</code>, located in the <code>target</code> directory. The WAR file is then deployed to GlassFish Server.</p>
</li>
<li>
<p>In a web browser, enter the following URL:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/hello-webclient/HelloServlet
</pre>
<p>The output of the <code>sayHello</code> method appears in the window.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jaxws.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jaxws002.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

