<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:2Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Using JAX-RS with JAXB" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Using JAX-RS with JAXB | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<ul style="list-style-type:none">
<li><a href="jaxrs-advanced001.htm#GKKRB"><span class="secnum">31.1</span> Annotations for Field and Bean Properties of Resource Classes</a>
<ul style="list-style-type:none">
<li><a href="jaxrs-advanced001.htm#GKKYA"><span class="secnum">31.1.1</span> Extracting Path Parameters</a></li>
<li><a href="jaxrs-advanced001.htm#GKKXJ"><span class="secnum">31.1.2</span> Extracting Query Parameters</a></li>
<li><a href="jaxrs-advanced001.htm#GKKYC"><span class="secnum">31.1.3</span> Extracting Form Data</a></li>
<li><a href="jaxrs-advanced001.htm#GKLCQ"><span class="secnum">31.1.4</span> Extracting the Java Type of a Request or Response</a></li>
</ul>
</li>
<li><a href="jaxrs-advanced002.htm#BABCJEDF"><span class="secnum">31.2</span> Validating Resource Data with Bean Validation</a>
<ul style="list-style-type:none">
<li><a href="jaxrs-advanced002.htm#sthref1605"><span class="secnum">31.2.1</span> Using Constraint Annotations on Resource Methods</a></li>
<li><a href="jaxrs-advanced002.htm#sthref1606"><span class="secnum">31.2.2</span> Validating Entity Data</a></li>
<li><a href="jaxrs-advanced002.htm#sthref1607"><span class="secnum">31.2.3</span> Validation Exception Handling and Response Codes</a></li>
</ul>
</li>
<li><a href="jaxrs-advanced003.htm#GKNAV"><span class="secnum">31.3</span> Subresources and Runtime Resource Resolution</a>
<ul style="list-style-type:none">
<li><a href="jaxrs-advanced003.htm#GKLAG"><span class="secnum">31.3.1</span> Subresource Methods</a></li>
<li><a href="jaxrs-advanced003.htm#GKRHR"><span class="secnum">31.3.2</span> Subresource Locators</a></li>
</ul>
</li>
<li><a href="jaxrs-advanced004.htm#GKNCY"><span class="secnum">31.4</span> Integrating JAX-RS with EJB Technology and CDI</a></li>
<li><a href="jaxrs-advanced005.htm#GKQDA"><span class="secnum">31.5</span> Conditional HTTP Requests</a></li>
<li><a href="jaxrs-advanced006.htm#GKQBQ"><span class="secnum">31.6</span> Runtime Content Negotiation</a></li>
<li><div id="backgroundColor"><a href="jaxrs-advanced007.htm#GKKNJ"><span class="secnum">31.7</span> Using JAX-RS with JAXB</a><ul style="list-style-type:none">
<li><a href="jaxrs-advanced007.htm#sthref1634"><span class="secnum">31.7.1</span> Using Java Objects to Model Your Data</a></li>
<li><a href="jaxrs-advanced007.htm#sthref1635"><span class="secnum">31.7.2</span> Starting from an Existing XML Schema Definition</a></li>
<li><a href="jaxrs-advanced007.htm#sthref1636"><span class="secnum">31.7.3</span> Using JSON with JAX-RS and JAXB</a></li>
</ul>
</div></li>
<li><a href="jaxrs-advanced008.htm#GKOIB"><span class="secnum">31.8</span> The customer Example Application</a>
<ul style="list-style-type:none">
<li><a href="jaxrs-advanced008.htm#GKOFO"><span class="secnum">31.8.1</span> Overview of the customer Example Application</a></li>
<li><a href="jaxrs-advanced008.htm#sthref1641"><span class="secnum">31.8.2</span> The Customer and Address Entity Classes</a></li>
<li><a href="jaxrs-advanced008.htm#GKLGT"><span class="secnum">31.8.3</span> The CustomerService Class</a></li>
<li><a href="jaxrs-advanced008.htm#GKQJQ"><span class="secnum">31.8.4</span> Using the JAX-RS Client in the CustomerBean Classes</a></li>
<li><a href="jaxrs-advanced008.htm#GKQKV"><span class="secnum">31.8.5</span> Running the customer Example</a>
<ul style="list-style-type:none">
<li><a href="jaxrs-advanced008.htm#GKQLY"><span class="secnum">31.8.5.1</span> To Build, Package, and Deploy the customer Example Using NetBeans IDE</a></li>
<li><a href="jaxrs-advanced008.htm#GKQJV"><span class="secnum">31.8.5.2</span> To Build, Package, and Deploy the customer Example Using Maven</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jaxrs-advanced006.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jaxrs-advanced008.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="GKKNJ" name="GKKNJ"></a><a id="JEETT00436" name="JEETT00436"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">31.7</span> <a id="sthref1630" name="sthref1630"></a><a id="sthref1631" name="sthref1631"></a><a id="sthref1632" name="sthref1632"></a><a id="sthref1633" name="sthref1633"></a>Using JAX-RS with JAXB</h1>
<p>Java Architecture for XML Binding (JAXB) is an XML-to-Java binding technology that simplifies the development of web services by enabling transformations between schema and Java objects and between XML instance documents and Java object instances. An XML schema defines the data elements and structure of an XML document. You can use JAXB APIs and tools to establish mappings between Java classes and XML schema. JAXB technology provides the tools that enable you to convert your XML documents to and from Java objects.</p>
<p>By using JAXB, you can manipulate data objects in the following ways.</p>
<ul>
<li>
<p>You can start with an XML schema definition (XSD) and use <code>xjc</code>, the JAXB schema compiler tool, to create a set of JAXB-annotated Java classes that map to the elements and types defined in the XSD schema.</p>
</li>
<li>
<p>You can start with a set of Java classes and use <code>schemagen</code>, the JAXB schema generator tool, to generate an XML schema.</p>
</li>
<li>
<p>Once a mapping between the XML schema and the Java classes exists, you can use the JAXB binding runtime to marshal and unmarshal your XML documents to and from Java objects and use the resulting Java classes to assemble a web services application.</p>
</li>
</ul>
<p>XML is a common media format that RESTful services consume and produce. To deserialize and serialize XML, you can represent requests and responses by JAXB annotated objects. Your JAX-RS application can use the JAXB objects to manipulate XML data. JAXB objects can be used as request entity parameters and response entities. The JAX-RS runtime environment includes standard <code>MessageBodyReader</code> and <code>MessageBodyWriter</code> provider interfaces for reading and writing JAXB objects as entities.</p>
<p>With JAX-RS, you enable access to your services by publishing resources. Resources are just simple Java classes with some additional JAX-RS annotations. These annotations express the following:</p>
<ul>
<li>
<p>The path of the resource (the URL you use to access it)</p>
</li>
<li>
<p>The HTTP method you use to call a certain method (for example, the <code>GET</code> or <code>POST</code> method)</p>
</li>
<li>
<p>The MIME type with which a method accepts or responds</p>
</li>
</ul>
<p>As you define the resources for your application, consider the type of data you want to expose. You may already have a relational database that contains information you want to expose to users, or you may have static content that does not reside in a database but does need to be distributed as resources. Using JAX-RS, you can distribute content from multiple sources. RESTful web services can use various types of input/output formats for request and response. The <code>customer</code> example, described in <a href="jaxrs-advanced008.htm#GKOIB">The customer Example Application</a>, uses XML.</p>
<p>Resources have representations. A resource representation is the content in the HTTP message that is sent to, or returned from, the resource using the URI. Each representation a resource supports has a corresponding media type. For example, if a resource is going to return content formatted as XML, you can use <code>application/xml</code> as the associated media type in the HTTP message.Depending on the requirements of your application, resources can return representations in a preferred single format or in multiple formats. JAX-RS provides <code>@Consumes</code> and <code>@Produces</code> annotations to declare the media types that are acceptable for a resource method to read and write.</p>
<p>JAX-RS also maps Java types to and from resource representations using entity providers. A <code>MessageBodyReader</code> entity provider reads a request entity and deserializes the request entity into a Java type. A <code>MessageBodyWriter</code> entity provider serializes from a Java type into a response entity. For example, if a <code>String</code> value is used as the request entity parameter, the <code>MessageBodyReader</code> entity provider deserializes the request body into a new <code>String</code>. If a JAXB type is used as the return type on a resource method, the <code>MessageBodyWriter</code> serializes the JAXB object into a response body.</p>
<p>By default, the JAX-RS runtime environment attempts to create and use a default <code>JAXBContext</code> class for JAXB classes.However, if the default <code>JAXBContext</code> class is not suitable, then you can supply a <code>JAXBContext</code> class for the application using a JAX-RS <code>ContextResolver</code> provider interface.</p>
<p>The following sections explain how to use JAXB with JAX-RS resource methods.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1634" name="sthref1634"></a>
<h2 class="sect2"><span class="secnum">31.7.1</span> Using Java Objects to Model Your Data</h2>
<p>If you do not have an XML schema definition for the data you want to expose, you can model your data as Java classes, add JAXB annotations to these classes, and use JAXB to generate an XML schema for your data. For example, if the data you want to expose is a collection of products and each product has an ID, a name, a description, and a price, you can model it as a Java class as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
@XmlRootElement(name="product")
@XmlAccessorType(XmlAccessType.FIELD)
public class Product {

    @XmlElement(required=true)
    protected int id;
    @XmlElement(required=true)
    protected String name;
    @XmlElement(required=true)
    protected String description;
    @XmlElement(required=true)
    protected int price;

    public Product() {}

    // Getter and setter methods
    // ...
}
</pre>
<p>Run the JAXB schema generator on the command line to generate the corresponding XML schema definition:</p>
<pre xml:space="preserve" class="oac_no_warn">
schemagen Product.java
</pre>
<p>This command produces the XML schema as an <code>.xsd</code> file:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;xs:schema version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;

    &lt;xs:element name="product" type="product"/&gt;

    &lt;xs:complexType name="product"&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="id" type="xs:int"/&gt;
        &lt;xs:element name="name" type="xs:string"/&gt;
        &lt;xs:element name="description" type="xs:string"/&gt;
        &lt;xs:element name="price" type="xs:int"/&gt;
      &lt;/xs:sequence&gt;
    &lt;xs:complexType&gt;
&lt;/xs:schema&gt;
</pre>
<p>Once you have this mapping, you can create <code>Product</code> objects in your application, return them, and use them as parameters in JAX-RS resource methods. The JAX-RS runtime uses JAXB to convert the XML data from the request into a <code>Product</code> object and to convert a <code>Product</code> object into XML data for the response. The following resource class provides a simple example:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Path("/product")
public class ProductService {
    @GET
    @Path("/get")
    @Produces("application/xml")
    public Product getProduct() {
        Product prod = new Product();
        prod.setId(1);
        prod.setName("Mattress");
        prod.setDescription("Queen size mattress");
        prod.setPrice(500);
        return prod;
    }

    @POST
    @Path("/create")
    @Consumes("application/xml")
    public Response createProduct(Product prod) {
        // Process or store the product and return a response
        // ...
    }
}
</pre>
<p>Some IDEs, such as NetBeans IDE, will run the schema generator tool automatically during the build process if you add Java classes that have JAXB annotations to your project. For a detailed example, see <a href="jaxrs-advanced008.htm#GKOIB">The customer Example Application</a>. The <code>customer</code> example contains a more complex relationship between the Java classes that model the data, which results in a more hierarchical XML representation.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1635" name="sthref1635"></a>
<h2 class="sect2"><span class="secnum">31.7.2</span> Starting from an Existing XML Schema Definition</h2>
<p>If you already have an XML schema definition in an <code>.xsd</code> file for the data you want to expose, use the JAXB schema compiler tool. Consider this simple example of an <code>.xsd</code> file:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;xs:schema targetNamespace="http://xml.product"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified"
           xmlns:myco="http://xml.product"&gt;
  &lt;xs:element name="product" type="myco:Product"/&gt;
  &lt;xs:complexType name="Product"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="id" type="xs:int"/&gt;
      &lt;xs:element name="name" type="xs:string"/&gt;
      &lt;xs:element name="description" type="xs:string"/&gt;
      &lt;xs:element name="price" type="xs:int"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;
</pre>
<p>Run the schema compiler tool on the command line as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
xjc Product.xsd
</pre>
<p>This command generates the source code for Java classes that correspond to the types defined in the <code>.xsd</code> file. The schema compiler tool generates a Java class for each <code>complexType</code> defined in the <code>.xsd</code> file. The fields of each generated Java class are the same as the elements inside the corresponding <code>complexType</code>, and the class contains getter and setter methods for these fields.</p>
<p>In this case, the schema compiler tool generates the classes <code>product.xml.Product</code> and <code>product.xml.ObjectFactory</code>. The <code>Product</code> class contains JAXB annotations, and its fields correspond to those in the <code>.xsd</code> definition:</p>
<pre xml:space="preserve" class="oac_no_warn">
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Product", propOrder = {
    "id",
    "name",
    "description",
    "price"
})
public class Product {
    protected int id;
    @XmlElement(required = true)
    protected String name;
    @XmlElement(required = true)
    protected String description;
    protected int price;

    // Setter and getter methods
    // ...
}
</pre>
<p>You can create instances of the <code>Product</code> class from your application (for example, from a database). The generated class <code>product.xml.ObjectFactory</code> contains a method that allows you to convert these objects to JAXB elements that can be returned as XML inside JAX-RS resource methods:</p>
<pre xml:space="preserve" class="oac_no_warn">
@XmlElementDecl(namespace = "http://xml.product", name = "product")
public JAXBElement&lt;Product&gt; createProduct(Product value) {
    return new JAXBElement&lt;Product&gt;(_Product_QNAME, Product.class, null, value);
}
</pre>
<p>The following code shows how to use the generated classes to return a JAXB element as XML in a JAX-RS resource method:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Path("/product")
public class ProductService {
    @GET
    @Path("/get")
    @Produces("application/xml")
    public JAXBElement&lt;Product&gt; getProduct() {
        Product prod = new Product();
        prod.setId(1);
        prod.setName("Mattress");
        prod.setDescription("Queen size mattress");
        prod.setPrice(500);
        return new ObjectFactory().createProduct(prod);
    }
}
</pre>
<p>For <code>@POST</code> and <code>@PUT</code> resource methods, you can use a <code>Product</code> object directly as a parameter. JAX-RS maps the XML data from the request into a <code>Product</code> object.</p>
<pre xml:space="preserve" class="oac_no_warn">
@Path("/product")
public class ProductService {
    @GET
    // ...

    @POST
    @Path("/create")
    @Consumes("application/xml")
    public Response createProduct(Product prod) {
        // Process or store the product and return a response
        // ...
    }
}
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1636" name="sthref1636"></a>
<h2 class="sect2"><span class="secnum">31.7.3</span> <a id="sthref1637" name="sthref1637"></a><a id="sthref1638" name="sthref1638"></a>Using JSON with JAX-RS and JAXB</h2>
<p>JAX-RS can automatically read and write XML using JAXB, but it can also work with JSON data. JSON is a simple text-based format for data exchange derived from JavaScript. For the preceding examples, the XML representation of a product is</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;product&gt;
  &lt;id&gt;1&lt;/id&gt;
  &lt;name&gt;Mattress&lt;/name&gt;
  &lt;description&gt;Queen size mattress&lt;/description&gt;
  &lt;price&gt;500&lt;/price&gt;
&lt;/product&gt;
</pre>
<p>The equivalent JSON representation is</p>
<pre xml:space="preserve" class="oac_no_warn">
{
    "id":"1",
    "name":"Mattress",
    "description":"Queen size mattress",
    "price":500
}
</pre>
<p>You can add the format <code>application/json</code> or <code>MediaType.APPLICATION_JSON</code> to the <code>@Produces</code> annotation in resource methods to produce responses with JSON data:</p>
<pre xml:space="preserve" class="oac_no_warn">
@GET
@Path("/get")
@Produces({"application/xml","application/json"})
public Product getProduct() { ... }
</pre>
<p>In this example, the default response is XML, but the response is a JSON object if the client makes a <code>GET</code> request that includes this header:</p>
<pre xml:space="preserve" class="oac_no_warn">
Accept: application/json
</pre>
<p>The resource methods can also accept JSON data for JAXB annotated classes:</p>
<pre xml:space="preserve" class="oac_no_warn">
@POST
@Path("/create")
@Consumes({"application/xml","application/json"})
public Response createProduct(Product prod) { ... }
</pre>
<p>The client should include the following header when submitting JSON data with a <code>POST</code> request:</p>
<pre xml:space="preserve" class="oac_no_warn">
Content-Type: application/json
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jaxrs-advanced006.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jaxrs-advanced008.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

