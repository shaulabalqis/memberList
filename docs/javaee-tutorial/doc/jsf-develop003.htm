<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:1Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Writing Managed Bean Methods" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Writing Managed Bean Methods | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<ul style="list-style-type:none">
<li><a href="jsf-develop001.htm#BNAQM"><span class="secnum">12.1</span> Managed Beans in JavaServer Faces Technology</a>
<ul style="list-style-type:none">
<li><a href="jsf-develop001.htm#BNAQN"><span class="secnum">12.1.1</span> Creating a Managed Bean</a></li>
<li><a href="jsf-develop001.htm#BNAQP"><span class="secnum">12.1.2</span> Using the EL to Reference Managed Beans</a></li>
</ul>
</li>
<li><a href="jsf-develop002.htm#BNATY"><span class="secnum">12.2</span> Writing Bean Properties</a>
<ul style="list-style-type:none">
<li><a href="jsf-develop002.htm#BNATZ"><span class="secnum">12.2.1</span> Writing Properties Bound to Component Values</a>
<ul style="list-style-type:none">
<li><a href="jsf-develop002.htm#BNAUB"><span class="secnum">12.2.1.1</span> UIInput and UIOutput Properties</a></li>
<li><a href="jsf-develop002.htm#BNAUC"><span class="secnum">12.2.1.2</span> UIData Properties</a></li>
<li><a href="jsf-develop002.htm#BNAUD"><span class="secnum">12.2.1.3</span> UISelectBoolean Properties</a></li>
<li><a href="jsf-develop002.htm#BNAUE"><span class="secnum">12.2.1.4</span> UISelectMany Properties</a></li>
<li><a href="jsf-develop002.htm#BNAUF"><span class="secnum">12.2.1.5</span> UISelectOne Properties</a></li>
<li><a href="jsf-develop002.htm#BNAUG"><span class="secnum">12.2.1.6</span> UISelectItem Properties</a></li>
<li><a href="jsf-develop002.htm#BNAUH"><span class="secnum">12.2.1.7</span> UISelectItems Properties</a></li>
</ul>
</li>
<li><a href="jsf-develop002.htm#BNAUK"><span class="secnum">12.2.2</span> Writing Properties Bound to Component Instances</a></li>
<li><a href="jsf-develop002.htm#BNAUL"><span class="secnum">12.2.3</span> Writing Properties Bound to Converters, Listeners, or Validators</a></li>
</ul>
</li>
<li><div id="backgroundColor"><a href="jsf-develop003.htm#BNAVB"><span class="secnum">12.3</span> Writing Managed Bean Methods</a><ul style="list-style-type:none">
<li><a href="jsf-develop003.htm#BNAVC"><span class="secnum">12.3.1</span> Writing a Method to Handle Navigation</a></li>
<li><a href="jsf-develop003.htm#BNAVD"><span class="secnum">12.3.2</span> Writing a Method to Handle an Action Event</a></li>
<li><a href="jsf-develop003.htm#BNAVE"><span class="secnum">12.3.3</span> Writing a Method to Perform Validation</a></li>
<li><a href="jsf-develop003.htm#BNAVF"><span class="secnum">12.3.4</span> Writing a Method to Handle a Value-Change Event</a></li>
</ul>
</li>
</ul>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jsf-develop002.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jsf-ajax.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BNAVB" name="BNAVB"></a><a id="JEETT00356" name="JEETT00356"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">12.3</span> <a id="sthref777" name="sthref777"></a>Writing Managed Bean Methods</h1>
<p>Methods of a managed bean can perform several application-specific functions for components on the page. These functions include</p>
<ul>
<li>
<p>Performing processing associated with navigation</p>
</li>
<li>
<p>Handling action events</p>
</li>
<li>
<p>Performing validation on the component's value</p>
</li>
<li>
<p>Handling value-change events</p>
</li>
</ul>
<p><a id="sthref778" name="sthref778"></a><a id="sthref779" name="sthref779"></a><a id="sthref780" name="sthref780"></a>By using a managed bean to perform these functions, you eliminate the need to implement the <code>javax.faces.validator.Validator</code> interface to handle the validation or one of the listener interfaces to handle events. Also, by using a managed bean instead of a <code>Validator</code> implementation to perform validation, you eliminate the need to create a custom tag for the <code>Validator</code> implementation.</p>
<p>In general, it is good practice to include these methods in the same managed bean that defines the properties for the components referencing these methods. The reason for doing so is that the methods might need to access the component's data to determine how to handle the event or to perform the validation associated with the component.</p>
<p>The following sections explain how to write various types of managed bean methods.</p>
<a id="BNAVC" name="BNAVC"></a><a id="JEETT00947" name="JEETT00947"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">12.3.1</span> <a id="sthref781" name="sthref781"></a><a id="sthref782" name="sthref782"></a>Writing a Method to Handle Navigation</h2>
<p><a id="sthref783" name="sthref783"></a><a id="sthref784" name="sthref784"></a><a id="sthref785" name="sthref785"></a><a id="sthref786" name="sthref786"></a><a id="sthref787" name="sthref787"></a>An <span class="glossaryterm">action method</span>, a managed bean method that handles navigation processing, must be a public method that takes no parameters and returns an <code>Object</code>, which is the logical outcome that the navigation system uses to determine the page to display next. This method is referenced using the component tag's <code>action</code> attribute.</p>
<p>The following action method is from the managed bean <code>CashierBean</code>, which is invoked when a user clicks the <span class="gui-object-action">Submit</span> button on the page. If the user has ordered more than $100 worth of books, this method sets the <code>rendered</code> properties of the <code>fanClub</code> and <code>specialOffer</code> components to <code>true</code>, causing them to be displayed on the page the next time that page is rendered.</p>
<p>After setting the components' <code>rendered</code> properties to <code>true</code>, this method returns the logical outcome <code>null</code>. This causes the JavaServer Faces implementation to re-render the page without creating a new view of the page, retaining the customer's input. If this method were to return <code>purchase</code>, which is the logical outcome to use to advance to a payment page, the page would re-render without retaining the customer's input. In this case, you want to re-render the page without clearing the data.</p>
<p>If the user does not purchase more than $100 worth of books or if the <code>thankYou</code> component has already been rendered, the method returns <code>bookreceipt</code>. The JavaServer Faces implementation loads the <code>bookreceipt.xhtml</code> page after this method returns:</p>
<pre xml:space="preserve" class="oac_no_warn">
public String submit() {
    ...
    if ((cart().getTotal()&gt; 100.00) &amp;&amp; !specialOffer.isRendered()) {
        specialOfferText.setRendered(true);
        specialOffer.setRendered(true);
        return null;
    } else if (specialOffer.isRendered() &amp;&amp; !thankYou.isRendered()) {
        thankYou.setRendered(true);
        return null;
    } else {
        ...
        cart.clear();
        return ("bookreceipt");
    }
}
</pre>
<p>Typically, an action method will return a <code>String</code> outcome, as shown in the preceding example. Alternatively, you can define an <code>Enum</code> class that encapsulates all possible outcome strings and then make an action method return an <code>enum</code> constant, which represents a particular <code>String</code> outcome defined by the <code>Enum</code> class.</p>
<p>The following example uses an <code>Enum</code> class to encapsulate all logical outcomes:</p>
<pre xml:space="preserve" class="oac_no_warn">
public enum Navigation  {
    main, accountHist, accountList, atm, atmAck, transferFunds,
     transferAck, error
}
</pre>
<p>When it returns an outcome, an action method uses the dot notation to reference the outcome from the <code>Enum</code> class:</p>
<pre xml:space="preserve" class="oac_no_warn">
public Object submit(){
    ...
    return Navigation.accountHist;
}
</pre>
<p>The section <a href="jsf-page-core004.htm#BNATP">Referencing a Method That Performs Navigation</a> explains how a component tag references this method. The section <a href="jsf-develop002.htm#BNAUK">Writing Properties Bound to Component Instances</a> explains how to write the bean properties to which the components are bound.</p>
</div>
<!-- class="sect2" -->
<a id="BNAVD" name="BNAVD"></a><a id="JEETT00948" name="JEETT00948"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">12.3.2</span> <a id="sthref788" name="sthref788"></a><a id="sthref789" name="sthref789"></a>Writing a Method to Handle an Action Event</h2>
<p><a id="sthref790" name="sthref790"></a><a id="sthref791" name="sthref791"></a><a id="sthref792" name="sthref792"></a>A managed bean method that handles an action event must be a public method that accepts an action event and returns <code>void</code>. This method is referenced using the component tag's <code>actionListener</code> attribute. Only components that implement <code>javax.faces.component.ActionSource</code> can refer to this method.</p>
<p>In the following example, a method from a managed bean named <code>ActionBean</code> processes the event of a user clicking one of the links on the page:</p>
<pre xml:space="preserve" class="oac_no_warn">
public void chooseBookFromLink(ActionEvent event) {
    String current = event.getComponent().getId();
    FacesContext context = FacesContext.getCurrentInstance();
    String bookId = books.get(current);
    context.getExternalContext().getSessionMap().put("bookId", bookId);
}
</pre>
<p>This method gets the component that generated the event from the event object; then it gets the component's ID, which is a code for the book. The method matches the code against a <code>HashMap</code> object that contains the book codes and corresponding book ID values. Finally, the method sets the book ID by using the selected value from the <code>HashMap</code> object.</p>
<p><a href="jsf-page-core004.htm#BNATQ">Referencing a Method That Handles an Action Event</a> explains how a component tag references this method.</p>
</div>
<!-- class="sect2" -->
<a id="BNAVE" name="BNAVE"></a><a id="JEETT00949" name="JEETT00949"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">12.3.3</span> <a id="sthref793" name="sthref793"></a><a id="sthref794" name="sthref794"></a><a id="sthref795" name="sthref795"></a>Writing a Method to Perform Validation</h2>
<p><a id="sthref796" name="sthref796"></a><a id="sthref797" name="sthref797"></a><a id="sthref798" name="sthref798"></a><a id="sthref799" name="sthref799"></a><a id="sthref800" name="sthref800"></a><a id="sthref801" name="sthref801"></a>Instead of implementing the <code>javax.faces.validator.Validator</code> interface to perform validation for a component, you can include a method in a managed bean to take care of validating input for the component. A managed bean method that performs validation must accept a <code>javax.faces.context.FacesContext</code>, the component whose data must be validated, and the data to be validated, just as the <code>validate</code> method of the <code>Validator</code> interface does. A component refers to the managed bean method by using its <code>validator</code> attribute. Only values of <code>UIInput</code> components or values of components that extend <code>UIInput</code> can be validated.</p>
<p>Here is an example of a managed bean method that validates user input, from <a href="cdi-basicexamples002.htm#GJCXV">The guessnumber-cdi CDI Example</a>:</p>
<pre xml:space="preserve" class="oac_no_warn">
public void validateNumberRange(FacesContext context,
                                UIComponent toValidate, 
                                Object value) {
    if (remainingGuesses &lt;= 0) {
        ((UIInput) toValidate).setValid(false);
        FacesMessage message = new FacesMessage("No guesses left!");
        context.addMessage(toValidate.getClientId(context), message);
        return;
    }

    int input = (Integer) value;
    if (input &lt; minimum || input&gt; maximum) {
        ((UIInput) toValidate).setValid(false);

        FacesMessage message = new FacesMessage("Invalid guess");
        context.addMessage(toValidate.getClientId(context), message);
    }
}
</pre>
<p><a id="sthref802" name="sthref802"></a><a id="sthref803" name="sthref803"></a>The <code>validateNumberRange</code> method performs two different validations.</p>
<ul>
<li>
<p>If the user has run out of guesses, the method sets the <code>valid</code> property of the <code>UIInput</code> component to <code>false</code>. Then it queues a message onto the <code>FacesContext</code> instance, associating the message with the component ID, and returns.</p>
</li>
<li>
<p>If the user has some remaining guesses, the method then retrieves the local value of the component. If the input value is outside the allowable range, the method again sets the <code>valid</code> property of the <code>UIInput</code> component to <code>false</code>, queues a different message on the <code>FacesContext</code> instance, and returns.</p>
</li>
</ul>
<p>See <a href="jsf-page-core004.htm#BNATR">Referencing a Method That Performs Validation</a> for information on how a component tag references this method.</p>
</div>
<!-- class="sect2" -->
<a id="BNAVF" name="BNAVF"></a><a id="JEETT00950" name="JEETT00950"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">12.3.4</span> <a id="sthref804" name="sthref804"></a><a id="sthref805" name="sthref805"></a>Writing a Method to Handle a Value-Change Event</h2>
<p><a id="sthref806" name="sthref806"></a><a id="sthref807" name="sthref807"></a>A managed bean that handles a value-change event must use a public method that accepts a value-change event and returns <code>void</code>. This method is referenced using the component's <code>valueChangeListener</code> attribute. This section explains how to write a managed bean method to replace the <code>javax.faces.event.ValueChangeListener</code> implementation.</p>
<p><a id="sthref808" name="sthref808"></a><a id="sthref809" name="sthref809"></a>The following example tag comes from <a href="jsf-page-core002.htm#BNATA">Registering a Value-Change Listener on a Component</a>, where the <code>h:inputText</code> tag with the <code>id</code> of <code>name</code> has a <code>ValueChangeListener</code> instance registered on it. This <code>ValueChangeListener</code> instance handles the event of entering a value in the field corresponding to the component. When the user enters a value, a value-change event is generated, and the <code>processValueChange(ValueChangeEvent)</code> method of the <code>ValueChangeListener</code> class is invoked:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;h:inputText id="name"
             size="30"
             value="#{cashierBean.name}"
             required="true"
             requiredMessage="#{bundle.ReqCustomerName}"&gt;    
     &lt;f:valueChangeListener
         type="javaeetutorial.dukesbookstore.listeners.NameChanged" /&gt;
&lt;/h:inputText&gt;
</pre>
<p>Instead of implementing <code>ValueChangeListener</code>, you can write a managed bean method to handle this event. To do this, you move the <code>processValueChange(ValueChangeEvent)</code> method from the <code>ValueChangeListener</code> class, called <code>NameChanged</code>, to your managed bean.</p>
<p>Here is the managed bean method that processes the event of entering a value in the <code>name</code> field on the page:</p>
<pre xml:space="preserve" class="oac_no_warn">
public void processValueChange(ValueChangeEvent event)
        throws AbortProcessingException {
    if (null != event.getNewValue()) {
        FacesContext.getCurrentInstance().getExternalContext().
                getSessionMap().put("name", event.getNewValue());
    }
}
</pre>
<p>To make this method handle the <code>ValueChangeEvent</code> generated by an input component, reference this method from the component tag's <code>valueChangeListener</code> attribute. See <a href="jsf-page-core004.htm#BNATS">Referencing a Method That Handles a Value-Change Event</a> for more information.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jsf-develop002.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jsf-ajax.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

