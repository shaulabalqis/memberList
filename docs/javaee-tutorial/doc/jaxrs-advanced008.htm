<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:2Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="The customer Example Application" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:The customer Example Application | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<ul style="list-style-type:none">
<li><a href="jaxrs-advanced001.htm#GKKRB"><span class="secnum">31.1</span> Annotations for Field and Bean Properties of Resource Classes</a>
<ul style="list-style-type:none">
<li><a href="jaxrs-advanced001.htm#GKKYA"><span class="secnum">31.1.1</span> Extracting Path Parameters</a></li>
<li><a href="jaxrs-advanced001.htm#GKKXJ"><span class="secnum">31.1.2</span> Extracting Query Parameters</a></li>
<li><a href="jaxrs-advanced001.htm#GKKYC"><span class="secnum">31.1.3</span> Extracting Form Data</a></li>
<li><a href="jaxrs-advanced001.htm#GKLCQ"><span class="secnum">31.1.4</span> Extracting the Java Type of a Request or Response</a></li>
</ul>
</li>
<li><a href="jaxrs-advanced002.htm#BABCJEDF"><span class="secnum">31.2</span> Validating Resource Data with Bean Validation</a>
<ul style="list-style-type:none">
<li><a href="jaxrs-advanced002.htm#sthref1605"><span class="secnum">31.2.1</span> Using Constraint Annotations on Resource Methods</a></li>
<li><a href="jaxrs-advanced002.htm#sthref1606"><span class="secnum">31.2.2</span> Validating Entity Data</a></li>
<li><a href="jaxrs-advanced002.htm#sthref1607"><span class="secnum">31.2.3</span> Validation Exception Handling and Response Codes</a></li>
</ul>
</li>
<li><a href="jaxrs-advanced003.htm#GKNAV"><span class="secnum">31.3</span> Subresources and Runtime Resource Resolution</a>
<ul style="list-style-type:none">
<li><a href="jaxrs-advanced003.htm#GKLAG"><span class="secnum">31.3.1</span> Subresource Methods</a></li>
<li><a href="jaxrs-advanced003.htm#GKRHR"><span class="secnum">31.3.2</span> Subresource Locators</a></li>
</ul>
</li>
<li><a href="jaxrs-advanced004.htm#GKNCY"><span class="secnum">31.4</span> Integrating JAX-RS with EJB Technology and CDI</a></li>
<li><a href="jaxrs-advanced005.htm#GKQDA"><span class="secnum">31.5</span> Conditional HTTP Requests</a></li>
<li><a href="jaxrs-advanced006.htm#GKQBQ"><span class="secnum">31.6</span> Runtime Content Negotiation</a></li>
<li><a href="jaxrs-advanced007.htm#GKKNJ"><span class="secnum">31.7</span> Using JAX-RS with JAXB</a>
<ul style="list-style-type:none">
<li><a href="jaxrs-advanced007.htm#sthref1634"><span class="secnum">31.7.1</span> Using Java Objects to Model Your Data</a></li>
<li><a href="jaxrs-advanced007.htm#sthref1635"><span class="secnum">31.7.2</span> Starting from an Existing XML Schema Definition</a></li>
<li><a href="jaxrs-advanced007.htm#sthref1636"><span class="secnum">31.7.3</span> Using JSON with JAX-RS and JAXB</a></li>
</ul>
</li>
<li><div id="backgroundColor"><a href="jaxrs-advanced008.htm#GKOIB"><span class="secnum">31.8</span> The customer Example Application</a><ul style="list-style-type:none">
<li><a href="jaxrs-advanced008.htm#GKOFO"><span class="secnum">31.8.1</span> Overview of the customer Example Application</a></li>
<li><a href="jaxrs-advanced008.htm#sthref1641"><span class="secnum">31.8.2</span> The Customer and Address Entity Classes</a></li>
<li><a href="jaxrs-advanced008.htm#GKLGT"><span class="secnum">31.8.3</span> The CustomerService Class</a></li>
<li><a href="jaxrs-advanced008.htm#GKQJQ"><span class="secnum">31.8.4</span> Using the JAX-RS Client in the CustomerBean Classes</a></li>
<li><a href="jaxrs-advanced008.htm#GKQKV"><span class="secnum">31.8.5</span> Running the customer Example</a>
<ul style="list-style-type:none">
<li><a href="jaxrs-advanced008.htm#GKQLY"><span class="secnum">31.8.5.1</span> To Build, Package, and Deploy the customer Example Using NetBeans IDE</a></li>
<li><a href="jaxrs-advanced008.htm#GKQJV"><span class="secnum">31.8.5.2</span> To Build, Package, and Deploy the customer Example Using Maven</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jaxrs-advanced007.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="partentbeans.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="GKOIB" name="GKOIB"></a><a id="JEETT00437" name="JEETT00437"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">31.8</span> <a id="sthref1639" name="sthref1639"></a><a id="sthref1640" name="sthref1640"></a>The customer Example Application</h1>
<p>This section describes how to build and run the <code>customer</code> example application. This application is a RESTful web service that uses JAXB to perform the create, read, update, delete (CRUD) operations for a specific entity.</p>
<p>The <code>customer</code> sample application is in the <span class="variable">tut-install</span><code>/examples/jaxrs/customer/</code> directory. See <a href="usingexamples.htm#GFIUD">Chapter 2, "Using the Tutorial Examples,"</a> for basic information on building and running sample applications.</p>
<a id="GKOFO" name="GKOFO"></a><a id="JEETT01067" name="JEETT01067"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">31.8.1</span> Overview of the customer Example Application</h2>
<p>The source files of this application are at <span class="variable">tut-install</span><code>/examples/jaxrs/customer/src/main/java/</code>. The application has three parts.</p>
<ul>
<li>
<p>The <code>Customer</code> and <code>Address</code> entity classes. These classes model the data of the application and contain JAXB annotations.</p>
</li>
<li>
<p>The <code>CustomerService</code> resource class. This class contains JAX-RS resource methods that perform operations on <code>Customer</code> instances represented as XML or JSON data using JAXB. See <a href="#GKLGT">The CustomerService Class</a> for details.</p>
</li>
<li>
<p>The <code>CustomerBean</code> session bean that acts as a backing bean for the web client. <code>CustomerBean</code> uses the JAX-RS client API to call the methods of <code>CustomerService</code>.</p>
</li>
</ul>
<p>The <code>customer</code> example application shows you how to model your data entities as Java classes with JAXB annotations.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1641" name="sthref1641"></a>
<h2 class="sect2"><span class="secnum">31.8.2</span> The Customer and Address Entity Classes</h2>
<p>The following class represents a customer's address:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Entity
@Table(name="CUSTOMER_ADDRESS")
@XmlRootElement(name="address")
@XmlAccessorType(XmlAccessType.FIELD)
public class Address {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
    
    @XmlElement(required=true) 
    protected int number;
    
    @XmlElement(required=true)  
    protected String street;
    
    @XmlElement(required=true)  
    protected String city;
    
    @XmlElement(required=true) 
    protected String province;
    
    @XmlElement(required=true)  
    protected String zip;
    
    @XmlElement(required=true)
    protected String country;
    
    public Address() { }
    
    // Getter and setter methods
    // ...
}
</pre>
<p>The <code>@XmlRootElement(name="address")</code> annotation maps this class to the <code>address</code> XML element. The <code>@XmlAccessorType(XmlAccessType.FIELD)</code> annotation specifies that all the fields of this class are bound to XML by default. The <code>@XmlElement(required=true)</code> annotation specifies that an element must be present in the XML representation.</p>
<p>The following class represents a customer:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Entity
@Table(name="CUSTOMER_CUSTOMER")
@NamedQuery(
    name="findAllCustomers",
    query="SELECT c FROM Customer c " +
          "ORDER BY c.id"
)
@XmlRootElement(name="customer")
@XmlAccessorType(XmlAccessType.FIELD)
public class Customer {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @XmlAttribute(required=true) 
    protected int id;
    
    @XmlElement(required=true) 
    protected String firstname;
    
    @XmlElement(required=true) 
    protected String lastname;
    
    @XmlElement(required=true)
    @OneToOne
    protected Address address;
    
    @XmlElement(required=true)
    protected String email;
    
    @XmlElement (required=true)
    protected String phone;
    
    public Customer() {...}
    
    // Getter and setter methods
    // ...
}
</pre>
<p>The <code>Customer</code> class contains the same JAXB annotations as the previous class, except for the <code>@XmlAttribute(required=true)</code> annotation, which maps a property to an attribute of the XML element representing the class.</p>
<p>The <code>Customer</code> class contains a property whose type is another entity, the <code>Address</code> class. This mechanism allows you to define in Java code the hierarchical relationships between entities without having to write an <code>.xsd</code> file yourself.</p>
<p>JAXB generates the following XML schema definition for the two preceding classes:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;xs:schema version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;

  &lt;xs:element name="address" type="address"/&gt;
  &lt;xs:element name="customer" type="customer"/&gt;

  &lt;xs:complexType name="address"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="id" type="xs:long" minOccurs="0"/&gt;
      &lt;xs:element name="number" type="xs:int"/&gt;
      &lt;xs:element name="street" type="xs:string"/&gt;
      &lt;xs:element name="city" type="xs:string"/&gt;
      &lt;xs:element name="province" type="xs:string"/&gt;
      &lt;xs:element name="zip" type="xs:string"/&gt;
      &lt;xs:element name="country" type="xs:string"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name="customer"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="firstname" type="xs:string"/&gt;
      &lt;xs:element name="lastname" type="xs:string"/&gt;
      &lt;xs:element ref="address"/&gt;
      &lt;xs:element name="email" type="xs:string"/&gt;
      &lt;xs:element name="phone" type="xs:string"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="id" type="xs:int" use="required"/&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;
</pre></div>
<!-- class="sect2" -->
<a id="GKLGT" name="GKLGT"></a><a id="JEETT01068" name="JEETT01068"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">31.8.3</span> The CustomerService Class</h2>
<p>The <code>CustomerService</code> class has a <code>createCustomer</code> method that creates a customer resource based on the <code>Customer</code> class and returns a URI for the new resource.</p>
<pre xml:space="preserve" class="oac_no_warn">
@Stateless
@Path("/Customer")
public class CustomerService {
    public static final Logger logger =
            Logger.getLogger(CustomerService.class.getCanonicalName());
    @PersistenceContext
    private EntityManager em;
    private CriteriaBuilder cb;

    @PostConstruct
    private void init() {
        cb = em.getCriteriaBuilder();
    }
    ...
    @POST
    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
    public Response createCustomer(Customer customer) {
 
        try {
            long customerId = persist(customer);
            return Response.created(URI.create("/" + customerId)).build();
        } catch (Exception e) {
            logger.log(Level.SEVERE,
                    "Error creating customer for customerId {0}. {1}",
                    new Object[]{customer.getId(), e.getMessage()});
            throw new WebApplicationException(e,
                    Response.Status.INTERNAL_SERVER_ERROR);
        }
    }
    ...
    private long persist(Customer customer) {
        try {
            Address address = customer.getAddress();
            em.persist(address);
            em.persist(customer);
        } catch (Exception ex) {
            logger.warning("Something went wrong when persisting the customer");
        }
        return customer.getId();
    }
</pre>
<p>The response returned to the client has a URI to the newly created resource. The return type is an entity body mapped from the property of the response with the status code specified by the status property of the response. The <code>WebApplicationException</code> is a <code>RuntimeException</code> that is used to wrap the appropriate HTTP error status code, such as 404, 406, 415, or 500.</p>
<p>The <code>@Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})</code> and <code>@Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})</code> annotations set the request and response media types to use the appropriate MIME client. These annotations can be applied to a resource method, a resource class, or even an entity provider. If you do not use these annotations, JAX-RS allows the use of any media type (<code>"*/*"</code>).</p>
<p>The following code snippet shows the implementation of the <code>getCustomer</code> and <code>findbyId</code> methods. The <code>getCustomer</code> method uses the <code>@Produces</code> annotation and returns a <code>Customer</code> object, which is converted to an XML or JSON representation depending on the <code>Accept:</code> header specified by the client.</p>
<pre xml:space="preserve" class="oac_no_warn">
    @GET
    @Path("{id}")
    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
    public Customer getCustomer(@PathParam("id") String customerId) {
        Customer customer = null;
 
        try {
            customer = findById(customerId);
        } catch (Exception ex) {
            logger.log(Level.SEVERE,
                    "Error calling findCustomer() for customerId {0}. {1}",
                    new Object[]{customerId, ex.getMessage()});
        }
        return customer;
    }
    ...
    private Customer findById(String customerId) {
        Customer customer = null;
        try {
            customer = em.find(Customer.class, customerId);
            return customer;
        } catch (Exception ex) {
            logger.log(Level.WARNING,
                    "Couldn't find customer with ID of {0}", customerId);
        }
        return customer;
    }
</pre></div>
<!-- class="sect2" -->
<a id="GKQJQ" name="GKQJQ"></a><a id="JEETT01070" name="JEETT01070"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">31.8.4</span> Using the JAX-RS Client in the CustomerBean Classes</h2>
<p>Use the JAX-RS Client API to write a client for the <code>customer</code> example application.</p>
<p>The <code>CustomerBean</code> enterprise bean class calls the JAX-RS Client API to test the <code>CustomerService</code> web service:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Named
@Stateless
public class CustomerBean {
    protected Client client;
    private static final Logger logger = 
            Logger.getLogger(CustomerBean.class.getName());
    
    @PostConstruct
    private void init() {
        client = ClientBuilder.newClient();
    }
 
    @PreDestroy
    private void clean() {
        client.close();
    }

    public String createCustomer(Customer customer) {
        if (customer == null) {
            logger.log(Level.WARNING, "customer is null.");
            return "customerError";
        }
        String navigation;
        Response response =
                client.target("http://localhost:8080/customer/webapi/Customer")
                .request(MediaType.APPLICATION_XML)
                .post(Entity.entity(customer, MediaType.APPLICATION_XML),
                        Response.class);
        if (response.getStatus() == Status.CREATED.getStatusCode()) {
            navigation = "customerCreated";
        } else {
            logger.log(Level.WARNING, "couldn''t create customer with " +
                    "id {0}. Status returned was {1}", 
                    new Object[]{customer.getId(), response.getStatus()});
            navigation = "customerError";
        }
        return navigation;
    }
 
    public String retrieveCustomer(String id) {
        String navigation;
        Customer customer =
                client.target("http://localhost:8080/customer/webapi/Customer")
                .path(id)
                .request(MediaType.APPLICATION_XML)
                .get(Customer.class);
        if (customer == null) {
            navigation = "customerError";
        } else {
            navigation = "customerRetrieved";
        }
        return navigation;
    }
    
    public List&lt;Customer&gt; retrieveAllCustomers() {
        List&lt;Customer&gt; customers =
                client.target("http://localhost:8080/customer/webapi/Customer")
                .path("all")
                .request(MediaType.APPLICATION_XML)
                .get(new GenericType&lt;List&lt;Customer&gt;&gt;() {});
        return customers;
    }
}
</pre>
<p>This client uses the <code>POST</code> and <code>GET</code> methods.</p>
<p>All of these HTTP status codes indicate success: 201 for <code>POST</code>, 200 for <code>GET</code>, and 204 for <code>DELETE</code>. For details about the meanings of HTTP status codes, see <code><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</a></code>.</p>
</div>
<!-- class="sect2" -->
<a id="GKQKV" name="GKQKV"></a><a id="JEETT01071" name="JEETT01071"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">31.8.5</span> Running the customer Example</h2>
<p>You can use either NetBeans IDE or Maven to build, package, deploy, and run the <code>customer</code> application.</p>
<a id="GKQLY" name="GKQLY"></a><a id="JEETT00189" name="JEETT00189"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">31.8.5.1</span> To Build, Package, and Deploy the customer Example Using NetBeans IDE</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/jaxrs
</pre></li>
<li>
<p>Select the <code>customer</code> folder.</p>
</li>
<li>
<p>Click <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>customer</code> project and select <span class="gui-object-action">Build</span>.</p>
<p>This command builds and packages the application into a WAR file, <code>customer.war</code>, located in the <code>target</code> directory. Then, the WAR file is deployed to GlassFish Server.</p>
</li>
<li>
<p>Open the web client in a browser at the following URL:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/customer/
</pre>
<p>The web client allows you to create and view customers.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="GKQJV" name="GKQJV"></a><a id="JEETT00190" name="JEETT00190"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">31.8.5.2</span> To Build, Package, and Deploy the customer Example Using Maven</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>In a terminal window, go to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/jaxrs/customer/
</pre></li>
<li>
<p>Enter the following command:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre>
<p>This command builds and packages the application into a WAR file, <code>customer.war</code>, located in the <code>target</code> directory. Then, the WAR file is deployed to GlassFish Server.</p>
</li>
<li>
<p>Open the web client in a browser at the following URL:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/customer/
</pre>
<p>The web client allows you to create and view customers.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jaxrs-advanced007.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="partentbeans.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

