<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:1Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Using Faces Flows" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Using Faces Flows | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<ul style="list-style-type:none">
<li><a href="jsf-configure001.htm#GIRCH"><span class="secnum">16.1</span> Using Annotations to Configure Managed Beans</a>
<ul style="list-style-type:none">
<li><a href="jsf-configure001.htm#GIRCR"><span class="secnum">16.1.1</span> Using Managed Bean Scopes</a></li>
</ul>
</li>
<li><a href="jsf-configure002.htm#BNAWP"><span class="secnum">16.2</span> Application Configuration Resource File</a>
<ul style="list-style-type:none">
<li><a href="jsf-configure002.htm#GIREP"><span class="secnum">16.2.1</span> Configuring Eager Application-Scoped Managed Beans</a></li>
<li><a href="jsf-configure002.htm#GIQCK"><span class="secnum">16.2.2</span> Ordering of Application Configuration Resource Files</a></li>
</ul>
</li>
<li><div id="backgroundColor"><a href="jsf-configure003.htm#CHDGFCJF"><span class="secnum">16.3</span> Using Faces Flows</a><ul style="list-style-type:none">
<li><a href="jsf-configure003.htm#sthref1042"><span class="secnum">16.3.1</span> Packaging Flows in an Application</a></li>
<li><a href="jsf-configure003.htm#sthref1043"><span class="secnum">16.3.2</span> The Simplest Possible Flow: The simple-flow Example Application</a>
<ul style="list-style-type:none">
<li><a href="jsf-configure003.htm#sthref1044"><span class="secnum">16.3.2.1</span> To Build, Package, and Deploy the simple-flow Example Using NetBeans IDE</a></li>
<li><a href="jsf-configure003.htm#sthref1045"><span class="secnum">16.3.2.2</span> To Build, Package, and Deploy the simple-flow Example Using Maven</a></li>
<li><a href="jsf-configure003.htm#sthref1046"><span class="secnum">16.3.2.3</span> To Run the simple-flow Example</a></li>
</ul>
</li>
<li><a href="jsf-configure003.htm#sthref1047"><span class="secnum">16.3.3</span> The checkout-module Example Application</a>
<ul style="list-style-type:none">
<li><a href="jsf-configure003.htm#sthref1048"><span class="secnum">16.3.3.1</span> The Facelets Pages for the checkout-module Example</a></li>
<li><a href="jsf-configure003.htm#sthref1049"><span class="secnum">16.3.3.2</span> Using a Configuration File to Configure a Flow</a></li>
<li><a href="jsf-configure003.htm#sthref1050"><span class="secnum">16.3.3.3</span> Using a Java Class to Configure a Flow</a></li>
<li><a href="jsf-configure003.htm#sthref1051"><span class="secnum">16.3.3.4</span> The Flow-Scoped Managed Beans</a></li>
<li><a href="jsf-configure003.htm#sthref1052"><span class="secnum">16.3.3.5</span> To Build, Package, and Deploy the checkout-module Example Using NetBeans IDE</a></li>
<li><a href="jsf-configure003.htm#sthref1053"><span class="secnum">16.3.3.6</span> To Build, Package, and Deploy the checkout-module Example Using Maven</a></li>
<li><a href="jsf-configure003.htm#sthref1054"><span class="secnum">16.3.3.7</span> To Run the checkout-module Example</a></li>
</ul>
</li>
</ul>
</div></li>
<li><a href="jsf-configure004.htm#BNAWQ"><span class="secnum">16.4</span> Configuring Managed Beans</a>
<ul style="list-style-type:none">
<li><a href="jsf-configure004.htm#BNAWR"><span class="secnum">16.4.1</span> Using the managed-bean Element</a></li>
<li><a href="jsf-configure004.htm#BNAWS"><span class="secnum">16.4.2</span> Initializing Properties Using the managed-property Element</a>
<ul style="list-style-type:none">
<li><a href="jsf-configure004.htm#BNAWU"><span class="secnum">16.4.2.1</span> Referencing a Java Enum Type</a></li>
<li><a href="jsf-configure004.htm#BNAWV"><span class="secnum">16.4.2.2</span> Referencing a Context Initialization Parameter</a></li>
<li><a href="jsf-configure004.htm#BNAWW"><span class="secnum">16.4.2.3</span> Initializing Map Properties</a></li>
<li><a href="jsf-configure004.htm#BNAWX"><span class="secnum">16.4.2.4</span> Initializing Array and List Properties</a></li>
<li><a href="jsf-configure004.htm#BNAWY"><span class="secnum">16.4.2.5</span> Initializing Managed Bean Properties</a></li>
</ul>
</li>
<li><a href="jsf-configure004.htm#BNAXA"><span class="secnum">16.4.3</span> Initializing Maps and Lists</a></li>
</ul>
</li>
<li><a href="jsf-configure005.htm#BNAXB"><span class="secnum">16.5</span> Registering Application Messages</a>
<ul style="list-style-type:none">
<li><a href="jsf-configure005.htm#GKUHG"><span class="secnum">16.5.1</span> Using FacesMessage to Create a Message</a></li>
<li><a href="jsf-configure005.htm#BNASS"><span class="secnum">16.5.2</span> Referencing Error Messages</a></li>
</ul>
</li>
<li><a href="jsf-configure006.htm#GIREB"><span class="secnum">16.6</span> Using Default Validators</a></li>
<li><a href="jsf-configure007.htm#BNAXD"><span class="secnum">16.7</span> Registering a Custom Validator</a></li>
<li><a href="jsf-configure008.htm#BNAXE"><span class="secnum">16.8</span> Registering a Custom Converter</a></li>
<li><a href="jsf-configure009.htm#BNAXF"><span class="secnum">16.9</span> Configuring Navigation Rules</a></li>
<li><a href="jsf-configure010.htm#BNAXH"><span class="secnum">16.10</span> Registering a Custom Renderer with a Render Kit</a></li>
<li><a href="jsf-configure011.htm#BNAXI"><span class="secnum">16.11</span> Registering a Custom Component</a></li>
<li><a href="jsf-configure012.htm#BNAXJ"><span class="secnum">16.12</span> Basic Requirements of a JavaServer Faces Application</a>
<ul style="list-style-type:none">
<li><a href="jsf-configure012.htm#BNAXK"><span class="secnum">16.12.1</span> Configuring an Application with a Web Deployment Descriptor</a>
<ul style="list-style-type:none">
<li><a href="jsf-configure012.htm#GLPOO"><span class="secnum">16.12.1.1</span> Identifying the Servlet for Lifecycle Processing</a></li>
<li><a href="jsf-configure012.htm#BNAXM"><span class="secnum">16.12.1.2</span> To Specify a Path to an Application Configuration Resource File</a></li>
<li><a href="jsf-configure012.htm#BNAXN"><span class="secnum">16.12.1.3</span> To Specify Where State Is Saved</a></li>
</ul>
</li>
<li><a href="jsf-configure012.htm#GIQXL"><span class="secnum">16.12.2</span> Configuring Project Stage</a></li>
<li><a href="jsf-configure012.htm#BNAXT"><span class="secnum">16.12.3</span> Including the Classes, Pages, and Other Resources</a></li>
</ul>
</li>
</ul>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jsf-configure002.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jsf-configure004.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="CHDGFCJF" name="CHDGFCJF"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h1 class="sect1"><span class="secnum">16.3</span> <a id="sthref1039" name="sthref1039"></a><a id="sthref1040" name="sthref1040"></a>Using Faces Flows</h1>
<p>The Faces Flows feature of JavaServer Faces technology allows you to create a set of pages with a scope, <code>FlowScoped</code>, that is greater than request scope but less than session scope. For example, you might want to create a series of pages for the checkout process in an online store. You could create a set of self-contained pages that could be transferred from one store to another as needed.</p>
<p>Faces Flows are somewhat analogous to subroutines in procedural programming, in the following ways.</p>
<ul>
<li>
<p>Like a subroutine, a flow has a well defined entry point, list of parameters, and return value. However, unlike a subroutine, a flow can return multiple values.</p>
</li>
<li>
<p>Like a subroutine, a flow has a scope, allowing information to be available only during the invocation of the flow. Such information is not available outside the scope of the flow and does not consume any resources once the flow returns.</p>
</li>
<li>
<p>Like a subroutine, a flow may call other flows before returning. The invocation of flows is maintained in a call stack: a new flow causes a push onto the stack, and a return causes a pop.</p>
</li>
</ul>
<p>An application can have any number of flows. Each flow includes a set of pages and, usually, one or more managed beans scoped to that flow. Each flow has a starting point, called a start node, and an exit point, called a return node.</p>
<p>The data in a flow is scoped to that flow alone, but you can pass data from one flow to another by specifying parameters and calling the other flow.</p>
<p>Flows can be nested, so that if you call one flow from another and then exit the second flow, you return to the calling flow rather than to the second flow's return node.</p>
<p>You can configure a flow programmatically, by creating a class annotated <code>@FlowDefinition</code>, or you can configure a flow by using a configuration file. The configuration file can be limited to one flow, or you can use the <code>faces-config.xml</code> file to put all the flows in one place, if you have many flows in an application. The programmatic configuration places the code closer to the rest of the flow code and enables you to modularize the flows.</p>
<p><a href="#CHDIHDCD">Figure 16-1</a> shows two flows and illustrates how they interact.</p>
<div class="figure"><a id="CHDIHDCD" name="CHDIHDCD"></a>
<p class="titleinfigure">Figure 16-1 Two Faces Flows and Their Interactions</p>
<img src="img/jeett_dt_017.png" alt="Description of Figure 16-1 follows" title="Description of Figure 16-1 follows" longdesc="img_text/jeett_dt_017.htm" /><br />
<a id="sthref1041" name="sthref1041" href="img_text/jeett_dt_017.htm">Description of "Figure 16-1 Two Faces Flows and Their Interactions"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In this figure, Flow A has a start node named <code>flow-a</code> and two additional pages, <code>next_a1</code> and <code>next_a2</code>. From <code>next_a2</code>, a user can either exit the flow using the defined return node, <code>taskFlowReturn1</code>, or call Flow B, passing two parameters. Flow A also defines two inbound parameters that it can accept from Flow B. Flow B is identical to Flow A except for the names of the flow and files. Each flow also has an associated managed bean; the beans are <code>Flow_a_Bean</code> and <code>Flow_b_Bean</code>.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1042" name="sthref1042"></a>
<h2 class="sect2"><span class="secnum">16.3.1</span> Packaging Flows in an Application</h2>
<p>Typically, you package flows in a web application using a directory structure that modularizes the flows. In the <code>src/main/webapp</code> directory of a Maven project, for example, you would place the Facelets files that are outside the flow at the top level as usual. Then the <code>webapp</code> files for each flow would be in a separate directory, and the Java files would be under <code>src/main/java</code>. For example, the files for the application shown in <a href="#CHDIHDCD">Figure 16-1</a> might look like this:</p>
<pre xml:space="preserve" class="oac_no_warn">
src/main/webapp/
    index.xhtml
    return.xhtml
    WEB_INF/
        beans.xml
        web.xml
    flow-a/
        flow-a.xhtml
        next_a1.xhtml
        next_a2.xhtml
    flow-b/
        flow-b-flow.xml
        next_b1.xhtml
        next_b2.xhtml
src/main/java/javaeetutorial/flowexample
            FlowA.java
            Flow_a_Bean.java
            Flow_b_Bean.java
</pre>
<p>In this example, <code>flow-a</code> is defined programmatically in <code>FlowA.java</code>, while <code>flow-b</code> is defined by the configuration file <code>flow-b-flow.xml</code>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1043" name="sthref1043"></a>
<h2 class="sect2"><span class="secnum">16.3.2</span> The Simplest Possible Flow: The simple-flow Example Application</h2>
<p>The <code>simple-flow</code> example application demonstrates the most basic building blocks of a Faces Flows application and illustrates some of the conventions that make it easy to get started with iterative development using flows. You may want to start with a simple example like this one and build upon it.</p>
<p>This example provides an <span class="glossaryterm">implicit flow definition</span> by including an empty configuration file. A configuration file that has content, or a class annotated <code>@FlowDefinition</code>, provides an <span class="glossaryterm">explicit flow definition</span>.</p>
<p>The source code for this application is in the <span class="variable">tut-install</span><code>/examples/web/jsf/simple-flow/</code> directory.</p>
<p>The file layout of the <code>simple-flow</code> example looks like this:</p>
<pre xml:space="preserve" class="oac_no_warn">
src/main/webapp
    index.xhtml
    simple-flow-return.xhtml
    WEB_INF/
        web.xml
    simple-flow
        simple-flow-flow.xml
        simple-flow.xhtml
        simple-flow-page2.xhtml
</pre>
<p>The <code>simple-flow</code> example has an empty configuration file, which is by convention named <span class="variable">flow-name</span>-<code>flow.xml</code>. The flow does not require any configuration for the following reasons.</p>
<ul>
<li>
<p>The flow does not call another flow, nor does it pass parameters to another flow.</p>
</li>
<li>
<p>The flow uses default names for the first page of the flow, <span class="variable">flow-name</span><code>.xhtml</code>, and the return page, <span class="variable">flow-name</span><code>-return.xhtml</code>.</p>
</li>
</ul>
<p>This example has only four Facelets pages.</p>
<ul>
<li>
<p><code>index.xhtml</code>, the start page, which contains almost nothing but a button that navigates to the first page of the flow:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;p&gt;&lt;h:commandButton value="Enter Flow" action="simple-flow"/&gt;&lt;/p&gt;
</pre></li>
<li>
<p><code>simple-flow.xhtml</code> and <code>simple-flow-page2.xhtml</code>, the two pages of the flow itself. In the absence of an explicit flow definition, the page whose name is the same as the name of the flow is assumed to be the start node of the flow. In this case, the flow is named <code>simple-flow</code>, so the page named <code>simple-flow.xhtml</code> is assumed to be the start node of the flow. The start node is the node navigated to upon entry into the flow. It can be thought of as the home page of the flow.</p>
<p>The <code>simple-flow.xhtml</code> page asks you to enter a flow-scoped value and provides a button that navigates to the next page of the flow:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;p&gt;Value: &lt;h:inputText id="input" value="#{flowScope.value}" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;h:commandButton value="Next" action="simple-flow-page2" /&gt;&lt;/p&gt;
</pre>
<p>The second page, which can have any name, displays the flow-scoped value and provides a button that navigates to the return page:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;p&gt;Value: #{flowScope.value}&lt;/p&gt;

&lt;p&gt;&lt;h:commandButton value="Return" action="simple-flow-return" /&gt;&lt;/p&gt;
</pre></li>
<li>
<p><code>simple-flow-return.xhtml</code>, the return page. The return page, which by convention is named <span class="variable">flow-name</span><code>-return.xhtml</code>, must be located outside of the flow. This page displays the flow-scoped value, to show that it has no value outside of the flow, and provides a link that navigates to the <code>index.xhtml</code> page:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;p&gt;Value (should be empty): 
    "&lt;h:outputText id="output" value="#{flowScope.value}" /&gt;"&lt;/p&gt;

&lt;p&gt;&lt;h:link outcome="index" value="Back to Start" /&gt;&lt;/p&gt;
</pre></li>
</ul>
<p>The Facelets pages use only flow-scoped data, so the example does not need a managed bean.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1044" name="sthref1044"></a>
<h3 class="sect3"><span class="secnum">16.3.2.1</span> To Build, Package, and Deploy the simple-flow Example Using NetBeans IDE</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/web/jsf
</pre></li>
<li>
<p>Select the <code>simple-flow</code> folder.</p>
</li>
<li>
<p>Click <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>simple-flow</code> project and select <span class="gui-object-action">Build</span>.</p>
<p>This command builds and packages the application into a WAR file, <code>simple-flow.war</code>, that is located in the <code>target</code> directory. It then deploys the application to the server.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref1045" name="sthref1045"></a>
<h3 class="sect3"><span class="secnum">16.3.2.2</span> To Build, Package, and Deploy the simple-flow Example Using Maven</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>In a terminal window, go to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/web/jsf/simple-flow/
</pre></li>
<li>
<p>Enter the following command:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre>
<p>This command builds and packages the application into a WAR file, <code>simple-flow.war</code>, that is located in the <code>target</code> directory. It then deploys the application to the server.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref1046" name="sthref1046"></a>
<h3 class="sect3"><span class="secnum">16.3.2.3</span> To Run the simple-flow Example</h3>
<ol>
<li>
<p>Enter the following URL in your web browser:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/simple-flow
</pre></li>
<li>
<p>On the <code>index.xhtml</code> page, click <span class="gui-object-action">Enter Flow</span>.</p>
</li>
<li>
<p>On the first page of the flow, enter any string in the <span class="gui-object-action">Value</span> field, then click <span class="gui-object-action">Next</span>.</p>
</li>
<li>
<p>On the second page of the flow, you can see the value you entered. Click <span class="gui-object-action">Return</span>.</p>
</li>
<li>
<p>On the return page, an empty pair of quotation marks encloses the inaccessible value. Click <span class="gui-object-action">Back to Start</span> to return to the <code>index.xhtml</code> page.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1047" name="sthref1047"></a>
<h2 class="sect2"><span class="secnum">16.3.3</span> The checkout-module Example Application</h2>
<p>The <code>checkout-module</code> example application is considerably more complex than <code>simple-flow</code>. It shows how you might use the Faces Flows feature to implement a checkout module for an online store.</p>
<p>Like the hypothetical example in <a href="#CHDIHDCD">Figure 16-1</a>, the example application contains two flows, each of which can call the other. Both flows have explicit flow definitions. One flow, <code>checkoutFlow</code>, is specified programmatically. The other flow, <code>joinFlow</code>, is specified in a configuration file.</p>
<p>The source code for this application is in the <span class="variable">tut-install</span><code>/examples/web/jsf/checkout-module/</code> directory.</p>
<p>For the <code>checkout-module</code> application, the directory structure is as follows (there is also a <code>src/main/webapp/resources</code> directory with a stylesheet and an image):</p>
<pre xml:space="preserve" class="oac_no_warn">
src/main/webapp/
    index.xhtml
    exithome.xhtml
    WEB_INF/
        beans.xml
        web.xml
    checkoutFlow/
        checkoutFlow.xhtml
        checkoutFlow2.xhtml
        checkoutFlow3.xhtml
        checkoutFlow4.xhtml
    joinFlow/
        joinFlow-flow.xml
        joinFlow.xhtml
        joinFlow2.xhtml
src/main/java/javaeetutorial/checkoutmodule
            CheckoutBean.java
            CheckoutFlow.java
            CheckoutFlowBean.java
            JoinFlowBean.java
</pre>
<p>For the example, <code>index.xhtml</code> is the beginning page for the application as well as the return node for the checkout flow. The <code>exithome.xhtml</code> page is the return node for the join flow.</p>
<p>The configuration file <code>joinFlow-flow.xml</code> defines the join flow, and the source file <code>CheckoutFlow.java</code> defines the checkout flow.</p>
<p>The checkout flow contains four Facelets pages, whereas the join flow contains two.</p>
<p>The managed beans scoped to each flow are <code>CheckoutFlowBean.java</code> and <code>JoinFlowBean.java</code>, whereas <code>CheckoutBean.java</code> is the backing bean for the <code>index.html</code> page.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1048" name="sthref1048"></a>
<h3 class="sect3"><span class="secnum">16.3.3.1</span> The Facelets Pages for the checkout-module Example</h3>
<p>The starting page for the example, <code>index.xhtml</code>, summarizes the contents of a hypothetical shopping cart. It allows the user to click either of two buttons to enter one of the two flows:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;p&gt;&lt;h:commandButton value="Check Out" action="checkoutFlow"/&gt;&lt;/p&gt;
...
&lt;p&gt;&lt;h:commandButton value="Join" action="joinFlow"/&gt;&lt;/p&gt;
</pre>
<p>This page is also the return node for the checkout flow.</p>
<p>The Facelets page <code>exithome.xhtml</code> is the return node for the join flow. This page has a button that allows you to return to the <code>index.xhtml</code> page.</p>
<p>The four Facelets pages within the checkout flow, starting with <code>checkoutFlow.xhtml</code> and ending with <code>checkoutFlow4.xhtml</code>, allow you to proceed to the next page or, in some cases, to return from the flow. The <code>checkoutFlow.xhtml</code> page allows you to access parameters passed from the join flow through the flow scope. These appear as empty quotation marks if you have not called the checkout flow from the join flow.</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;p&gt;If you called this flow from the Join flow, you can see these parameters:
    "&lt;h:outputText value="#{flowScope.param1Value}"/&gt;" and
    "&lt;h:outputText value="#{flowScope.param2Value}"/&gt;"
&lt;/p&gt;
</pre>
<p>Only <code>checkoutFlow2.xhtml</code> has a button to return to the previous page, but moving between pages is generally permitted within flows. Here are the buttons for c<code>heckoutFlow2.xhtml</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;p&gt;&lt;h:commandButton value="Continue" action="checkoutFlow3"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;h:commandButton value="Go Back" action="checkoutFlow"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;h:commandButton value="Exit Flow" action="returnFromCheckoutFlow"/&gt;&lt;/p&gt;
</pre>
<p>The action <code>returnFromCheckoutFlow</code> is defined in the configuration source code file, <code>CheckoutFlow.java</code>.</p>
<p>The final page of the checkout flow, <code>checkoutFlow4.xhtml</code>, contains a button that calls the join flow:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;p&gt;&lt;h:commandButton value="Join" action="calljoin"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;h:commandButton value="Exit Flow" action="returnFromCheckoutFlow"/&gt;&lt;/p&gt;
</pre>
<p>The <code>calljoin</code> action is also defined in the configuration source code file, <code>CheckoutFlow.java</code>. This action enters the join flow, passing two parameters from the checkout flow.</p>
<p>The two pages in the join flow, <code>joinFlow.xhtml</code> and <code>joinFlow2.xhtml</code>, are similar to those in the checkout flow. The second page has a button to call the checkout flow as well as one to return from the join flow:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;p&gt;&lt;h:commandButton value="Check Out" action="callcheckoutFlow"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;h:commandButton value="Exit Flow" action="returnFromJoinFlow"/&gt;&lt;/p&gt;
</pre>
<p>For this flow, the actions <code>callcheckoutFlow</code> and <code>returnFromJoinFlow</code> are defined in the configuration file <code>joinFlow-flow.xml</code>.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1049" name="sthref1049"></a>
<h3 class="sect3"><span class="secnum">16.3.3.2</span> Using a Configuration File to Configure a Flow</h3>
<p>If you use an application configuration resource file to configure a flow, it must be named <span class="variable">flowName</span><code>-flow.xml</code>. In this example, the join flow uses a configuration file named <code>joinFlow-flow.xml</code>. The file is a <code>faces-config</code> file that specifies a <code>flow-definition</code> element. This element must define the flow name using the <code>id</code> attribute. Under the <code>flow-definition</code> element, there must be a <code>flow-return</code> element that specifies the return point for the flow. Any inbound parameters are specified with <code>inbound-parameter</code> elements. If the flow calls another flow, the <code>call-flow</code> element must use the flow-reference element to name the called flow and may use the <code>outbound-parameter</code> element to specify any outbound parameters.</p>
<p>The configuration file for the join flow looks like this:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;faces-config version="2.2" xmlns="http://xmlns.jcp.org/xml/ns/javaee"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee \
              http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd"&gt;
 
    &lt;flow-definition id="joinFlow"&gt;
        &lt;flow-return id="returnFromJoinFlow"&gt;
            &lt;from-outcome&gt;#{joinFlowBean.returnValue}&lt;/from-outcome&gt;
        &lt;/flow-return&gt;
 
        &lt;inbound-parameter&gt;
            &lt;name&gt;param1FromCheckoutFlow&lt;/name&gt;
            &lt;value&gt;#{flowScope.param1Value}&lt;/value&gt;
        &lt;/inbound-parameter&gt;
        &lt;inbound-parameter&gt;
            &lt;name&gt;param2FromCheckoutFlow&lt;/name&gt;
            &lt;value&gt;#{flowScope.param2Value}&lt;/value&gt;
        &lt;/inbound-parameter&gt;
        
        &lt;flow-call id="callcheckoutFlow"&gt;
            &lt;flow-reference&gt;
                &lt;flow-id&gt;checkoutFlow&lt;/flow-id&gt;
            &lt;/flow-reference&gt;
            &lt;outbound-parameter&gt;
                &lt;name&gt;param1FromJoinFlow&lt;/name&gt;
                &lt;value&gt;param1 joinFlow value&lt;/value&gt;
            &lt;/outbound-parameter&gt;
            &lt;outbound-parameter&gt;
                &lt;name&gt;param2FromJoinFlow&lt;/name&gt;
                &lt;value&gt;param2 joinFlow value&lt;/value&gt;
            &lt;/outbound-parameter&gt;
        &lt;/flow-call&gt;
    &lt;/flow-definition&gt;
&lt;/faces-config&gt;
</pre>
<p>The <code>id</code> attribute of the <code>flow-definition</code> element defines the name of the flow as <code>joinFlow</code>. The value of the <code>id</code> attribute of the <code>flow-return</code> element identifies the name of the return node, and its value is defined in the <code>from-outcome</code> element as the <code>returnValue</code> property of the flow-scoped managed bean for the join flow, <code>JoinFlowBean</code>.</p>
<p>The names and values of the inbound parameters are retrieved from the flow scope in order (<code>flowScope.param1Value</code>, <code>flowScope.param2Value</code>), based on the way they were defined in the checkout flow configuration.</p>
<p>The <code>flow-call</code> element defines how the join flow calls the checkout flow. The <code>id</code> attribute of the element, <code>callcheckoutFlow</code>, defines the action of calling the flow. Within the <code>flow-call</code> element, the <code>flow-reference</code> element defines the actual name of the flow to call, <code>checkoutFlow</code>. The <code>outbound-parameter</code> elements define the parameters to be passed when <code>checkoutFlow</code> is called. Here they are just arbitrary strings.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1050" name="sthref1050"></a>
<h3 class="sect3"><span class="secnum">16.3.3.3</span> Using a Java Class to Configure a Flow</h3>
<p>If you use a Java class to configure a flow, it must have the name of the flow. The class for the checkout flow is called <code>CheckoutFlow.java</code>.</p>
<pre xml:space="preserve" class="oac_no_warn">
import java.io.Serializable;
import javax.enterprise.inject.Produces;
import javax.faces.flow.Flow;
import javax.faces.flow.builder.FlowBuilder;
import javax.faces.flow.builder.FlowBuilderParameter;
import javax.faces.flow.builder.FlowDefinition;

class CheckoutFlow implements Serializable {
 
    private static final long serialVersionUID = 1L;
 
    @Produces
    @FlowDefinition
    public Flow defineFlow(@FlowBuilderParameter FlowBuilder flowBuilder) {
 
        String flowId = "checkoutFlow";
        flowBuilder.id("", flowId);
        flowBuilder.viewNode(flowId, 
                "/" + flowId + "/" + flowId + ".xhtml").
                markAsStartNode();
 
        flowBuilder.returnNode("returnFromCheckoutFlow").
                fromOutcome("#{checkoutFlowBean.returnValue}");
 
        flowBuilder.inboundParameter("param1FromJoinFlow", 
                "#{flowScope.param1Value}");
        flowBuilder.inboundParameter("param2FromJoinFlow", 
                "#{flowScope.param2Value}");
 
        flowBuilder.flowCallNode("calljoin").flowReference("", "joinFlow").
                outboundParameter("param1FromCheckoutFlow", 
                    "#{checkoutFlowBean.name}").
                outboundParameter("param2FromCheckoutFlow", 
                    "#{checkoutFlowBean.city}");
        return flowBuilder.getFlow();
    }
}
</pre>
<p>The class performs actions that are almost identical to those performed by the configuration file <code>joinFlow-flow.xml</code>. It contains a single method, <code>defineFlow</code>, as a producer method with the <code>@FlowDefinition</code> qualifier that returns a <code>javax.faces.flow.Flow</code> class. The <code>defineFlow</code> method takes one parameter, a <code>FlowBuilder</code> with the qualifier <code>@FlowBuilderParameter</code>, which is passed in from the JavaServer Faces implementation. The method then calls methods from the <code>javax.faces.flow.Builder.FlowBuilder</code> class to configure the flow.</p>
<p>First, the method defines the flow <code>id</code> as <code>checkoutFlow</code>. Then, it explicitly defines the start node for the flow. By default, this is the name of the flow with an <code>.xhtml</code> suffix.</p>
<p>The method then defines the return node similarly to the way the configuration file does. The <code>returnNode</code> method sets the name of the return node as <code>returnFromCheckoutFlow</code>, and the chained <code>fromOutcome</code> method specifies its value as the <code>returnValue</code> property of the flow-scoped managed bean for the checkout flow, <code>CheckoutFlowBean</code>.</p>
<p>The <code>inboundParameter</code> method sets the names and values of the inbound parameters from the join flow, which are retrieved from the flow scope in order (<code>flowScope.param1Value</code>, <code>flowScope.param2Value</code>), based on the way they were defined in the join flow configuration.</p>
<p>The <code>flowCallNode</code> method defines how the checkout flow calls the join flow. The argument, <code>calljoin</code>, specifies the action of calling the flow. The chained <code>flowReference</code> method defines the actual name of the flow to call, <code>joinFlow</code>, then calls <code>outboundParameter</code> methods to define the parameters to be passed when <code>joinFlow</code> is called. Here they are values from the <code>CheckoutFlowBean</code> managed bean.</p>
<p>Finally, the <code>defineFlow</code> method calls the <code>getFlow</code> method and returns the result.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1051" name="sthref1051"></a>
<h3 class="sect3"><span class="secnum">16.3.3.4</span> The Flow-Scoped Managed Beans</h3>
<p>Each of the two flows has a managed bean that defines properties for the pages within the flow. For example, the <code>CheckoutFlowBean</code> defines properties whose values are entered by the user on both the <code>checkoutFlow.xhtml</code> page and the <code>checkoutFlow3.xhtml</code> page.</p>
<p>Each managed bean has a <code>getReturnValue</code> method that sets the value of the return node. For the <code>CheckoutFlowBean</code>, the return node is the <code>index.xhtml</code> page, specified using implicit navigation:</p>
<pre xml:space="preserve" class="oac_no_warn">
public String getReturnValue() {
    return "index";
}
</pre>
<p>For the <code>JoinFlowBean</code>, the return node is the <code>exithome.xhtml</code> page.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1052" name="sthref1052"></a>
<h3 class="sect3"><span class="secnum">16.3.3.5</span> To Build, Package, and Deploy the checkout-module Example Using NetBeans IDE</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/web/jsf
</pre></li>
<li>
<p>Select the <code>checkout-module</code> folder.</p>
</li>
<li>
<p>Click <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>checkout-module</code> project and select <span class="gui-object-action">Build</span>.</p>
<p>This command builds and packages the application into a WAR file, <code>checkout-module.war</code>, that is located in the <code>target</code> directory. It then deploys the application to the server.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref1053" name="sthref1053"></a>
<h3 class="sect3"><span class="secnum">16.3.3.6</span> To Build, Package, and Deploy the checkout-module Example Using Maven</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>In a terminal window, go to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/web/jsf/checkout-module/
</pre></li>
<li>
<p>Enter the following command:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre>
<p>This command builds and packages the application into a WAR file, <code>checkout-module.war</code>, that is located in the <code>target</code> directory. It then deploys the application to the server.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref1054" name="sthref1054"></a>
<h3 class="sect3"><span class="secnum">16.3.3.7</span> To Run the checkout-module Example</h3>
<ol>
<li>
<p>Enter the following URL in your web browser:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/checkout-module
</pre></li>
<li>
<p>The <code>index.xhtml</code> page presents hypothetical results of the shopping expedition. Click either <span class="gui-object-action">Check Out</span> or <span class="gui-object-action">Join</span> to enter one of the two flows.</p>
</li>
<li>
<p>Follow the flow, providing input as needed and choosing whether to continue, go back, or exit the flow.</p>
<p>In the checkout flow, only one of the input fields is validated (the credit card field expects 16 digits), so you can enter any values you like. The join flow does not require you to check any boxes in its checkbox menus.</p>
</li>
<li>
<p>On the last page of a flow, select the option to enter the other flow. This allows you to view the inbound parameters from the previous flow.</p>
</li>
<li>
<p>Because flows are nested, if you click <span class="gui-object-action">Exit Flow</span> from a called flow, you will return to the first page of the calling flow. (You may see a warning, which you can ignore.) Click <span class="gui-object-action">Exit Flow</span> on that page to go to the specified return node.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jsf-configure002.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jsf-configure004.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

