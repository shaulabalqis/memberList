<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:2Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="A Singleton Session Bean Example: counter" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:A Singleton Session Bean Example: counter | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples001.htm#BNBOD"><span class="secnum">34.1</span> The cart Example</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples001.htm#BNBOE"><span class="secnum">34.1.1</span> The Business Interface</a></li>
<li><a href="ejb-basicexamples001.htm#BNBOF"><span class="secnum">34.1.2</span> Session Bean Class</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples001.htm#BNBOG"><span class="secnum">34.1.2.1</span> Lifecycle Callback Methods</a></li>
<li><a href="ejb-basicexamples001.htm#BNBOH"><span class="secnum">34.1.2.2</span> Business Methods</a></li>
</ul>
</li>
<li><a href="ejb-basicexamples001.htm#BNBOI"><span class="secnum">34.1.3</span> The @Remove Method</a></li>
<li><a href="ejb-basicexamples001.htm#BNBOJ"><span class="secnum">34.1.4</span> Helper Classes</a></li>
<li><a href="ejb-basicexamples001.htm#BNBOK"><span class="secnum">34.1.5</span> Running the cart Example</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples001.htm#BNBOL"><span class="secnum">34.1.5.1</span> To Run the cart Example Using NetBeans IDE</a></li>
<li><a href="ejb-basicexamples001.htm#BNBON"><span class="secnum">34.1.5.2</span> To Run the cart Example Using Maven</a></li>
</ul>
</li>
</ul>
</li>
<li><div id="backgroundColor"><a href="ejb-basicexamples002.htm#GIPVI"><span class="secnum">34.2</span> A Singleton Session Bean Example: counter</a><ul style="list-style-type:none">
<li><a href="ejb-basicexamples002.htm#GIPVC"><span class="secnum">34.2.1</span> Creating a Singleton Session Bean</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples002.htm#GIPPQ"><span class="secnum">34.2.1.1</span> Initializing Singleton Session Beans</a></li>
<li><a href="ejb-basicexamples002.htm#GIPSZ"><span class="secnum">34.2.1.2</span> Managing Concurrent Access in a Singleton Session Bean</a></li>
<li><a href="ejb-basicexamples002.htm#GIPVD"><span class="secnum">34.2.1.3</span> Handling Errors in a Singleton Session Bean</a></li>
</ul>
</li>
<li><a href="ejb-basicexamples002.htm#GIPXL"><span class="secnum">34.2.2</span> The Architecture of the counter Example</a></li>
<li><a href="ejb-basicexamples002.htm#GIPVL"><span class="secnum">34.2.3</span> Running the counter Example</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples002.htm#GIPXT"><span class="secnum">34.2.3.1</span> To Run the counter Example Using NetBeans IDE</a></li>
<li><a href="ejb-basicexamples002.htm#GIPZW"><span class="secnum">34.2.3.2</span> To Run the counter Example Using Maven</a></li>
</ul>
</li>
</ul>
</div></li>
<li><a href="ejb-basicexamples003.htm#BNBOR"><span class="secnum">34.3</span> A Web Service Example: helloservice</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples003.htm#BNBOS"><span class="secnum">34.3.1</span> The Web Service Endpoint Implementation Class</a></li>
<li><a href="ejb-basicexamples003.htm#BNBOT"><span class="secnum">34.3.2</span> Stateless Session Bean Implementation Class</a></li>
<li><a href="ejb-basicexamples003.htm#BNBOU"><span class="secnum">34.3.3</span> Running the helloservice Example</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples003.htm#BNBOV"><span class="secnum">34.3.3.1</span> To Build, Package, and Deploy the helloservice Example Using NetBeans IDE</a></li>
<li><a href="ejb-basicexamples003.htm#BNBOW"><span class="secnum">34.3.3.2</span> To Build, Package, and Deploy the helloservice Example Using Maven</a></li>
<li><a href="ejb-basicexamples003.htm#BNBOX"><span class="secnum">34.3.3.3</span> To Test the Service without a Client</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="ejb-basicexamples004.htm#BNBOY"><span class="secnum">34.4</span> Using the Timer Service</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples004.htm#GIQLK"><span class="secnum">34.4.1</span> Creating Calendar-Based Timer Expressions</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples004.htm#GIQMX"><span class="secnum">34.4.1.1</span> Specifying Multiple Values in Calendar Expressions</a></li>
</ul>
</li>
<li><a href="ejb-basicexamples004.htm#GIQLT"><span class="secnum">34.4.2</span> Programmatic Timers</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples004.htm#BNBOZ"><span class="secnum">34.4.2.1</span> The @Timeout Method</a></li>
<li><a href="ejb-basicexamples004.htm#BNBPA"><span class="secnum">34.4.2.2</span> Creating Programmatic Timers</a></li>
</ul>
</li>
<li><a href="ejb-basicexamples004.htm#GIQMB"><span class="secnum">34.4.3</span> Automatic Timers</a></li>
<li><a href="ejb-basicexamples004.htm#BNBPB"><span class="secnum">34.4.4</span> Canceling and Saving Timers</a></li>
<li><a href="ejb-basicexamples004.htm#BNBPC"><span class="secnum">34.4.5</span> Getting Timer Information</a></li>
<li><a href="ejb-basicexamples004.htm#BNBPD"><span class="secnum">34.4.6</span> Transactions and Timers</a></li>
<li><a href="ejb-basicexamples004.htm#BNBPE"><span class="secnum">34.4.7</span> The timersession Example</a></li>
<li><a href="ejb-basicexamples004.htm#BNBPF"><span class="secnum">34.4.8</span> Running the timersession Example</a>
<ul style="list-style-type:none">
<li><a href="ejb-basicexamples004.htm#GIQNI"><span class="secnum">34.4.8.1</span> To Run the timersession Example Using NetBeans IDE</a></li>
<li><a href="ejb-basicexamples004.htm#GIQNQ"><span class="secnum">34.4.8.2</span> To Build, Package, and Deploy the timersession Example Using Maven</a></li>
<li><a href="ejb-basicexamples004.htm#GIQOP"><span class="secnum">34.4.8.3</span> To Run the Web Client</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="ejb-basicexamples005.htm#BNBPJ"><span class="secnum">34.5</span> Handling Exceptions</a></li>
</ul>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="ejb-basicexamples001.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="ejb-basicexamples003.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="GIPVI" name="GIPVI"></a><a id="JEETT00449" name="JEETT00449"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">34.2</span> <a id="sthref1746" name="sthref1746"></a><a id="sthref1747" name="sthref1747"></a><a id="sthref1748" name="sthref1748"></a>A Singleton Session Bean Example: counter</h1>
<p>The <code>counter</code> example demonstrates how to create a singleton session bean.</p>
<a id="GIPVC" name="GIPVC"></a><a id="JEETT01099" name="JEETT01099"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">34.2.1</span> Creating a Singleton Session Bean</h2>
<p><a id="sthref1749" name="sthref1749"></a>The <code>javax.ejb.Singleton</code> annotation is used to specify that the enterprise bean implementation class is a singleton session bean:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Singleton
public class SingletonBean { ... }
</pre>
<a id="GIPPQ" name="GIPPQ"></a><a id="JEETT00656" name="JEETT00656"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">34.2.1.1</span> Initializing Singleton Session Beans</h3>
<p><a id="sthref1750" name="sthref1750"></a><a id="sthref1751" name="sthref1751"></a>The EJB container is responsible for determining when to initialize a singleton session bean instance unless the singleton session bean implementation class is annotated with the <code>javax.ejb.Startup</code> annotation. In this case, sometimes called <span class="glossaryterm">eager initialization</span>, the EJB container must initialize the singleton session bean upon application startup. The singleton session bean is initialized before the EJB container delivers client requests to any enterprise beans in the application. This allows the singleton session bean to perform, for example, application startup tasks.</p>
<p>The following singleton session bean stores the status of an application and is eagerly initialized:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Startup
@Singleton
public class StatusBean {
  private String status;

  @PostConstruct
  void init {
    status = "Ready";
  }
  ...
}
</pre>
<p><a id="sthref1752" name="sthref1752"></a>Sometimes multiple singleton session beans are used to initialize data for an application and therefore must be initialized in a specific order. In these cases, use the <code>javax.ejb.DependsOn</code> annotation to declare the startup dependencies of the singleton session bean. The <code>@DependsOn</code> annotation's <code>value</code> attribute is one or more strings that specify the name of the target singleton session bean. If more than one dependent singleton bean is specified in <code>@DependsOn</code>, the order in which they are listed is not necessarily the order in which the EJB container will initialize the target singleton session beans.</p>
<p>The following singleton session bean, <code>PrimaryBean</code>, should be started up first:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Singleton
public class PrimaryBean { ... }
</pre>
<p><code>SecondaryBean</code> depends on <code>PrimaryBean</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Singleton
@DependsOn("PrimaryBean")
public class SecondaryBean { ... }
</pre>
<p>This guarantees that the EJB container will initialize <code>PrimaryBean</code> before <code>SecondaryBean</code>.</p>
<p>The following singleton session bean, <code>TertiaryBean</code>, depends on <code>PrimaryBean</code> and <code>SecondaryBean</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Singleton
@DependsOn({"PrimaryBean", "SecondaryBean"})
public class TertiaryBean { ... }
</pre>
<p><code>SecondaryBean</code> explicitly requires <code>PrimaryBean</code> to be initialized before it is initialized, through its own <code>@DependsOn</code> annotation. In this case, the EJB container will first initialize <code>PrimaryBean</code>, then <code>SecondaryBean</code>, and finally <code>TertiaryBean</code>.</p>
<p>If, however, <code>SecondaryBean</code> did not explicitly depend on <code>PrimaryBean</code>, the EJB container may initialize either <code>PrimaryBean</code> or <code>SecondaryBean</code> first. That is, the EJB container could initialize the singletons in the following order: <code>SecondaryBean</code>, <code>PrimaryBean</code>, <code>TertiaryBean</code>.</p>
</div>
<!-- class="sect3" -->
<a id="GIPSZ" name="GIPSZ"></a><a id="JEETT00657" name="JEETT00657"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">34.2.1.2</span> <a id="sthref1753" name="sthref1753"></a>Managing Concurrent Access in a Singleton Session Bean</h3>
<p>Singleton session beans are designed for <span class="glossaryterm">concurrent access</span>, situations in which many clients need to access a single instance of a session bean at the same time. A singleton's client needs only a reference to a singleton in order to invoke any business methods exposed by the singleton and doesn't need to worry about any other clients that may be simultaneously invoking business methods on the same singleton.</p>
<p><a id="sthref1754" name="sthref1754"></a><a id="sthref1755" name="sthref1755"></a>When creating a singleton session bean, concurrent access to the singleton's business methods can be controlled in two ways: container-managed concurrency and bean-managed concurrency.</p>
<p><a id="sthref1756" name="sthref1756"></a>The <code>javax.ejb.ConcurrencyManagement</code> annotation is used to specify container-managed or bean-managed concurrency for the singleton. With <code>@ConcurrencyManagement</code>, a type attribute must be set to either <code>javax.ejb.ConcurrencyManagementType.CONTAINER</code> or <code>javax.ejb.ConcurrencyManagementType.BEAN</code>. If no <code>@ConcurrencyManagement</code> annotation is present on the singleton implementation class, the EJB container default of container-managed concurrency is used.</p>
<p><a id="sthref1757" name="sthref1757"></a><a id="sthref1758" name="sthref1758"></a><span class="bold">Container-Managed Concurrency</span></p>
<p>If a singleton uses <span class="glossaryterm">container-managed concurrency</span>, the EJB container controls client access to the business methods of the singleton. The <code>javax.ejb.Lock</code> annotation and a <code>javax.ejb.LockType</code> type are used to specify the access level of the singleton's business methods or <code>@Timeout</code> methods. The <code>LockType</code> enumerated types are <code>READ</code> and <code>WRITE</code>.</p>
<p>Annotate a singleton's business or timeout method with <code>@Lock(LockType.READ)</code> if the method can be concurrently accessed, or shared, with many clients. Annotate the business or timeout method with <code>@Lock(LockType.WRITE)</code> if the singleton session bean should be locked to other clients while a client is calling that method. Typically, the <code>@Lock(LockType.WRITE)</code> annotation is used when clients are modifying the state of the singleton.</p>
<p>Annotating a singleton class with <code>@Lock</code> specifies that all the business methods and any timeout methods of the singleton will use the specified lock type unless they explicitly set the lock type with a method-level <code>@Lock</code> annotation. If no <code>@Lock</code> annotation is present on the singleton class, the default lock type, <code>@Lock(LockType.WRITE)</code>, is applied to all business and timeout methods.</p>
<p>The following example shows how to use the <code>@ConcurrencyManagement</code>, <code>@Lock(LockType.READ)</code>, and <code>@Lock(LockType.WRITE)</code> annotations for a singleton that uses container-managed concurrency.</p>
<p>Although by default singletons use container-managed concurrency, the <code>@ConcurrencyManagement(CONTAINER)</code> annotation may be added at the class level of the singleton to explicitly set the concurrency management type:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="bold">@ConcurrencyManagement(ConcurrencyManagementType.CONTAINER) </span>
@Singleton
public class ExampleSingletonBean {
  private String state;

  <span class="bold">@Lock(LockType.READ)</span>
  public String getState() {
    return state;
  }

  <span class="bold">@Lock(LockType.WRITE)</span>
  public void setState(String newState) {
    state = newState;
  }
}
</pre>
<p>The <code>getState</code> method can be accessed by many clients at the same time because it is annotated with <code>@Lock(LockType.READ)</code>. When the <code>setState</code> method is called, however, all the methods in <code>ExampleSingletonBean</code> will be locked to other clients because <code>setState</code> is annotated with <code>@Lock(LockType.WRITE)</code>. This prevents two clients from attempting to simultaneously change the <code>state</code> variable of <code>ExampleSingletonBean</code>.</p>
<p>The <code>getData</code> and <code>getStatus</code> methods in the following singleton are of type <code>READ</code>, and the <code>setStatus</code> method is of type <code>WRITE</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Singleton
<span class="bold">@Lock(LockType.READ)</span>
public class SharedSingletonBean {
  private String data;
  private String status;

  public String getData() {
    return data;
  }

  public String getStatus() {
    return status;
  }

  <span class="bold">@Lock(LockType.WRITE)</span>
  public void setStatus(String newStatus) {
    status = newStatus;
  }
}
</pre>
<p><a id="sthref1759" name="sthref1759"></a>If a method is of locking type <code>WRITE</code>, client access to all the singleton's methods is blocked until the current client finishes its method call or an access timeout occurs. When an access timeout occurs, the EJB container throws a <code>javax.ejb.ConcurrentAccessTimeoutException</code>. The <code>javax.ejb.AccessTimeout</code> annotation is used to specify the number of milliseconds before an access timeout occurs. If added at the class level of a singleton, <code>@AccessTimeout</code> specifies the access timeout value for all methods in the singleton unless a method explicitly overrides the default with its own <code>@AccessTimeout</code> annotation.</p>
<p>The <code>@AccessTimeout</code> annotation can be applied to both <code>@Lock(LockType.READ)</code> and <code>@Lock(LockType.WRITE)</code> methods. The <code>@AccessTimeout</code> annotation has one required element, <code>value</code>, and one optional element, <code>unit</code>. By default, the <code>value</code> is specified in milliseconds. To change the <code>value</code> unit, set <code>unit</code> to one of the <code>java.util.concurrent.TimeUnit</code> constants: <code>NANOSECONDS</code>, <code>MICROSECONDS</code>, <code>MILLISECONDS</code>, or <code>SECONDS</code>.</p>
<p>The following singleton has a default access timeout value of 120,000 milliseconds, or 2 minutes. The <code>doTediousOperation</code> method overrides the default access timeout and sets the value to 360,000 milliseconds, or 6 minutes:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Singleton
@AccessTimeout(value=120000)
public class StatusSingletonBean {
  private String status;

  @Lock(LockType.WRITE)
  public void setStatus(String new Status) {
    status = newStatus;
  }

  @Lock(LockType.WRITE)
  @AccessTimeout(value=360000)
  public void doTediousOperation {
    ...
  }
}
</pre>
<p>The following singleton has a default access timeout value of 60 seconds, specified using the <code>TimeUnit.SECONDS</code> constant:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Singleton
@AccessTimeout(value=60, unit=TimeUnit.SECONDS)
public class StatusSingletonBean { ... }
</pre>
<p><a id="sthref1760" name="sthref1760"></a><span class="bold">Bean-Managed Concurrency</span></p>
<p>Singletons that use <span class="glossaryterm">bean-managed concurrency</span> allow full concurrent access to all the business and timeout methods in the singleton. The developer of the singleton is responsible for ensuring that the state of the singleton is synchronized across all clients. Developers who create singletons with bean-managed concurrency are allowed to use the Java programming language synchronization primitives, such as <code>synchronization</code> and <code>volatile</code>, to prevent errors during concurrent access.</p>
<p>Add a <code>@ConcurrencyManagement</code> annotation with the type set to <code>ConcurrencyManagementType.BEAN</code> at the class level of the singleton to specify bean-managed concurrency:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="bold">@ConcurrencyManagement(ConcurrencyManagementType.BEAN) </span>
@Singleton
public class AnotherSingletonBean { ... }
</pre></div>
<!-- class="sect3" -->
<a id="GIPVD" name="GIPVD"></a><a id="JEETT00658" name="JEETT00658"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">34.2.1.3</span> <a id="sthref1761" name="sthref1761"></a>Handling Errors in a Singleton Session Bean</h3>
<p>If a singleton session bean encounters an error when initialized by the EJB container, that singleton instance will be destroyed.</p>
<p>Unlike other enterprise beans, once a singleton session bean instance is initialized, it is not destroyed if the singleton's business or lifecycle methods cause system exceptions. This ensures that the same singleton instance is used throughout the application lifecycle.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="GIPXL" name="GIPXL"></a><a id="JEETT01100" name="JEETT01100"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">34.2.2</span> The Architecture of the counter Example</h2>
<p>The <code>counter</code> example consists of a singleton session bean, <code>CounterBean</code>, and a JavaServer Faces Facelets web front end.</p>
<p><code>CounterBean</code> is a simple singleton with one method, <code>getHits</code>, that returns an integer representing the number of times a web page has been accessed. Here is the code of <code>CounterBean</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
package javaeetutorial.counter.ejb;

import javax.ejb.Singleton;

/**
 * CounterBean is a simple singleton session bean that records the number
 * of hits to a web page.
 */
@Singleton
public class CounterBean {
    private int hits = 1;

    // Increment and return the number of hits
    public int getHits() {
        return hits++;
    }
}
</pre>
<p>The <code>@Singleton</code> annotation marks <code>CounterBean</code> as a singleton session bean. <code>CounterBean</code> uses a local, no-interface view.</p>
<p><code>CounterBean</code> uses the EJB container's default metadata values for singletons to simplify the coding of the singleton implementation class. There is no <code>@ConcurrencyManagement</code> annotation on the class, so the default of container-managed concurrency access is applied. There is no <code>@Lock</code> annotation on the class or business method, so the default of <code>@Lock(WRITE)</code> is applied to the only business method, <code>getHits</code>.</p>
<p>The following version of <code>CounterBean</code> is functionally equivalent to the preceding version:</p>
<pre xml:space="preserve" class="oac_no_warn">
package javaeetutorial.counter.ejb;

import javax.ejb.Singleton;
import javax.ejb.ConcurrencyManagement;
import static javax.ejb.ConcurrencyManagementType.CONTAINER;
import javax.ejb.Lock;
import javax.ejb.LockType.WRITE;

/**
 * CounterBean is a simple singleton session bean that records the number
 * of hits to a web page.
 */
@Singleton
@ConcurrencyManagement(CONTAINER)
public class CounterBean {
    private int hits = 1;

    // Increment and return the number of hits
    @Lock(WRITE)
    public int getHits() {
        return hits++;
    }
}
</pre>
<p>The web front end of <code>counter</code> consists of a JavaServer Faces managed bean, <code>Count.java</code>, that is used by the Facelets XHTML files <code>template.xhtml</code> and <code>index.xhtml</code>. The <code>Count</code> JavaServer Faces managed bean obtains a reference to <code>CounterBean</code> through dependency injection. <code>Count</code> defines a <code>hitCount</code> JavaBeans property. When the <code>getHitCount</code> getter method is called from the XHTML files, <code>CounterBean</code>'s <code>getHits</code> method is called to return the current number of page hits.</p>
<p>Here's the <code>Count</code> managed bean class:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Named
@ConversationScoped
public class Count implements Serializable {
    @EJB
    private CounterBean counterBean;

    private int hitCount;

    public Count() {
        this.hitCount = 0;
    }

    public int getHitCount() {
        hitCount = counterBean.getHits();
        return hitCount;
    }

    public void setHitCount(int newHits) {
        this.hitCount = newHits;
    }
}
</pre>
<p>The <code>template.xhtml</code> and <code>index.xhtml</code> files are used to render a Facelets view that displays the number of hits to that view. The <code>index.xhtml</code> file uses an expression language statement, <code>#{count.hitCount}</code>, to access the <code>hitCount</code> property of the <code>Count</code> managed bean. Here is the content of <code>index.xhtml</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;html lang="en"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:h="http://xmlns.jcp.org/jsf/html"&gt;
    &lt;ui:composition template="/template.xhtml"&gt;
        &lt;ui:define name="title"&gt;
            This page has been accessed <span class="bold">#{count.hitCount} </span>time(s).
        &lt;/ui:define&gt;
        &lt;ui:define name="body"&gt;
            Hooray!
        &lt;/ui:define&gt;
    &lt;/ui:composition&gt;
&lt;/html&gt;
</pre></div>
<!-- class="sect2" -->
<a id="GIPVL" name="GIPVL"></a><a id="JEETT01101" name="JEETT01101"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">34.2.3</span> Running the counter Example</h2>
<p>You can use either NetBeans IDE or Maven to build, package, deploy, and run the <code>counter</code> example.</p>
<a id="GIPXT" name="GIPXT"></a><a id="JEETT00199" name="JEETT00199"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">34.2.3.1</span> To Run the counter Example Using NetBeans IDE</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/ejb
</pre></li>
<li>
<p>Select the <code>counter</code> folder.</p>
</li>
<li>
<p>Click <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>counter</code> project and select <span class="gui-object-action">Run</span>.</p>
<p>A web browser will open the URL <code>http://localhost:8080/counter</code>, which displays the number of hits.</p>
</li>
<li>
<p>Reload the page to see the hit count increment.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="GIPZW" name="GIPZW"></a><a id="JEETT00200" name="JEETT00200"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">34.2.3.2</span> To Run the counter Example Using Maven</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>In a terminal window, go to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/ejb/counter/
</pre></li>
<li>
<p>Enter the following command:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre>
<p>This will build and deploy <code>counter</code> to your GlassFish Server instance.</p>
</li>
<li>
<p>In a web browser, enter the following URL:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/counter
</pre></li>
<li>
<p>Reload the page to see the hit count increment.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="ejb-basicexamples001.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="ejb-basicexamples003.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

