<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:0Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="User Interface Component Model" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:User Interface Component Model | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<ul style="list-style-type:none">
<li><a href="jsf-intro001.htm#BNAPK"><span class="secnum">7.1</span> What Is a JavaServer Faces Application?</a></li>
<li><a href="jsf-intro002.htm#BNAPJ"><span class="secnum">7.2</span> JavaServer Faces Technology Benefits</a></li>
<li><a href="jsf-intro003.htm#GJAAM"><span class="secnum">7.3</span> A Simple JavaServer Faces Application</a></li>
<li><div id="backgroundColor"><a href="jsf-intro004.htm#BNAQD"><span class="secnum">7.4</span> User Interface Component Model</a><ul style="list-style-type:none">
<li><a href="jsf-intro004.htm#BNAQE"><span class="secnum">7.4.1</span> User Interface Component Classes</a></li>
<li><a href="jsf-intro004.htm#BNAQF"><span class="secnum">7.4.2</span> Component Rendering Model</a></li>
<li><a href="jsf-intro004.htm#BNAQI"><span class="secnum">7.4.3</span> Conversion Model</a></li>
<li><a href="jsf-intro004.htm#GIREH"><span class="secnum">7.4.4</span> Event and Listener Model</a></li>
<li><a href="jsf-intro004.htm#BNAQK"><span class="secnum">7.4.5</span> Validation Model</a></li>
</ul>
</div></li>
<li><a href="jsf-intro005.htm#BNAQL"><span class="secnum">7.5</span> Navigation Model</a></li>
<li><a href="jsf-intro006.htm#BNAQQ"><span class="secnum">7.6</span> The Lifecycle of a JavaServer Faces Application</a>
<ul style="list-style-type:none">
<li><a href="jsf-intro006.htm#GLPRC"><span class="secnum">7.6.1</span> Overview of the JavaServer Faces Lifecycle</a></li>
<li><a href="jsf-intro006.htm#BNAQS"><span class="secnum">7.6.2</span> Restore View Phase</a></li>
<li><a href="jsf-intro006.htm#BNAQT"><span class="secnum">7.6.3</span> Apply Request Values Phase</a></li>
<li><a href="jsf-intro006.htm#GJSBP"><span class="secnum">7.6.4</span> Process Validations Phase</a></li>
<li><a href="jsf-intro006.htm#BNAQV"><span class="secnum">7.6.5</span> Update Model Values Phase</a></li>
<li><a href="jsf-intro006.htm#BNAQW"><span class="secnum">7.6.6</span> Invoke Application Phase</a></li>
<li><a href="jsf-intro006.htm#BNAQX"><span class="secnum">7.6.7</span> Render Response Phase</a></li>
</ul>
</li>
<li><a href="jsf-intro007.htm#GKNOJ"><span class="secnum">7.7</span> Partial Processing and Partial Rendering</a></li>
<li><a href="jsf-intro008.htm#BNAQY"><span class="secnum">7.8</span> Further Information about JavaServer Faces Technology</a></li>
</ul>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jsf-intro003.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jsf-intro005.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BNAQD" name="BNAQD"></a><a id="JEETT00361" name="JEETT00361"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">7.4</span> User Interface Component Model</h1>
<p>In addition to the lifecycle description, an overview of JavaServer Faces architecture provides better understanding of the technology.</p>
<p>JavaServer Faces components are the building blocks of a JavaServer Faces view. A component can be a user interface (UI) component or a non-UI component.</p>
<p>JavaServer Faces UI components are configurable, reusable elements that compose the user interfaces of JavaServer Faces applications. A component can be simple, such as a button, or can be compound, such as a table composed of multiple components.</p>
<p>JavaServer Faces technology provides a rich, flexible component architecture that includes the following:</p>
<ul>
<li>
<p><a id="sthref236" name="sthref236"></a>A set of <code>javax.faces.component.UIComponent</code> classes for specifying the state and behavior of UI components</p>
</li>
<li>
<p><a id="sthref237" name="sthref237"></a>A rendering model that defines how to render the components in various ways</p>
</li>
<li>
<p><a id="sthref238" name="sthref238"></a><a id="sthref239" name="sthref239"></a>A conversion model that defines how to register data converters onto a component</p>
</li>
<li>
<p><a id="sthref240" name="sthref240"></a>An event and listener model that defines how to handle component events</p>
</li>
<li>
<p><a id="sthref241" name="sthref241"></a><a id="sthref242" name="sthref242"></a>A validation model that defines how to register validators onto a component</p>
</li>
</ul>
<p>This section briefly describes each of these pieces of the component architecture.</p>
<a id="BNAQE" name="BNAQE"></a><a id="JEETT00959" name="JEETT00959"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">7.4.1</span> User Interface Component Classes</h2>
<p><a id="sthref243" name="sthref243"></a><a id="sthref244" name="sthref244"></a>JavaServer Faces technology provides a set of UI component classes and associated behavioral interfaces that specify all the UI component functionality, such as holding component state, maintaining a reference to objects, and driving event handling and rendering for a set of standard components.</p>
<p>The component classes are completely extensible, allowing component writers to create their own custom components. See <a href="jsf-custom.htm#BNAVG">Chapter 15, "Creating Custom UI Components and Other Custom Objects"</a> for more information.</p>
<p><a id="sthref245" name="sthref245"></a>The abstract base class for all components is <code>javax.faces.component.UIComponent</code>. JavaServer Faces UI component classes extend the <code>UIComponentBase</code> class (a subclass of <code>UIComponent</code>), which defines the default state and behavior of a component. The following set of component classes is included with JavaServer Faces technology.</p>
<ul>
<li>
<p><a id="sthref246" name="sthref246"></a><code>UIColumn</code>: Represents a single column of data in a <code>UIData</code> component.</p>
</li>
<li>
<p><a id="sthref247" name="sthref247"></a><code>UICommand</code>: Represents a control that fires actions when activated.</p>
</li>
<li>
<p><a id="sthref248" name="sthref248"></a><code>UIData</code>: Represents a data binding to a collection of data represented by a <code>javax.faces.model.DataModel</code> instance.</p>
</li>
<li>
<p><a id="sthref249" name="sthref249"></a><code>UIForm</code>: Represents an input form to be presented to the user. Its child components represent (among other things) the input fields to be included when the form is submitted. This component is analogous to the <code>form</code> tag in HTML.</p>
</li>
<li>
<p><a id="sthref250" name="sthref250"></a><code>UIGraphic</code>: Displays an image.</p>
</li>
<li>
<p><a id="sthref251" name="sthref251"></a><code>UIInput</code>: Takes data input from a user. This class is a subclass of <code>UIOutput</code>.</p>
</li>
<li>
<p><a id="sthref252" name="sthref252"></a><code>UIMessage</code>: Displays a localized error message.</p>
</li>
<li>
<p><a id="sthref253" name="sthref253"></a><code>UIMessages</code>: Displays a set of localized error messages.</p>
</li>
<li>
<p><a id="sthref254" name="sthref254"></a><code>UIOutcomeTarget</code>: Displays a link in the form of a link or a button.</p>
</li>
<li>
<p><a id="sthref255" name="sthref255"></a><code>UIOutput</code>: Displays data output on a page.</p>
</li>
<li>
<p><a id="sthref256" name="sthref256"></a><code>UIPanel</code>: Manages the layout of its child components.</p>
</li>
<li>
<p><a id="sthref257" name="sthref257"></a><code>UIParameter</code>: Represents substitution parameters.</p>
</li>
<li>
<p><a id="sthref258" name="sthref258"></a><code>UISelectBoolean</code>: Allows a user to set a <code>boolean</code> value on a control by selecting or deselecting it. This class is a subclass of the <code>UIInput</code> class.</p>
</li>
<li>
<p><a id="sthref259" name="sthref259"></a><code>UISelectItem</code>: Represents a single item in a set of items.</p>
</li>
<li>
<p><a id="sthref260" name="sthref260"></a><code>UISelectItems</code>: Represents an entire set of items.</p>
</li>
<li>
<p><a id="sthref261" name="sthref261"></a><code>UISelectMany</code>: Allows a user to select multiple items from a group of items. This class is a subclass of the <code>UIInput</code> class.</p>
</li>
<li>
<p><a id="sthref262" name="sthref262"></a><code>UISelectOne</code>: Allows a user to select one item from a group of items. This class is a subclass of the <code>UIInput</code> class.</p>
</li>
<li>
<p><code>UIViewParameter</code>: Represents the query parameters in a request. This class is a subclass of the <code>UIInput</code> class.</p>
</li>
<li>
<p><a id="sthref263" name="sthref263"></a><code>UIViewRoot</code>: Represents the root of the component tree.</p>
</li>
</ul>
<p><a id="sthref264" name="sthref264"></a>In addition to extending <code>UIComponentBase</code>, the component classes also implement one or more <span class="glossaryterm">behavioral interfaces</span>, each of which defines certain behavior for a set of components whose classes implement the interface.</p>
<p>These behavioral interfaces, all defined in the <code>javax.faces.component</code> package unless otherwise stated, are as follows.</p>
<ul>
<li>
<p><a id="sthref265" name="sthref265"></a><code>ActionSource</code>: Indicates that the component can fire an action event. This interface is intended for use with components based on JavaServer Faces technology 1.1_01 and earlier versions. This interface is deprecated in JavaServer Faces 2.</p>
</li>
<li>
<p><a id="sthref266" name="sthref266"></a><code>ActionSource2</code>: Extends <code>ActionSource</code> and therefore provides the same functionality. However, it allows components to use the Expression Language (EL) when they are referencing methods that handle action events.</p>
</li>
<li>
<p><a id="sthref267" name="sthref267"></a><code>EditableValueHolder</code>: Extends <code>ValueHolder</code> and specifies additional features for editable components, such as validation and emitting value-change events.</p>
</li>
<li>
<p><a id="sthref268" name="sthref268"></a><a id="sthref269" name="sthref269"></a><code>NamingContainer</code>: Mandates that each component rooted at this component have a unique ID.</p>
</li>
<li>
<p><a id="sthref270" name="sthref270"></a><code>StateHolder</code>: Denotes that a component has state that must be saved between requests.</p>
</li>
<li>
<p><a id="sthref271" name="sthref271"></a><code>ValueHolder</code>: Indicates that the component maintains a local value as well as the option of accessing data in the model tier.</p>
</li>
<li>
<p><a id="sthref272" name="sthref272"></a><code>javax.faces.event.SystemEventListenerHolder</code>: Maintains a list of <code>javax.faces.event.SystemEventListener</code> instances for each type of <code>javax.faces.event.SystemEvent</code> defined by that class.</p>
</li>
<li>
<p><a id="sthref273" name="sthref273"></a><code>javax.faces.component.behavior.ClientBehaviorHolder</code>: Adds the ability to attach <code>javax.faces.component.behavior.ClientBehavior</code> instances, such as a reusable script.</p>
</li>
</ul>
<p><code>UICommand</code> implements <code>ActionSource2</code> and <code>StateHolder</code>. <code>UIOutput</code> and component classes that extend <code>UIOutput</code> implement <code>StateHolder</code> and <code>ValueHolder</code>. <code>UIInput</code> and component classes that extend <code>UIInput</code> implement <code>EditableValueHolder</code>, <code>StateHolder</code>, and <code>ValueHolder</code>. <code>UIComponentBase</code> implements <code>StateHolder</code>.</p>
<p>Only component writers will need to use the component classes and behavioral interfaces directly. Page authors and application developers will use a standard component by including a tag that represents it on a page. Most of the components can be rendered in different ways on a page. For example, a <code>UICommand</code> component can be rendered as a button or a link.</p>
<p>The next section explains how the rendering model works and how page authors can choose to render the components by selecting the appropriate tags.</p>
</div>
<!-- class="sect2" -->
<a id="BNAQF" name="BNAQF"></a><a id="JEETT00960" name="JEETT00960"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">7.4.2</span> Component Rendering Model</h2>
<p><a id="sthref274" name="sthref274"></a><a id="sthref275" name="sthref275"></a>The JavaServer Faces component architecture is designed such that the functionality of the components is defined by the component classes, whereas the component rendering can be defined by a separate renderer class. This design has several benefits, including the following.</p>
<ul>
<li>
<p>Component writers can define the behavior of a component once but create multiple renderers, each of which defines a different way to render the component to the same client or to different clients.</p>
</li>
<li>
<p>Page authors and application developers can change the appearance of a component on the page by selecting the tag that represents the appropriate combination of component and renderer.</p>
</li>
</ul>
<p><a id="sthref276" name="sthref276"></a>A <span class="glossaryterm">render kit</span> defines how component classes map to component tags that are appropriate for a particular client. The JavaServer Faces implementation includes a standard HTML render kit for rendering to an HTML client.</p>
<p><a id="sthref277" name="sthref277"></a><a id="sthref278" name="sthref278"></a>The render kit defines a set of <code>javax.faces.render.Renderer</code> classes for each component that it supports. Each <code>Renderer</code> class defines a different way to render the particular component to the output defined by the render kit. For example, a <code>UISelectOne</code> component has three different renderers. One of them renders the component as a group of options. Another renders the component as a combo box. The third one renders the component as a list box. Similarly, a <code>UICommand</code> component can be rendered as a button or a link, using the <code>h:commandButton</code> or <code>h:commandLink</code> tag. The <code>command</code> part of each tag corresponds to the <code>UICommand</code> class, specifying the functionality, which is to fire an action. The <code>Button</code> or <code>Link</code> part of each tag corresponds to a separate <code>Renderer</code> class that defines how the component appears on the page.</p>
<p><a id="sthref279" name="sthref279"></a><a id="sthref280" name="sthref280"></a><a id="sthref281" name="sthref281"></a>Each custom tag defined in the standard HTML render kit is composed of the component functionality (defined in the <code>UIComponent</code> class) and the rendering attributes (defined by the <code>Renderer</code> class).</p>
<p><a id="sthref282" name="sthref282"></a><a id="sthref283" name="sthref283"></a>The section <a href="jsf-page002.htm#BNARF">Adding Components to a Page Using HTML Tag Library Tags</a> lists all supported component tags and illustrates how to use the tags in an example.</p>
<p>The JavaServer Faces implementation provides a custom tag library for rendering components in HTML.</p>
</div>
<!-- class="sect2" -->
<a id="BNAQI" name="BNAQI"></a><a id="JEETT00961" name="JEETT00961"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">7.4.3</span> <a id="sthref284" name="sthref284"></a>Conversion Model</h2>
<p><a id="sthref285" name="sthref285"></a>A JavaServer Faces application can optionally associate a component with server-side object data. This object is a JavaBeans component, such as a managed bean. An application gets and sets the object data for a component by calling the appropriate object properties for that component.</p>
<p><a id="sthref286" name="sthref286"></a>When a component is bound to an object, the application has two views of the component's data.</p>
<ul>
<li>
<p>The model view, in which data is represented as data types, such as <code>int</code> or <code>long</code>.</p>
</li>
<li>
<p>The presentation view, in which data is represented in a manner that can be read or modified by the user. For example, a <code>java.util.Date</code> might be represented as a text string in the format <code>mm/dd/yy</code> or as a set of three text strings.</p>
</li>
</ul>
<p>The JavaServer Faces implementation automatically converts component data between these two views when the bean property associated with the component is of one of the types supported by the component's data. For example, if a <code>UISelectBoolean</code> component is associated with a bean property of type <code>java.lang.Boolean</code>, the JavaServer Faces implementation will automatically convert the component's data from <code>String</code> to <code>Boolean</code>. In addition, some component data must be bound to properties of a particular type. For example, a <code>UISelectBoolean</code> component must be bound to a property of type <code>boolean</code> or <code>java.lang.Boolean</code>.</p>
<p><a id="sthref287" name="sthref287"></a><a id="sthref288" name="sthref288"></a>Sometimes you might want to convert a component's data to a type other than a standard type, or you might want to convert the format of the data. To facilitate this, JavaServer Faces technology allows you to register a <code>javax.faces.convert.Converter</code> implementation on <code>UIOutput</code> components and components whose classes subclass <code>UIOutput</code>. If you register the <code>Converter</code> implementation on a component, the <code>Converter</code> implementation converts the component's data between the two views.</p>
<p><a id="sthref289" name="sthref289"></a><a id="sthref290" name="sthref290"></a>You can either use the standard converters supplied with the JavaServer Faces implementation or create your own custom converter. Custom converter creation is covered in <a href="jsf-custom.htm#BNAVG">Chapter 15, "Creating Custom UI Components and Other Custom Objects"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="GIREH" name="GIREH"></a><a id="JEETT00962" name="JEETT00962"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">7.4.4</span> <a id="sthref291" name="sthref291"></a><a id="sthref292" name="sthref292"></a>Event and Listener Model</h2>
<p>The JavaServer Faces event and listener model is similar to the JavaBeans event model in that it has strongly typed event classes and listener interfaces that an application can use to handle events generated by components.</p>
<p>The JavaServer Faces specification defines three types of events: application events, system events, and data-model events.</p>
<p><span class="glossaryterm">Application events</span> are tied to a particular application and are generated by a <code>UIComponent</code>. They represent the standard events available in previous versions of JavaServer Faces technology.</p>
<p><a id="sthref293" name="sthref293"></a><a id="sthref294" name="sthref294"></a>An event object identifies the component that generated the event and stores information about the event. To be notified of an event, an application must provide an implementation of the listener class and must register it on the component that generates the event. When the user activates a component, such as by clicking a button, an event is fired. This causes the JavaServer Faces implementation to invoke the listener method that processes the event.</p>
<p>JavaServer Faces supports two kinds of application events: action events and value-change events.</p>
<p><a id="sthref295" name="sthref295"></a>An <span class="glossaryterm">action event</span> (class <code>javax.faces.event.ActionEvent</code>) occurs when the user activates a component that implements <code>ActionSource</code>. These components include buttons and links.</p>
<p><a id="sthref296" name="sthref296"></a><a id="sthref297" name="sthref297"></a>A <span class="glossaryterm">value-change event</span> (class <code>javax.faces.event.ValueChangeEvent</code>) occurs when the user changes the value of a component represented by <code>UIInput</code> or one of its subclasses. An example is selecting a check box, an action that results in the component's value changing to <code>true</code>. The component types that can generate these types of events are the <code>UIInput</code>, <code>UISelectOne</code>, <code>UISelectMany</code>, and <code>UISelectBoolean</code> components. Value-change events are fired only if no validation errors are detected.</p>
<p><a id="sthref298" name="sthref298"></a><a id="sthref299" name="sthref299"></a>Depending on the value of the <code>immediate</code> property (see <a href="jsf-page002.htm#BNARI">The immediate Attribute</a>) of the component emitting the event, action events can be processed during the Invoke Application phase or the Apply Request Values phase, and value-change events can be processed during the Process Validations phase or the Apply Request Values phase.</p>
<p><span class="glossaryterm">System events</span> are generated by an <code>Object</code> rather than a <code>UIComponent</code>. They are generated during the execution of an application at predefined times. They are applicable to the entire application rather than to a specific component.</p>
<p>A <span class="glossaryterm">data-model event</span> occurs when a new row of a <code>UIData</code> component is selected.</p>
<p>There are two ways to cause your application to react to action events or value-change events that are emitted by a standard component:</p>
<ul>
<li>
<p><a id="sthref300" name="sthref300"></a>Implement an event listener class to handle the event, and register the listener on the component by nesting either an <code>f:valueChangeListener</code> tag or an <code>f:actionListener</code> tag inside the component tag.</p>
</li>
<li>
<p><a id="sthref301" name="sthref301"></a><a id="sthref302" name="sthref302"></a>Implement a method of a managed bean to handle the event, and refer to the method with a method expression from the appropriate attribute of the component's tag.</p>
</li>
</ul>
<p>See <a href="jsf-custom006.htm#BNAUT">Implementing an Event Listener</a> for information on how to implement an event listener. See <a href="jsf-page-core002.htm#BNASZ">Registering Listeners on Components</a> for information on how to register the listener on a component.</p>
<p>See <a href="jsf-develop003.htm#BNAVD">Writing a Method to Handle an Action Event</a> and <a href="jsf-develop003.htm#BNAVF">Writing a Method to Handle a Value-Change Event</a> for information on how to implement managed bean methods that handle these events.</p>
<p>See <a href="jsf-page-core004.htm#BNATN">Referencing a Managed Bean Method</a> for information on how to refer to the managed bean method from the component tag.</p>
<p>When emitting events from custom components, you must implement the appropriate event class and manually queue the event on the component in addition to implementing an event listener class or a managed bean method that handles the event. <a href="jsf-custom007.htm#BNAWD">Handling Events for Custom Components</a> explains how to do this.</p>
</div>
<!-- class="sect2" -->
<a id="BNAQK" name="BNAQK"></a><a id="JEETT00963" name="JEETT00963"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">7.4.5</span> <a id="sthref303" name="sthref303"></a>Validation Model</h2>
<p><a id="sthref304" name="sthref304"></a><a id="sthref305" name="sthref305"></a>JavaServer Faces technology supports a mechanism for validating the local data of editable components (such as text fields). This validation occurs before the corresponding model data is updated to match the local value.</p>
<p><a id="sthref306" name="sthref306"></a><a id="sthref307" name="sthref307"></a><a id="sthref308" name="sthref308"></a>Like the conversion model, the validation model defines a set of standard classes for performing common data validation checks. The JavaServer Faces core tag library also defines a set of tags that correspond to the standard <code>javax.faces.validator.Validator</code> implementations. See <a href="jsf-page-core003.htm#BNATC">Using the Standard Validators</a> for a list of all the standard validation classes and corresponding tags.</p>
<p>Most of the tags have a set of attributes for configuring the validator's properties, such as the minimum and maximum allowable values for the component's data. The page author registers the validator on a component by nesting the validator's tag within the component's tag.</p>
<p>In addition to validators that are registered on the component, you can declare a default validator that is registered on all <code>UIInput</code> components in the application. For more information on default validators, see <a href="jsf-configure006.htm#GIREB">Using Default Validators</a>.</p>
<p>The validation model also allows you to create your own custom validator and corresponding tag to perform custom validation. The validation model provides two ways to implement custom validation.</p>
<ul>
<li>
<p><a id="sthref309" name="sthref309"></a>Implement a <code>Validator</code> interface that performs the validation.</p>
</li>
<li>
<p>Implement a managed bean method that performs the validation.</p>
</li>
</ul>
<p>If you are implementing a <code>Validator</code> interface, you must also do the following.</p>
<ul>
<li>
<p>Register the <code>Validator</code> implementation with the application.</p>
</li>
<li>
<p><a id="sthref310" name="sthref310"></a><a id="sthref311" name="sthref311"></a><a id="sthref312" name="sthref312"></a>Create a custom tag or use an <code>f:validator</code> tag to register the validator on the component.</p>
</li>
</ul>
<p>In the previously described standard validation model, the validator is defined for each input component on a page. The Bean Validation model allows the validator to be applied to all fields in a page. See <a href="bean-validation.htm#CHDGJIIA">Chapter 21, "Introduction to Bean Validation"</a> and <a href="bean-validation-advanced.htm#GKAHP">Chapter 22, "Bean Validation: Advanced Topics"</a> for more information on Bean Validation.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jsf-intro003.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jsf-intro005.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

