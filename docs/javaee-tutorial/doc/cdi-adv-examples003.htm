<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:2Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="The producerfields Example: Using Producer Fields to Generate Resources" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:The producerfields Example: Using Producer Fields to Generate Resources | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples001.htm#GKHPU"><span class="secnum">26.1</span> The encoder Example: Using Alternatives</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples001.htm#GKHQA"><span class="secnum">26.1.1</span> The Coder Interface and Implementations</a></li>
<li><a href="cdi-adv-examples001.htm#GKHPM"><span class="secnum">26.1.2</span> The encoder Facelets Page and Managed Bean</a></li>
<li><a href="cdi-adv-examples001.htm#GKHQQ"><span class="secnum">26.1.3</span> Running the encoder Example</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples001.htm#GKHOW"><span class="secnum">26.1.3.1</span> To Build, Package, and Deploy the encoder Example Using NetBeans IDE</a></li>
<li><a href="cdi-adv-examples001.htm#GKHQU"><span class="secnum">26.1.3.2</span> To Run the encoder Example Using NetBeans IDE</a></li>
<li><a href="cdi-adv-examples001.htm#GKHQL"><span class="secnum">26.1.3.3</span> To Build, Package, and Deploy the encoder Example Using Maven</a></li>
<li><a href="cdi-adv-examples001.htm#GKHOL"><span class="secnum">26.1.3.4</span> To Run the encoder Example Using Maven</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="cdi-adv-examples002.htm#GKHPY"><span class="secnum">26.2</span> The producermethods Example: Using a Producer Method to Choose a Bean Implementation</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples002.htm#GKHRO"><span class="secnum">26.2.1</span> Components of the producermethods Example</a></li>
<li><a href="cdi-adv-examples002.htm#GKHQE"><span class="secnum">26.2.2</span> Running the producermethods Example</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples002.htm#GKHPE"><span class="secnum">26.2.2.1</span> To Build, Package, and Deploy the producermethods Example Using NetBeans IDE</a></li>
<li><a href="cdi-adv-examples002.htm#GKHPS"><span class="secnum">26.2.2.2</span> To Build, Package, and Deploy the producermethods Example Using Maven</a></li>
<li><a href="cdi-adv-examples002.htm#GKHQG"><span class="secnum">26.2.2.3</span> To Run the producermethods Example</a></li>
</ul>
</li>
</ul>
</li>
<li><div id="backgroundColor"><a href="cdi-adv-examples003.htm#GKHRG"><span class="secnum">26.3</span> The producerfields Example: Using Producer Fields to Generate Resources</a><ul style="list-style-type:none">
<li><a href="cdi-adv-examples003.htm#GKHPP"><span class="secnum">26.3.1</span> The Producer Field for the producerfields Example</a></li>
<li><a href="cdi-adv-examples003.htm#GKHPD"><span class="secnum">26.3.2</span> The producerfields Entity and Session Bean</a></li>
<li><a href="cdi-adv-examples003.htm#GKHPF"><span class="secnum">26.3.3</span> The producerfields Facelets Pages and Managed Bean</a></li>
<li><a href="cdi-adv-examples003.htm#GKHRH"><span class="secnum">26.3.4</span> Running the producerfields Example</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples003.htm#GKHPB"><span class="secnum">26.3.4.1</span> To Build, Package, and Deploy the producerfields Example Using NetBeans IDE</a></li>
<li><a href="cdi-adv-examples003.htm#GKHRM"><span class="secnum">26.3.4.2</span> To Build, Package, and Deploy the producerfields Example Using Maven</a></li>
<li><a href="cdi-adv-examples003.htm#GKHRR"><span class="secnum">26.3.4.3</span> To Run the producerfields Example</a></li>
</ul>
</li>
</ul>
</div></li>
<li><a href="cdi-adv-examples004.htm#GKHPA"><span class="secnum">26.4</span> The billpayment Example: Using Events and Interceptors</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples004.htm#GKHOK"><span class="secnum">26.4.1</span> The PaymentEvent Event Class</a></li>
<li><a href="cdi-adv-examples004.htm#GKHRB"><span class="secnum">26.4.2</span> The PaymentHandler Event Listener</a></li>
<li><a href="cdi-adv-examples004.htm#GKHRJ"><span class="secnum">26.4.3</span> The billpayment Facelets Pages and Managed Bean</a></li>
<li><a href="cdi-adv-examples004.htm#GKHRQ"><span class="secnum">26.4.4</span> The LoggedInterceptor Interceptor Class</a></li>
<li><a href="cdi-adv-examples004.htm#GKHPK"><span class="secnum">26.4.5</span> Running the billpayment Example</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples004.htm#GKHQS"><span class="secnum">26.4.5.1</span> To Build, Package, and Deploy the billpayment Example Using NetBeans IDE</a></li>
<li><a href="cdi-adv-examples004.htm#GKHPX"><span class="secnum">26.4.5.2</span> To Build, Package, and Deploy the billpayment Example Using Maven</a></li>
<li><a href="cdi-adv-examples004.htm#GKHPT"><span class="secnum">26.4.5.3</span> To Run the billpayment Example</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="cdi-adv-examples005.htm#GKPAX"><span class="secnum">26.5</span> The decorators Example: Decorating a Bean</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples005.htm#GKPAQ"><span class="secnum">26.5.1</span> Components of the decorators Example</a></li>
<li><a href="cdi-adv-examples005.htm#GKPBK"><span class="secnum">26.5.2</span> Running the decorators Example</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples005.htm#GKPAG"><span class="secnum">26.5.2.1</span> To Build, Package, and Deploy the decorators Example Using NetBeans IDE</a></li>
<li><a href="cdi-adv-examples005.htm#GKPAJ"><span class="secnum">26.5.2.2</span> To Build, Package, and Deploy the decorators Example Using Maven</a></li>
<li><a href="cdi-adv-examples005.htm#GKPAN"><span class="secnum">26.5.2.3</span> To Run the decorators Example</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="cdi-adv-examples002.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="cdi-adv-examples004.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="GKHRG" name="GKHRG"></a><a id="JEETT00485" name="JEETT00485"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">26.3</span> <a id="sthref1446" name="sthref1446"></a>The producerfields Example: Using Producer Fields to Generate Resources</h1>
<p>The <code>producerfields</code> example, which allows you to create a to-do list, shows how to use a producer field to generate objects that can then be managed by the container. This example generates an <code>EntityManager</code> object, but resources such as JDBC connections and datasources can also be generated this way.</p>
<p>The <code>producerfields</code> example is the simplest possible entity example. It also contains a qualifier and a class that generates the entity manager. It also contains a single entity, a stateful session bean, a Facelets page, and a managed bean.</p>
<p>The source files are located in the <span class="variable">tut-install</span><code>/examples/cdi/producerfields/src/main/java/javaeetutorial/producerfields/</code> directory.</p>
<a id="GKHPP" name="GKHPP"></a><a id="JEETT01139" name="JEETT01139"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">26.3.1</span> The Producer Field for the producerfields Example</h2>
<p>The most important component of the <code>producerfields</code> example is the smallest, the <code>db.UserDatabaseEntityManager</code> class, which isolates the generation of the <code>EntityManager</code> object so it can easily be used by other components in the application. The class uses a producer field to inject an <code>EntityManager</code> annotated with the <code>@UserDatabase</code> qualifier, also defined in the <code>db</code> package:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Singleton
public class UserDatabaseEntityManager {

    @Produces
    @PersistenceContext
    @UserDatabase
    private EntityManager em;
    ...
}
</pre>
<p>The class does not explicitly produce a persistence unit field, but the application has a <code>persistence.xml</code> file that specifies a persistence unit. The class is annotated <code>javax.inject.Singleton</code> to specify that the injector should instantiate it only once.</p>
<p>The <code>db.UserDatabaseEntityManager</code> class also contains commented-out code that uses <code>create</code> and <code>close</code> methods to generate and remove the producer field:</p>
<pre xml:space="preserve" class="oac_no_warn">
 /* @PersistenceContext
    private EntityManager em;

    @Produces
    @UserDatabase
    public EntityManager create() {
        return em;
    } */

    public void close(@Disposes @UserDatabase EntityManager em) {
        em.close();
    }
</pre>
<p>You can remove the comment indicators from this code and place them around the field declaration to test how the methods work. The behavior of the application is the same with either mechanism.</p>
<p>The advantage of producing the <code>EntityManager</code> in a separate class rather than simply injecting it into an enterprise bean is that the object can easily be reused in a typesafe way. Also, a more complex application can create multiple entity managers using multiple persistence units, and this mechanism isolates this code for easy maintenance, as in the following example:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Singleton
public class JPAResourceProducer {
    @Produces 
    @PersistenceUnit(unitName="pu3")
    @TestDatabase 
    EntityManagerFactory customerDatabasePersistenceUnit;

    @Produces 
    @PersistenceContext(unitName="pu3")
    @TestDatabase 
    EntityManager customerDatabasePersistenceContext;
    
    @Produces 
    @PersistenceUnit(unitName="pu4")
    @Documents
    EntityManagerFactory customerDatabasePersistenceUnit;

    @Produces 
    @PersistenceContext(unitName="pu4")
    @Documents 
    EntityManager docDatabaseEntityManager;"
}
</pre>
<p>The <code>EntityManagerFactory</code> declarations also allow applications to use an application-managed entity manager.</p>
</div>
<!-- class="sect2" -->
<a id="GKHPD" name="GKHPD"></a><a id="JEETT01140" name="JEETT01140"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">26.3.2</span> The producerfields Entity and Session Bean</h2>
<p>The <code>producerfields</code> example contains a simple entity class, <code>entity.ToDo</code>, and a stateful session bean, <code>ejb.RequestBean</code>, that uses it.</p>
<p>The entity class contains three fields: an autogenerated <code>id</code> field, a string specifying the task, and a timestamp. The timestamp field, <code>timeCreated</code>, is annotated with <code>@Temporal</code>, which is required for persistent <code>Date</code> fields.</p>
<pre xml:space="preserve" class="oac_no_warn">
@Entity
public class ToDo implements Serializable {

    ...
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
    protected String taskText;
    @Temporal(TIMESTAMP)
    protected Date timeCreated;

    public ToDo() {
    }

    public ToDo(Long id, String taskText, Date timeCreated) {
        this.id = id;
        this.taskText = taskText;
        this.timeCreated = timeCreated;
    }
    ...
</pre>
<p>The remainder of the <code>ToDo</code> class contains the usual getters, setters, and other entity methods.</p>
<p>The <code>RequestBean</code> class injects the <code>EntityManager</code> generated by the producer method, annotated with the <code>@UserDatabase</code> qualifier:</p>
<pre xml:space="preserve" class="oac_no_warn">
@ConversationScoped
@Stateful
public class RequestBean {

    @Inject
    @UserDatabase
    EntityManager em;
</pre>
<p>It then defines two methods, one that creates and persists a single <code>ToDo</code> list item, and another that retrieves all the <code>ToDo</code> items created so far by creating a query:</p>
<pre xml:space="preserve" class="oac_no_warn">
    public ToDo createToDo(String inputString) {
        ToDo toDo = null;
        Date currentTime = Calendar.getInstance().getTime();

        try {
            toDo = new ToDo();
            toDo.setTaskText(inputString);
            toDo.setTimeCreated(currentTime);
            em.persist(toDo);
            return toDo;
        } catch (Exception e) {
            throw new EJBException(e.getMessage());
        }
    }

    public List&lt;ToDo&gt; getToDos() {
        try {
             List&lt;ToDo&gt; toDos =
                    (List&lt;ToDo&gt;) em.createQuery(
                    "SELECT t FROM ToDo t ORDER BY t.timeCreated")
                    .getResultList();
            return toDos;
        } catch (Exception e) {
            throw new EJBException(e.getMessage());
        }
    }
}
</pre></div>
<!-- class="sect2" -->
<a id="GKHPF" name="GKHPF"></a><a id="JEETT01141" name="JEETT01141"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">26.3.3</span> The producerfields Facelets Pages and Managed Bean</h2>
<p>The <code>producerfields</code> example has two Facelets pages, <code>index.xhtml</code> and <code>todolist.xhtml</code>. The simple form on the <code>index.xhtml</code> page asks the user only for the task. When the user clicks the <span class="gui-object-action">Submit</span> button, the <code>listBean.createTask</code> method is called. When the user clicks the <span class="gui-object-action">Show Items</span> button, the action specifies that the <code>todolist.xhtml</code> file should be displayed:</p>
<pre xml:space="preserve" class="oac_no_warn">
    &lt;h:body&gt;
        &lt;h2&gt;To Do List&lt;/h2&gt;
        &lt;p&gt;Enter a task to be completed.&lt;/p&gt;
        &lt;h:form id="todolist"&gt;
            &lt;p&gt;&lt;h:outputLabel value="Enter a string: " for="inputString"/&gt;
                &lt;h:inputText id="inputString"
                             value="#{listBean.inputString}"/&gt;&lt;/p&gt;
            &lt;p&gt;&lt;h:commandButton value="Submit"
                                action="#{listBean.createTask()}"/&gt;&lt;/p&gt;
            &lt;p&gt;&lt;h:commandButton value="Show Items"
                                action="todolist"/&gt;&lt;/p&gt;
        &lt;/h:form&gt;
        ...
    &lt;/h:body&gt;
</pre>
<p>The managed bean, <code>web.ListBean</code>, injects the <code>ejb.RequestBean</code> session bean. It declares the <code>entity.ToDo</code> entity and a list of the entity along with the input string that it passes to the session bean. The <code>inputString</code> is annotated with the <code>@NotNull</code> Bean Validation constraint, so an attempt to submit an empty string results in an error.</p>
<pre xml:space="preserve" class="oac_no_warn">
@Named
@ConversationScoped
public class ListBean implements Serializable {

    ...
    @EJB
    private RequestBean request;
    @NotNull
    private String inputString;
    private ToDo toDo;
    private List&lt;ToDo&gt; toDos;
</pre>
<p>The <code>createTask</code> method called by the <span class="gui-object-action">Submit</span> button calls the <code>createToDo</code> method of <code>RequestBean</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
    public void createTask() {
        this.toDo = request.createToDo(inputString);
    }
</pre>
<p>The <code>getToDos</code> method, which is called by the <code>todolist.xhtml</code> page, calls the <code>getToDos</code> method of <code>RequestBean</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
public List&lt;ToDo&gt; getToDos() {
        return request.getToDos();
    }
</pre>
<p>To force the Facelets page to recognize an empty string as a null value and return an error, the <code>web.xml</code> file sets the context parameter <code>javax.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL</code> to <code>true</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;context-param&gt;
  &lt;param-name&gt;javax.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL&lt;/param-name&gt;
  &lt;param-value&gt;true&lt;/param-value&gt;
&lt;/context-param&gt;
</pre>
<p>The <code>todolist.xhtml</code> page is a little more complicated than the <code>index.html</code> page. It contains a <code>dataTable</code> element that displays the contents of the <code>ToDo</code> list. The body of the page looks like this:</p>
<pre xml:space="preserve" class="oac_no_warn">
    &lt;body&gt;
        &lt;h2&gt;To Do List&lt;/h2&gt;
        &lt;h:form id="showlist"&gt;
            &lt;h:dataTable var="toDo"
                         value="#{listBean.toDos}"
                         rules="all"
                         border="1"
                         cellpadding="5"&gt;
                &lt;h:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Time Stamp" /&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="#{toDo.timeCreated}" /&gt;
                &lt;/h:column&gt;
                &lt;h:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Task" /&gt;
                    &lt;/f:facet&gt;
                    &lt;h:outputText value="#{toDo.taskText}" /&gt;
                &lt;/h:column&gt;
            &lt;/h:dataTable&gt;
            &lt;p&gt;&lt;h:commandButton id="back" value="Back" action="index" /&gt;&lt;/p&gt;
        &lt;/h:form&gt;
    &lt;/body&gt;
</pre>
<p>The value of the <code>dataTable</code> is <code>listBean.toDos</code>, the list returned by the managed bean's <code>getToDos</code> method, which in turn calls the session bean's <code>getToDos</code> method. Each row of the table displays the <code>timeCreated</code> and <code>taskText</code> fields of the individual task. Finally, a <span class="gui-object-action">Back</span> button returns the user to the <code>index.xhtml</code> page.</p>
</div>
<!-- class="sect2" -->
<a id="GKHRH" name="GKHRH"></a><a id="JEETT01142" name="JEETT01142"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">26.3.4</span> Running the producerfields Example</h2>
<p>You can use either NetBeans IDE or Maven to build, package, deploy, and run the <code>producerfields</code> application.</p>
<a id="GKHPB" name="GKHPB"></a><a id="JEETT00226" name="JEETT00226"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">26.3.4.1</span> To Build, Package, and Deploy the producerfields Example Using NetBeans IDE</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>If the database server is not already running, start it by following the instructions in <a href="usingexamples004.htm#BNADK">Starting and Stopping the Java DB Server</a>.</p>
</li>
<li>
<p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/cdi
</pre></li>
<li>
<p>Select the <code>producerfields</code> folder.</p>
</li>
<li>
<p>Click <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>producerfields</code> project and select <span class="gui-object-action">Build</span>.</p>
<p>This command builds and packages the application into a WAR file, <code>producerfields.war</code>, located in the <code>target</code> directory, and then deploys it to GlassFish Server.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="GKHRM" name="GKHRM"></a><a id="JEETT00227" name="JEETT00227"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">26.3.4.2</span> To Build, Package, and Deploy the producerfields Example Using Maven</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>If the database server is not already running, start it by following the instructions in <a href="usingexamples004.htm#BNADK">Starting and Stopping the Java DB Server</a>.</p>
</li>
<li>
<p>In a terminal window, go to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/cdi/producerfields/
</pre></li>
<li>
<p>Enter the following command to deploy the application:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre>
<p>This command builds and packages the application into a WAR file, <code>producerfields.war</code>, located in the <code>target</code> directory, and then deploys it to GlassFish Server.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="GKHRR" name="GKHRR"></a><a id="JEETT00228" name="JEETT00228"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">26.3.4.3</span> To Run the producerfields Example</h3>
<ol>
<li>
<p>In a web browser, enter the following URL:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/producerfields
</pre></li>
<li>
<p>On the <span class="gui-object-title">Create To Do List</span> page, enter a string in the field and click <span class="gui-object-action">Submit</span>.</p>
<p>You can enter additional strings and click <span class="gui-object-action">Submit</span> to create a task list with multiple items.</p>
</li>
<li>
<p>Click <span class="gui-object-action">Show Items</span>.</p>
<p>The <span class="gui-object-title">To Do List</span> page opens, showing the timestamp and text for each item you created.</p>
</li>
<li>
<p>Click <span class="gui-object-action">Back</span> to return to the <span class="gui-object-title">Create To Do List</span> page.</p>
<p>On this page, you can enter more items in the list.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="cdi-adv-examples002.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="cdi-adv-examples004.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

