<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:2Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Accessing Enterprise Beans" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Accessing Enterprise Beans | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<ul style="list-style-type:none">
<li><a href="ejb-intro001.htm#GIPMB"><span class="secnum">32.1</span> What Is an Enterprise Bean?</a>
<ul style="list-style-type:none">
<li><a href="ejb-intro001.htm#GIPLK"><span class="secnum">32.1.1</span> Benefits of Enterprise Beans</a></li>
<li><a href="ejb-intro001.htm#GIPKN"><span class="secnum">32.1.2</span> When to Use Enterprise Beans</a></li>
<li><a href="ejb-intro001.htm#GIPNM"><span class="secnum">32.1.3</span> Types of Enterprise Beans</a></li>
</ul>
</li>
<li><a href="ejb-intro002.htm#GIPJG"><span class="secnum">32.2</span> What Is a Session Bean?</a>
<ul style="list-style-type:none">
<li><a href="ejb-intro002.htm#GIPKR"><span class="secnum">32.2.1</span> Types of Session Beans</a>
<ul style="list-style-type:none">
<li><a href="ejb-intro002.htm#GIPNL"><span class="secnum">32.2.1.1</span> Stateful Session Beans</a></li>
<li><a href="ejb-intro002.htm#GIPIN"><span class="secnum">32.2.1.2</span> Stateless Session Beans</a></li>
<li><a href="ejb-intro002.htm#GIPIM"><span class="secnum">32.2.1.3</span> Singleton Session Beans</a></li>
</ul>
</li>
<li><a href="ejb-intro002.htm#GIPMT"><span class="secnum">32.2.2</span> When to Use Session Beans</a></li>
</ul>
</li>
<li><a href="ejb-intro003.htm#GIPKO"><span class="secnum">32.3</span> What Is a Message-Driven Bean?</a>
<ul style="list-style-type:none">
<li><a href="ejb-intro003.htm#GIPMJ"><span class="secnum">32.3.1</span> What Makes Message-Driven Beans Different from Session Beans?</a></li>
<li><a href="ejb-intro003.htm#GIPJX"><span class="secnum">32.3.2</span> When to Use Message-Driven Beans</a></li>
</ul>
</li>
<li><div id="backgroundColor"><a href="ejb-intro004.htm#GIPJF"><span class="secnum">32.4</span> Accessing Enterprise Beans</a><ul style="list-style-type:none">
<li><a href="ejb-intro004.htm#GIRFL"><span class="secnum">32.4.1</span> Using Enterprise Beans in Clients</a>
<ul style="list-style-type:none">
<li><a href="ejb-intro004.htm#GIRGN"><span class="secnum">32.4.1.1</span> Portable JNDI Syntax</a></li>
</ul>
</li>
<li><a href="ejb-intro004.htm#GIPIZ"><span class="secnum">32.4.2</span> Deciding on Remote or Local Access</a></li>
<li><a href="ejb-intro004.htm#GIPMZ"><span class="secnum">32.4.3</span> Local Clients</a>
<ul style="list-style-type:none">
<li><a href="ejb-intro004.htm#GIPSC"><span class="secnum">32.4.3.1</span> Accessing Local Enterprise Beans Using the No-Interface View</a></li>
<li><a href="ejb-intro004.htm#GIPSE"><span class="secnum">32.4.3.2</span> Accessing Local Enterprise Beans That Implement Business Interfaces</a></li>
</ul>
</li>
<li><a href="ejb-intro004.htm#GIPIU"><span class="secnum">32.4.4</span> Remote Clients</a></li>
<li><a href="ejb-intro004.htm#GIPKD"><span class="secnum">32.4.5</span> Web Service Clients</a></li>
<li><a href="ejb-intro004.htm#GIPLY"><span class="secnum">32.4.6</span> Method Parameters and Access</a>
<ul style="list-style-type:none">
<li><a href="ejb-intro004.htm#GIPLX"><span class="secnum">32.4.6.1</span> Isolation</a></li>
<li><a href="ejb-intro004.htm#GIPKV"><span class="secnum">32.4.6.2</span> Granularity of Accessed Data</a></li>
</ul>
</li>
</ul>
</div></li>
<li><a href="ejb-intro005.htm#GIPIO"><span class="secnum">32.5</span> The Contents of an Enterprise Bean</a></li>
<li><a href="ejb-intro006.htm#GIPKS"><span class="secnum">32.6</span> Naming Conventions for Enterprise Beans</a></li>
<li><a href="ejb-intro007.htm#GIPLJ"><span class="secnum">32.7</span> The Lifecycles of Enterprise Beans</a>
<ul style="list-style-type:none">
<li><a href="ejb-intro007.htm#GIPLN"><span class="secnum">32.7.1</span> The Lifecycle of a Stateful Session Bean</a></li>
<li><a href="ejb-intro007.htm#GIPLM"><span class="secnum">32.7.2</span> The Lifecycle of a Stateless Session Bean</a></li>
<li><a href="ejb-intro007.htm#GIPRX"><span class="secnum">32.7.3</span> The Lifecycle of a Singleton Session Bean</a></li>
<li><a href="ejb-intro007.htm#GIPKW"><span class="secnum">32.7.4</span> The Lifecycle of a Message-Driven Bean</a></li>
</ul>
</li>
<li><a href="ejb-intro008.htm#GIPLG"><span class="secnum">32.8</span> Further Information about Enterprise Beans</a></li>
</ul>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="ejb-intro003.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="ejb-intro005.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="GIPJF" name="GIPJF"></a><a id="JEETT00441" name="JEETT00441"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">32.4</span> <a id="sthref1667" name="sthref1667"></a>Accessing Enterprise Beans</h1>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>The material in this section applies only to session beans and not to message-driven beans. Because they have a different programming model, message-driven beans do not have interfaces or no-interface views that define client access.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
<p><a id="sthref1668" name="sthref1668"></a><a id="sthref1669" name="sthref1669"></a>Clients access enterprise beans either through a no-interface view or through a business interface. A <span class="glossaryterm">no-interface view</span> of an enterprise bean exposes the public methods of the enterprise bean implementation class to clients. Clients using the no-interface view of an enterprise bean may invoke any public methods in the enterprise bean implementation class or any superclasses of the implementation class. A <span class="glossaryterm">business interface</span> is a standard Java programming language interface that contains the business methods of the enterprise bean.</p>
<p><a id="sthref1670" name="sthref1670"></a>A client can access a session bean only through the methods defined in the bean's business interface or through the public methods of an enterprise bean that has a no-interface view. The business interface or no-interface view defines the client's view of an enterprise bean. All other aspects of the enterprise bean (method implementations and deployment settings) are hidden from the client.</p>
<p>Well-designed interfaces and no-interface views simplify the development and maintenance of Java EE applications. Not only do clean interfaces and no-interface views shield the clients from any complexities in the EJB tier, but they also allow the enterprise beans to change internally without affecting the clients. For example, if you change the implementation of a session bean business method, you won't have to alter the client code. But if you were to change the method definitions in the interfaces, you might have to modify the client code as well. Therefore, it is important that you design the interfaces and no-interface views carefully to isolate your clients from possible changes in the enterprise beans.</p>
<p>Session beans can have more than one business interface. Session beans should, but are not required to, implement their business interface or interfaces.</p>
<a id="GIRFL" name="GIRFL"></a><a id="JEETT01079" name="JEETT01079"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">32.4.1</span> Using Enterprise Beans in Clients</h2>
<p><a id="sthref1671" name="sthref1671"></a><a id="sthref1672" name="sthref1672"></a><a id="sthref1673" name="sthref1673"></a>The client of an enterprise bean obtains a reference to an instance of an enterprise bean through either <span class="glossaryterm">dependency injection</span>, using Java programming language annotations, or <span class="glossaryterm">JNDI lookup</span>, using the Java Naming and Directory Interface syntax to find the enterprise bean instance.</p>
<p>Dependency injection is the simplest way of obtaining an enterprise bean reference. Clients that run within a Java EE server-managed environment, JavaServer Faces web applications, JAX-RS web services, other enterprise beans, or Java EE application clients support dependency injection using the <code>javax.ejb.EJB</code> annotation.</p>
<p>Applications that run outside a Java EE server-managed environment, such as Java SE applications, must perform an explicit lookup. JNDI supports a global syntax for identifying Java EE components to simplify this explicit lookup.</p>
<a id="GIRGN" name="GIRGN"></a><a id="JEETT00648" name="JEETT00648"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">32.4.1.1</span> Portable JNDI Syntax</h3>
<p>Three JNDI namespaces are used for portable JNDI lookups: <code>java:global</code>, <code>java:module</code>, and <code>java:app</code>.</p>
<ul>
<li>
<p>The <code>java:global</code> JNDI namespace is the portable way of finding remote enterprise beans using JNDI lookups. JNDI addresses are of the following form:</p>
<pre xml:space="preserve" class="oac_no_warn">
java:global[/<span class="variable">application name</span>]/<span class="variable">module name </span>/<span class="variable">enterprise bean name</span>[/<span class="variable">interface name </span>]
</pre>
<p>Application name and module name default to the name of the application and module minus the file extension. Application names are required only if the application is packaged within an EAR. The interface name is required only if the enterprise bean implements more than one business interface.</p>
</li>
<li>
<p>The <code>java:module</code> namespace is used to look up local enterprise beans within the same module. JNDI addresses using the <code>java:module</code> namespace are of the following form:</p>
<pre xml:space="preserve" class="oac_no_warn">
java:module/<span class="variable">enterprise bean name</span>/[<span class="variable">interface name</span>]
</pre>
<p>The interface name is required only if the enterprise bean implements more than one business interface.</p>
</li>
<li>
<p>The <code>java:app</code> namespace is used to look up local enterprise beans packaged within the same application. That is, the enterprise bean is packaged within an EAR file containing multiple Java EE modules. JNDI addresses using the <code>java:app</code> namespace are of the following form:</p>
<pre xml:space="preserve" class="oac_no_warn">
java:app[/<span class="variable">module name</span>]/<span class="variable">enterprise bean name </span>[/<span class="variable">interface name</span>]
</pre>
<p>The module name is optional. The interface name is required only if the enterprise bean implements more than one business interface.</p>
</li>
</ul>
<p>For example, if an enterprise bean, <code>MyBean</code>, is packaged within the web application archive <code>myApp.war</code>, the module name is <code>myApp</code>. The portable JNDI name is <code>java:module/MyBean</code>. An equivalent JNDI name using the <code>java:global</code> namespace is <code>java:global/myApp/MyBean</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="GIPIZ" name="GIPIZ"></a><a id="JEETT01080" name="JEETT01080"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">32.4.2</span> Deciding on Remote or Local Access</h2>
<p>When you design a Java EE application, one of the first decisions you make is the type of client access allowed by the enterprise beans: remote, local, or web service.</p>
<p>Whether to allow local or remote access depends on the following factors.</p>
<ul>
<li>
<p><span class="bold">Tight or loose coupling of related beans</span>: Tightly coupled beans depend on one another. For example, if a session bean that processes sales orders calls a session bean that emails a confirmation message to the customer, these beans are tightly coupled. Tightly coupled beans are good candidates for local access. Because they fit together as a logical unit, they typically call each other often and would benefit from the increased performance that is possible with local access.</p>
</li>
<li>
<p><span class="bold">Type of client</span>: If an enterprise bean is accessed by application clients, it should allow remote access. In a production environment, these clients almost always run on machines other than those on which GlassFish Server is running. If an enterprise bean's clients are web components or other enterprise beans, the type of access depends on how you want to distribute your components.</p>
</li>
<li>
<p><a id="sthref1674" name="sthref1674"></a><span class="bold">Component distribution</span>: Java EE applications are scalable because their server-side components can be distributed across multiple machines. In a distributed application, for example, the server that the web components run on may not be the one on which the enterprise beans they access are deployed. In this distributed scenario, the enterprise beans should allow remote access.</p>
</li>
<li>
<p><a id="sthref1675" name="sthref1675"></a><span class="bold">Performance</span>: Owing to such factors as network latency, remote calls may be slower than local calls. On the other hand, if you distribute components among different servers, you may improve the application's overall performance. Both of these statements are generalizations; performance can vary in different operational environments. Nevertheless, you should keep in mind how your application design might affect performance.</p>
</li>
</ul>
<p>If you aren't sure which type of access an enterprise bean should have, choose remote access. This decision gives you more flexibility. In the future, you can distribute your components to accommodate the growing demands on your application.</p>
<p><a id="sthref1676" name="sthref1676"></a><a id="sthref1677" name="sthref1677"></a>Although it is uncommon, it is possible for an enterprise bean to allow both remote and local access. If this is the case, either the business interface of the bean must be explicitly designated as a business interface by being decorated with the <code>@Remote</code> or <code>@Local</code> annotations, or the bean class must explicitly designate the business interfaces by using the <code>@Remote</code> and <code>@Local</code> annotations. The same business interface cannot be both a local and a remote business interface.</p>
</div>
<!-- class="sect2" -->
<a id="GIPMZ" name="GIPMZ"></a><a id="JEETT01081" name="JEETT01081"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">32.4.3</span> <a id="sthref1678" name="sthref1678"></a>Local Clients</h2>
<p>A local client has these characteristics.</p>
<ul>
<li>
<p>It must run in the same application as the enterprise bean it accesses.</p>
</li>
<li>
<p>It can be a web component or another enterprise bean.</p>
</li>
<li>
<p>To the local client, the location of the enterprise bean it accesses is not transparent.</p>
</li>
</ul>
<p>The no-interface view of an enterprise bean is a local view. The public methods of the enterprise bean implementation class are exposed to local clients that access the no-interface view of the enterprise bean. Enterprise beans that use the no-interface view do not implement a business interface.</p>
<p><a id="sthref1679" name="sthref1679"></a><a id="sthref1680" name="sthref1680"></a>The <span class="glossaryterm">local business interface</span> defines the bean's business and lifecycle methods. If the bean's business interface is not decorated with <code>@Local</code> or <code>@Remote</code>, and if the bean class does not specify the interface using <code>@Local</code> or <code>@Remote</code>, the business interface is by default a local interface.</p>
<p>To build an enterprise bean that allows only local access, you may, but are not required to, do one of the following.</p>
<ul>
<li>
<p>Create an enterprise bean implementation class that does not implement a business interface, indicating that the bean exposes a no-interface view to clients. For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Session
public class MyBean { ... }
</pre></li>
<li>
<p>Annotate the business interface of the enterprise bean as a <code>@Local</code> interface. For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Local
public interface InterfaceName { ... }
</pre></li>
<li>
<p>Specify the interface by decorating the bean class with <code>@Local</code> and specify the interface name. For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Local(<span class="variable">InterfaceName</span>.class)
public class <span class="variable">BeanName</span> implements <span class="variable">InterfaceName </span> { ... }
</pre></li>
</ul>
<a id="GIPSC" name="GIPSC"></a><a id="JEETT00649" name="JEETT00649"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">32.4.3.1</span> Accessing Local Enterprise Beans Using the No-Interface View</h3>
<p>Client access to an enterprise bean that exposes a local, no-interface view is accomplished through either dependency injection or JNDI lookup.</p>
<ul>
<li>
<p>To obtain a reference to the no-interface view of an enterprise bean through dependency injection, use the <code>javax.ejb.EJB</code> annotation and specify the enterprise bean's implementation class:</p>
<pre xml:space="preserve" class="oac_no_warn">
@EJB
ExampleBean exampleBean;
</pre></li>
<li>
<p>To obtain a reference to the no-interface view of an enterprise bean through JNDI lookup, use the <code>javax.naming.InitialContext</code> interface's <code>lookup</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
ExampleBean exampleBean = (ExampleBean)
        InitialContext.lookup("java:module/ExampleBean");
</pre></li>
</ul>
<p>Clients <span class="italic">do not</span> use the <code>new</code> operator to obtain a new instance of an enterprise bean that uses a no-interface view.</p>
</div>
<!-- class="sect3" -->
<a id="GIPSE" name="GIPSE"></a><a id="JEETT00650" name="JEETT00650"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">32.4.3.2</span> Accessing Local Enterprise Beans That Implement Business Interfaces</h3>
<p>Client access to enterprise beans that implement local business interfaces is accomplished through either dependency injection or JNDI lookup.</p>
<ul>
<li>
<p>To obtain a reference to the local business interface of an enterprise bean through dependency injection, use the <code>javax.ejb.EJB</code> annotation and specify the enterprise bean's local business interface name:</p>
<pre xml:space="preserve" class="oac_no_warn">
@EJB
Example example;
</pre></li>
<li>
<p>To obtain a reference to a local business interface of an enterprise bean through JNDI lookup, use the <code>javax.naming.InitialContext</code> interface's <code>lookup</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
ExampleLocal example = (ExampleLocal)
         InitialContext.lookup("java:module/ExampleLocal");
</pre></li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="GIPIU" name="GIPIU"></a><a id="JEETT01082" name="JEETT01082"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">32.4.4</span> <a id="sthref1681" name="sthref1681"></a>Remote Clients</h2>
<p>A remote client of an enterprise bean has the following traits.</p>
<ul>
<li>
<p>It can run on a different machine and a different JVM from the enterprise bean it accesses. (It is not required to run on a different JVM.)</p>
</li>
<li>
<p>It can be a web component, an application client, or another enterprise bean.</p>
</li>
<li>
<p>To a remote client, the location of the enterprise bean is transparent.</p>
</li>
<li>
<p>The enterprise bean must implement a business interface. That is, remote clients <span class="italic">may not</span> access an enterprise bean through a no-interface view.</p>
</li>
</ul>
<p>To create an enterprise bean that allows remote access, you must either</p>
<ul>
<li>
<p>Decorate the business interface of the enterprise bean with the <code>@Remote</code> annotation:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Remote
public interface InterfaceName { ... }
</pre></li>
<li>
<p>Or decorate the bean class with <code>@Remote</code>, specifying the business interface or interfaces:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Remote(InterfaceName.class)
public class BeanName implements InterfaceName { ... }
</pre></li>
</ul>
<p><a id="sthref1682" name="sthref1682"></a><a id="sthref1683" name="sthref1683"></a><a id="sthref1684" name="sthref1684"></a>The <span class="glossaryterm">remote interface</span> defines the business and lifecycle methods that are specific to the bean. For example, the remote interface of a bean named <code>BankAccountBean</code> might have business methods named <code>deposit</code> and <code>credit</code>. <a href="#GIPNO">Figure 32-1</a> shows how the interface controls the client's view of an enterprise bean.</p>
<div class="figure"><a id="GIPNO" name="GIPNO"></a><a id="JEETT00022" name="JEETT00022"></a>
<p class="titleinfigure">Figure 32-1 Interfaces for an Enterprise Bean with Remote Access</p>
<img src="img/jeett_dt_020.png" alt="Description of Figure 32-1 follows" title="Description of Figure 32-1 follows" longdesc="img_text/jeett_dt_020.htm" /><br />
<a id="sthref1685" name="sthref1685" href="img_text/jeett_dt_020.htm">Description of "Figure 32-1 Interfaces for an Enterprise Bean with Remote Access"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Client access to an enterprise bean that implements a remote business interface is accomplished through either dependency injection or JNDI lookup.</p>
<ul>
<li>
<p>To obtain a reference to the remote business interface of an enterprise bean through dependency injection, use the <code>javax.ejb.EJB</code> annotation and specify the enterprise bean's remote business interface name:</p>
<pre xml:space="preserve" class="oac_no_warn">
@EJB
Example example;
</pre></li>
<li>
<p>To obtain a reference to a remote business interface of an enterprise bean through JNDI lookup, use the <code>javax.naming.InitialContext</code> interface's <code>lookup</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
ExampleRemote example = (ExampleRemote)
        InitialContext.lookup("java:global/myApp/ExampleRemote");
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="GIPKD" name="GIPKD"></a><a id="JEETT01083" name="JEETT01083"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">32.4.5</span> <a id="sthref1686" name="sthref1686"></a>Web Service Clients</h2>
<p>A web service client can access a Java EE application in two ways. First, the client can access a web service created with JAX-WS. (For more information on JAX-WS, see <a href="jaxws.htm#BNAYL">Chapter 28, "Building Web Services with JAX-WS"</a>.) Second, a web service client can invoke the business methods of a stateless session bean. Message beans cannot be accessed by web service clients.</p>
<p>Provided that it uses the correct protocols (SOAP, HTTP, WSDL), any web service client can access a stateless session bean, whether or not the client is written in the Java programming language. The client doesn't even "know" what technology implements the service: stateless session bean, JAX-WS, or some other technology. In addition, enterprise beans and web components can be clients of web services. This flexibility enables you to integrate Java EE applications with web services.</p>
<p><a id="sthref1687" name="sthref1687"></a>A web service client accesses a stateless session bean through the bean's web service endpoint implementation class. By default, all public methods in the bean class are accessible to web service clients. The <code>@WebMethod</code> annotation may be used to customize the behavior of web service methods. If the <code>@WebMethod</code> annotation is used to decorate the bean class's methods, only those methods decorated with <code>@WebMethod</code> are exposed to web service clients.</p>
<p>For a code sample, see <a href="ejb-basicexamples003.htm#BNBOR">A Web Service Example: helloservice</a>.</p>
</div>
<!-- class="sect2" -->
<a id="GIPLY" name="GIPLY"></a><a id="JEETT01084" name="JEETT01084"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">32.4.6</span> Method Parameters and Access</h2>
<p>The type of access affects the parameters of the bean methods that are called by clients. The following sections apply not only to method parameters but also to method return values.</p>
<a id="GIPLX" name="GIPLX"></a><a id="JEETT00651" name="JEETT00651"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">32.4.6.1</span> Isolation</h3>
<p>The parameters of remote calls are more isolated than those of local calls. With remote calls, the client and the bean operate on different copies of a parameter object. If the client changes the value of the object, the value of the copy in the bean does not change. This layer of isolation can help protect the bean if the client accidentally modifies the data.</p>
<p>In a local call, both the client and the bean can modify the same parameter object. In general, you should not rely on this side effect of local calls. Perhaps someday you will want to distribute your components, replacing the local calls with remote ones.</p>
<p>As with remote clients, web service clients operate on different copies of parameters than does the bean that implements the web service.</p>
</div>
<!-- class="sect3" -->
<a id="GIPKV" name="GIPKV"></a><a id="JEETT00652" name="JEETT00652"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">32.4.6.2</span> Granularity of Accessed Data</h3>
<p>Because remote calls are likely to be slower than local calls, the parameters in remote methods should be relatively coarse-grained. A coarse-grained object contains more data than a fine-grained one, so fewer access calls are required. For the same reason, the parameters of the methods called by web service clients should also be coarse-grained.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="ejb-intro003.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="ejb-intro005.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

