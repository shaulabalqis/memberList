<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:2Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Creating a RESTful Root Resource Class" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Creating a RESTful Root Resource Class | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<ul style="list-style-type:none">
<li><a href="jaxrs001.htm#GIJQY"><span class="secnum">29.1</span> What Are RESTful Web Services?</a></li>
<li><div id="backgroundColor"><a href="jaxrs002.htm#GILIK"><span class="secnum">29.2</span> Creating a RESTful Root Resource Class</a><ul style="list-style-type:none">
<li><a href="jaxrs002.htm#GILRU"><span class="secnum">29.2.1</span> Developing RESTful Web Services with JAX-RS</a></li>
<li><a href="jaxrs002.htm#GILQB"><span class="secnum">29.2.2</span> Overview of a JAX-RS Application</a></li>
<li><a href="jaxrs002.htm#GINPW"><span class="secnum">29.2.3</span> The @Path Annotation and URI Path Templates</a></li>
<li><a href="jaxrs002.htm#GIPYS"><span class="secnum">29.2.4</span> Responding to HTTP Methods and Requests</a>
<ul style="list-style-type:none">
<li><a href="jaxrs002.htm#GIPXS"><span class="secnum">29.2.4.1</span> The Request Method Designator Annotations</a></li>
<li><a href="jaxrs002.htm#GIPZE"><span class="secnum">29.2.4.2</span> Using Entity Providers to Map HTTP Response and Request Entity Bodies</a></li>
</ul>
</li>
<li><a href="jaxrs002.htm#GIPZH"><span class="secnum">29.2.5</span> Using @Consumes and @Produces to Customize Requests and Responses</a>
<ul style="list-style-type:none">
<li><a href="jaxrs002.htm#GIPXF"><span class="secnum">29.2.5.1</span> The @Produces Annotation</a></li>
<li><a href="jaxrs002.htm#GIPYT"><span class="secnum">29.2.5.2</span> The @Consumes Annotation</a></li>
</ul>
</li>
<li><a href="jaxrs002.htm#GIPYW"><span class="secnum">29.2.6</span> Extracting Request Parameters</a></li>
<li><a href="jaxrs002.htm#sthref1546"><span class="secnum">29.2.7</span> Configuring JAX-RS Applications</a>
<ul style="list-style-type:none">
<li><a href="jaxrs002.htm#sthref1550"><span class="secnum">29.2.7.1</span> Configuring a JAX-RS Application Using a Subclass of Application</a></li>
<li><a href="jaxrs002.htm#sthref1551"><span class="secnum">29.2.7.2</span> Configuring the Base URI in web.xml</a></li>
</ul>
</li>
</ul>
</div></li>
<li><a href="jaxrs003.htm#GIPZZ"><span class="secnum">29.3</span> Example Applications for JAX-RS</a>
<ul style="list-style-type:none">
<li><a href="jaxrs003.htm#GIPYZ"><span class="secnum">29.3.1</span> Creating a Simple RESTful Web Service</a>
<ul style="list-style-type:none">
<li><a href="jaxrs003.htm#GIQAA"><span class="secnum">29.3.1.1</span> To Create a RESTful Web Service Using NetBeans IDE</a></li>
</ul>
</li>
<li><a href="jaxrs003.htm#GJVBC"><span class="secnum">29.3.2</span> The rsvp Example Application</a>
<ul style="list-style-type:none">
<li><a href="jaxrs003.htm#GJVAW"><span class="secnum">29.3.2.1</span> Components of the rsvp Example Application</a></li>
<li><a href="jaxrs003.htm#GKCCA"><span class="secnum">29.3.2.2</span> Running the rsvp Example Application</a></li>
</ul>
</li>
<li><a href="jaxrs003.htm#GIRCI"><span class="secnum">29.3.3</span> Real-World Examples</a></li>
</ul>
</li>
<li><a href="jaxrs004.htm#GILIZ"><span class="secnum">29.4</span> Further Information about JAX-RS</a></li>
</ul>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jaxrs001.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jaxrs003.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="GILIK" name="GILIK"></a><a id="JEETT00428" name="JEETT00428"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">29.2</span> <a id="sthref1491" name="sthref1491"></a><a id="sthref1492" name="sthref1492"></a><a id="sthref1493" name="sthref1493"></a><a id="sthref1494" name="sthref1494"></a><a id="sthref1495" name="sthref1495"></a><a id="sthref1496" name="sthref1496"></a><a id="sthref1497" name="sthref1497"></a>Creating a RESTful Root Resource Class</h1>
<p><a id="sthref1498" name="sthref1498"></a><span class="glossaryterm">Root resource classes</span> are "plain old Java objects" (POJOs) that are either annotated with <code>@Path</code> or have at least one method annotated with <code>@Path</code> or a <span class="glossaryterm">request method designator</span>, such as <code>@GET</code>, <code>@PUT</code>, <code>@POST</code>, or <code>@DELETE</code>. <span class="glossaryterm">Resource methods</span> are methods of a resource class annotated with a request method designator. This section explains how to use JAX-RS to annotate Java classes to create RESTful web services.</p>
<a id="GILRU" name="GILRU"></a><a id="JEETT01052" name="JEETT01052"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">29.2.1</span> Developing RESTful Web Services with JAX-RS</h2>
<p>JAX-RS is a Java programming language API designed to make it easy to develop applications that use the REST architecture.</p>
<p>The JAX-RS API uses Java programming language annotations to simplify the development of RESTful web services. Developers decorate Java programming language class files with JAX-RS annotations to define resources and the actions that can be performed on those resources. JAX-RS annotations are runtime annotations; therefore, runtime reflection will generate the helper classes and artifacts for the resource. A Java EE application archive containing JAX-RS resource classes will have the resources configured, the helper classes and artifacts generated, and the resource exposed to clients by deploying the archive to a Java EE server.</p>
<p><a href="#GINNA">Table 29-1</a> lists some of the Java programming annotations that are defined by JAX-RS, with a brief description of how each is used. Further information on the JAX-RS APIs can be viewed at <code><a href="http://docs.oracle.com/javaee/7/api/">http://docs.oracle.com/javaee/7/api/</a></code>.</p>
<div class="tblhruleformal"><a id="sthref1499" name="sthref1499"></a><a id="GINNA" name="GINNA"></a>
<p class="titleintable">Table 29-1 Summary of JAX-RS Annotations</p>
<table class="HRuleFormal" title="Summary of JAX-RS Annotations" summary="This table lists and describes the annotations defined by JAX-RS." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="22%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t2">Annotation</th>
<th align="left" valign="bottom" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t2" headers="r1c1-t2">
<p><a id="sthref1500" name="sthref1500"></a><code>@Path</code></p>
</td>
<td align="left" headers="r2c1-t2 r1c2-t2">
<p>The <code>@Path</code> annotation's value is a relative URI path indicating where the Java class will be hosted: for example, <code>/helloworld</code>. You can also embed variables in the URIs to make a URI path template. For example, you could ask for the name of a user and pass it to the application as a variable in the URI: <code>/helloworld/{username}</code>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t2" headers="r1c1-t2">
<p><a id="sthref1501" name="sthref1501"></a><code>@GET</code></p>
</td>
<td align="left" headers="r3c1-t2 r1c2-t2">
<p>The <code>@GET</code> annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP GET requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t2" headers="r1c1-t2">
<p><a id="sthref1502" name="sthref1502"></a><code>@POST</code></p>
</td>
<td align="left" headers="r4c1-t2 r1c2-t2">
<p>The <code>@POST</code> annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP POST requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t2" headers="r1c1-t2">
<p><a id="sthref1503" name="sthref1503"></a><code>@PUT</code></p>
</td>
<td align="left" headers="r5c1-t2 r1c2-t2">
<p>The <code>@PUT</code> annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP PUT requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t2" headers="r1c1-t2">
<p><a id="sthref1504" name="sthref1504"></a><code>@DELETE</code></p>
</td>
<td align="left" headers="r6c1-t2 r1c2-t2">
<p>The <code>@DELETE</code> annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP DELETE requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r7c1-t2" headers="r1c1-t2">
<p><a id="sthref1505" name="sthref1505"></a><code>@HEAD</code></p>
</td>
<td align="left" headers="r7c1-t2 r1c2-t2">
<p>The <code>@HEAD</code> annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP HEAD requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r8c1-t2" headers="r1c1-t2">
<p><a id="sthref1506" name="sthref1506"></a><code>@PathParam</code></p>
</td>
<td align="left" headers="r8c1-t2 r1c2-t2">
<p>The <code>@PathParam</code> annotation is a type of parameter that you can extract for use in your resource class. URI path parameters are extracted from the request URI, and the parameter names correspond to the URI path template variable names specified in the <code>@Path</code> class-level annotation.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r9c1-t2" headers="r1c1-t2">
<p><a id="sthref1507" name="sthref1507"></a><code>@QueryParam</code></p>
</td>
<td align="left" headers="r9c1-t2 r1c2-t2">
<p>The <code>@QueryParam</code> annotation is a type of parameter that you can extract for use in your resource class. Query parameters are extracted from the request URI query parameters.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r10c1-t2" headers="r1c1-t2">
<p><a id="sthref1508" name="sthref1508"></a><code>@Consumes</code></p>
</td>
<td align="left" headers="r10c1-t2 r1c2-t2">
<p>The <code>@Consumes</code> annotation is used to specify the MIME media types of representations a resource can consume that were sent by the client.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r11c1-t2" headers="r1c1-t2">
<p><a id="sthref1509" name="sthref1509"></a><code>@Produces</code></p>
</td>
<td align="left" headers="r11c1-t2 r1c2-t2">
<p>The <code>@Produces</code> annotation is used to specify the MIME media types of representations a resource can produce and send back to the client: for example, <code>"text/plain"</code>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r12c1-t2" headers="r1c1-t2">
<p><a id="sthref1510" name="sthref1510"></a><code>@Provider</code></p>
</td>
<td align="left" headers="r12c1-t2 r1c2-t2">
<p>The <code>@Provider</code> annotation is used for anything that is of interest to the JAX-RS runtime, such as <code>MessageBodyReader</code> and <code>MessageBodyWriter</code>. For HTTP requests, the <code>MessageBodyReader</code> is used to map an HTTP request entity body to method parameters. On the response side, a return value is mapped to an HTTP response entity body by using a <code>MessageBodyWriter</code>. If the application needs to supply additional metadata, such as HTTP headers or a different status code, a method can return a <code>Response</code> that wraps the entity and that can be built using <code>Response.ResponseBuilder</code>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r13c1-t2" headers="r1c1-t2">
<p><code>@ApplicationPath</code></p>
</td>
<td align="left" headers="r13c1-t2 r1c2-t2">
<p>The <code>@ApplicationPath</code> annotation is used to define the URL mapping for the application. The path specified by <code>@ApplicationPath</code> is the base URI for all resource URIs specified by <code>@Path</code> annotations in the resource class. You may only apply <code>@ApplicationPath</code> to a subclass of <code>javax.ws.rs.core.Application</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" -->
<a id="GILQB" name="GILQB"></a><a id="JEETT01053" name="JEETT01053"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">29.2.2</span> <a id="sthref1511" name="sthref1511"></a>Overview of a JAX-RS Application</h2>
<p>The following code sample is a very simple example of a root resource class that uses JAX-RS annotations:</p>
<pre xml:space="preserve" class="oac_no_warn">
package javaeetutorial.hello;
 
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;
 
/**
 * Root resource (exposed at "helloworld" path)
 */
@Path("helloworld")
public class HelloWorld {
    @Context
    private UriInfo context;
 
    /** Creates a new instance of HelloWorld */
    public HelloWorld() {
    }
 
    /**
     * Retrieves representation of an instance of helloWorld.HelloWorld
     * @return an instance of java.lang.String
     */
    @GET
    @Produces("text/html")
    public String getHtml() {
        return "&lt;html lang=\"en\"&gt;&lt;body&gt;&lt;h1&gt;Hello, World!!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;";
    }
}
</pre>
<p>The following sections describe the annotations used in this example.</p>
<ul>
<li>
<p><a id="sthref1512" name="sthref1512"></a>The <code>@Path</code> annotation's value is a relative URI path. In the preceding example, the Java class will be hosted at the URI path <code>/helloworld</code>. This is an extremely simple use of the <code>@Path</code> annotation, with a static URI path. Variables can be embedded in the URIs. <span class="glossaryterm">URI path templates</span> are URIs with variables embedded within the URI syntax.</p>
</li>
<li>
<p>The <code>@GET</code> annotation is a request method designator, along with <code>@POST</code>, <code>@PUT</code>, <code>@DELETE</code>, and <code>@HEAD</code>, defined by JAX-RS and corresponding to the similarly named HTTP methods. In the example, the annotated Java method will process HTTP GET requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</p>
</li>
<li>
<p>The <code>@Produces</code> annotation is used to specify the MIME media types a resource can produce and send back to the client. In this example, the Java method will produce representations identified by the MIME media type <code>"text/html"</code>.</p>
</li>
<li>
<p>The <code>@Consumes</code> annotation is used to specify the MIME media types a resource can consume that were sent by the client. The example could be modified to set the message returned by the <code>getHtml</code> method, as shown in this code example:</p>
<pre xml:space="preserve" class="oac_no_warn">
@POST
@Consumes("text/plain")
public void postHtml(String message) {
    // Store the message
}
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="GINPW" name="GINPW"></a><a id="JEETT01054" name="JEETT01054"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">29.2.3</span> <a id="sthref1513" name="sthref1513"></a><a id="sthref1514" name="sthref1514"></a><a id="sthref1515" name="sthref1515"></a><a id="sthref1516" name="sthref1516"></a>The @Path Annotation and URI Path Templates</h2>
<p>The <code>@Path</code> annotation identifies the URI path template to which the resource responds and is specified at the class or method level of a resource. The <code>@Path</code> annotation's value is a partial URI path template relative to the base URI of the server on which the resource is deployed, the context root of the application, and the URL pattern to which the JAX-RS runtime responds.</p>
<p>URI path templates are URIs with variables embedded within the URI syntax. These variables are substituted at runtime in order for a resource to respond to a request based on the substituted URI. Variables are denoted by braces (<code>{</code> and <code>}</code>). For example, look at the following <code>@Path</code> annotation:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Path("/users/{username}")
</pre>
<p>In this kind of example, a user is prompted to type his or her name, and then a JAX-RS web service configured to respond to requests to this URI path template responds. For example, if the user types the user name "Galileo," the web service responds to the following URL:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://example.com/users/Galileo
</pre>
<p>To obtain the value of the user name, the <code>@PathParam</code> annotation may be used on the method parameter of a request method, as shown in the following code example:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Path("/users/{username}")
public class UserResource {

    @GET
    @Produces("text/xml")
    public String getUser(@PathParam("username") String userName) {
        ...
    }
}
</pre>
<p>By default, the URI variable must match the regular expression <code>"[^/]+?"</code>. This variable may be customized by specifying a different regular expression after the variable name. For example, if a user name must consist only of lowercase and uppercase alphanumeric characters, override the default regular expression in the variable definition:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Path("users/{username: [a-zA-Z][a-zA-Z_0-9]*}")
</pre>
<p>In this example, the <code>username</code> variable will match only user names that begin with one uppercase or lowercase letter and zero or more alphanumeric characters and the underscore character. If a user name does not match that template, a 404 (Not Found) response will be sent to the client.</p>
<p>A <code>@Path</code> value isn't required to have leading or trailing slashes (/). The JAX-RS runtime parses URI path templates the same way, whether or not they have leading or trailing slashes.</p>
<p>A URI path template has one or more variables, with each variable name surrounded by braces: <code>{</code> to begin the variable name and <code>}</code> to end it. In the preceding example, <code>username</code> is the variable name. At runtime, a resource configured to respond to the preceding URI path template will attempt to process the URI data that corresponds to the location of <code>{username}</code> in the URI as the variable data for <code>username</code>.</p>
<p>For example, if you want to deploy a resource that responds to the URI path template <code>http://example.com/myContextRoot/resources/{name1}/{name2}/</code>, you must first deploy the application to a Java EE server that responds to requests to the <code>http://example.com/myContextRoot</code> URI and then decorate your resource with the following <code>@Path</code> annotation:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Path("/{name1}/{name2}/")
public class SomeResource {
    ...
}
</pre>
<p>In this example, the URL pattern for the JAX-RS helper servlet, specified in <code>web.xml</code>, is the default:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;servlet-mapping&gt;
      &lt;servlet-name&gt;javax.ws.rs.core.Application&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/resources/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</pre>
<p>A variable name can be used more than once in the URI path template.</p>
<p>If a character in the value of a variable would conflict with the reserved characters of a URI, the conflicting character should be substituted with percent encoding. For example, spaces in the value of a variable should be substituted with <code>%20</code>.</p>
<p>When defining URI path templates, be careful that the resulting URI after substitution is valid.</p>
<p><a href="#GIPYM">Table 29-2</a> lists some examples of URI path template variables and how the URIs are resolved after substitution. The following variable names and values are used in the examples:</p>
<ul>
<li>
<p><code>name1</code>: <code>james</code></p>
</li>
<li>
<p><code>name2</code>: <code>gatz</code></p>
</li>
<li>
<p><code>name3</code>:</p>
</li>
<li>
<p><code>location</code>: <code>Main%20Street</code></p>
</li>
<li>
<p><code>question</code>: <code>why</code></p>
</li>
</ul>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>The value of the <code>name3</code> variable is an empty string.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
<div class="tblhruleformalwide"><a id="sthref1517" name="sthref1517"></a><a id="GIPYM" name="GIPYM"></a>
<p class="titleintable">Table 29-2 Examples of URI Path Templates</p>
<table class="HRuleFormalWide" title="Examples of URI Path Templates" summary="This table provides examples of URI path templates and how the URIs are resolved." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="*" />
<col width="45%" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t4">URI Path Template</th>
<th align="left" valign="bottom" id="r1c2-t4">URI After Substitution</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t4" headers="r1c1-t4">
<p><code>http://example.com/{name1}/{name2}/</code></p>
</td>
<td align="left" headers="r2c1-t4 r1c2-t4">
<p><code>http://example.com/james/gatz/</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t4" headers="r1c1-t4">
<p><code>http://example.com/{question}/</code><code>{question}/{question}/</code></p>
</td>
<td align="left" headers="r3c1-t4 r1c2-t4">
<p><code>http://example.com/why/why/why/</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t4" headers="r1c1-t4">
<p><code>http://example.com/maps/{location}</code></p>
</td>
<td align="left" headers="r4c1-t4 r1c2-t4">
<p><code>http://example.com/maps/Main%20Street</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t4" headers="r1c1-t4">
<p><code>http://example.com/{name3}/home/</code></p>
</td>
<td align="left" headers="r5c1-t4 r1c2-t4">
<p><code>http://example.com//home/</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="sect2" -->
<a id="GIPYS" name="GIPYS"></a><a id="JEETT01055" name="JEETT01055"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">29.2.4</span> <a id="sthref1518" name="sthref1518"></a><a id="sthref1519" name="sthref1519"></a>Responding to HTTP Methods and Requests</h2>
<p>The behavior of a resource is determined by the HTTP methods (typically, GET, POST, PUT, or DELETE) to which the resource is responding.</p>
<a id="GIPXS" name="GIPXS"></a><a id="JEETT00638" name="JEETT00638"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">29.2.4.1</span> <a id="sthref1520" name="sthref1520"></a><a id="sthref1521" name="sthref1521"></a><a id="sthref1522" name="sthref1522"></a><a id="sthref1523" name="sthref1523"></a><a id="sthref1524" name="sthref1524"></a><a id="sthref1525" name="sthref1525"></a>The Request Method Designator Annotations</h3>
<p>Request method designator annotations are runtime annotations, defined by JAX-RS, that correspond to the similarly named HTTP methods. Within a resource class file, HTTP methods are mapped to Java programming language methods by using the request method designator annotations. The behavior of a resource is determined by which HTTP method the resource is responding to. JAX-RS defines a set of request method designators for the common HTTP methods GET, POST, PUT, DELETE, and HEAD; you can also create your own custom request method designators. Creating custom request method designators is outside the scope of this document.</p>
<p>The following example shows the use of the PUT method to create or update a storage container:</p>
<pre xml:space="preserve" class="oac_no_warn">
@PUT
public Response putContainer() {
    System.out.println("PUT CONTAINER " + container);

    URI uri =  uriInfo.getAbsolutePath();
    Container c = new Container(container, uri.toString());

    Response r;
    if (!MemoryStore.MS.hasContainer(c)) {
        r = Response.created(uri).build();
    } else {
        r = Response.noContent().build();
    }

    MemoryStore.MS.createContainer(c);
    return r;
}
</pre>
<p>By default, the JAX-RS runtime will automatically support the methods HEAD and OPTIONS if not explicitly implemented. For HEAD, the runtime will invoke the implemented GET method, if present, and ignore the response entity, if set. For OPTIONS, the <code>Allow</code> response header will be set to the set of HTTP methods supported by the resource. In addition, the JAX-RS runtime will return a Web Application Definition Language (WADL) document describing the resource; see <code><a href="http://www.w3.org/Submission/wadl/">http://www.w3.org/Submission/wadl/</a></code> for more information.</p>
<p>Methods decorated with request method designators must return <code>void</code>, a Java programming language type, or a <code>javax.ws.rs.core.Response</code> object. Multiple parameters may be extracted from the URI by using the <code>@PathParam</code> or <code>@QueryParam</code> annotations, as described in <a href="#GIPYW">Extracting Request Parameters</a>. Conversion between Java types and an entity body is the responsibility of an entity provider, such as <code>MessageBodyReader</code> or <code>MessageBodyWriter</code>. Methods that need to provide additional metadata with a response should return an instance of the <code>Response</code> class. The <code>ResponseBuilder</code> class provides a convenient way to create a <code>Response</code> instance using a builder pattern. The HTTP PUT and POST methods expect an HTTP request body, so you should use a <code>MessageBodyReader</code> for methods that respond to PUT and POST requests.</p>
<p>Both <code>@PUT</code> and <code>@POST</code> can be used to create or update a resource. POST can mean anything, so when using POST, it is up to the application to define the semantics. PUT has well-defined semantics. When using PUT for creation, the client declares the URI for the newly created resource.</p>
<p>PUT has very clear semantics for creating and updating a resource. The representation the client sends must be the same representation that is received using a GET, given the same media type. PUT does not allow a resource to be partially updated, a common mistake when attempting to use the PUT method. A common application pattern is to use POST to create a resource and return a <code>201</code> response with a location header whose value is the URI to the newly created resource. In this pattern, the web service declares the URI for the newly created resource.</p>
</div>
<!-- class="sect3" -->
<a id="GIPZE" name="GIPZE"></a><a id="JEETT00639" name="JEETT00639"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">29.2.4.2</span> <a id="sthref1526" name="sthref1526"></a><a id="sthref1527" name="sthref1527"></a><a id="sthref1528" name="sthref1528"></a><a id="sthref1529" name="sthref1529"></a><a id="sthref1530" name="sthref1530"></a><a id="sthref1531" name="sthref1531"></a>Using Entity Providers to Map HTTP Response and Request Entity Bodies</h3>
<p><span class="glossaryterm">Entity providers</span> supply mapping services between representations and their associated Java types. The two types of entity providers are <code>MessageBodyReader</code> and <code>MessageBodyWriter</code>. For HTTP requests, the <code>MessageBodyReader</code> is used to map an HTTP request entity body to method parameters. On the response side, a return value is mapped to an HTTP response entity body by using a <code>MessageBodyWriter</code>. If the application needs to supply additional metadata, such as HTTP headers or a different status code, a method can return a <code>Response</code> that wraps the entity and that can be built by using <code>Response.ResponseBuilder</code>.</p>
<p><a href="#GKCCG">Table 29-3</a> shows the standard types that are supported automatically for HTTP request and response entity bodies. You need to write an entity provider only if you are not choosing one of these standard types.</p>
<div class="tblhruleformal"><a id="sthref1532" name="sthref1532"></a><a id="GKCCG" name="GKCCG"></a>
<p class="titleintable">Table 29-3 <a id="sthref1533" name="sthref1533"></a>Types Supported for HTTP Request and Response Entity Bodies</p>
<table class="HRuleFormal" title="Types Supported for HTTP Request and Response Entity Bodies" summary="This table lists the standard Java types and media types supported for HTTP request and response entity bodies." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="*" />
<col width="50%" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t5">Java Type</th>
<th align="left" valign="bottom" id="r1c2-t5">Supported Media Types</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t5" headers="r1c1-t5">
<p><code>byte[]</code></p>
</td>
<td align="left" headers="r2c1-t5 r1c2-t5">
<p>All media types (<code>*/*</code>)</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t5" headers="r1c1-t5">
<p><code>java.lang.String</code></p>
</td>
<td align="left" headers="r3c1-t5 r1c2-t5">
<p>All text media types (<code>text/*</code>)</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t5" headers="r1c1-t5">
<p><code>java.io.InputStream</code></p>
</td>
<td align="left" headers="r4c1-t5 r1c2-t5">
<p>All media types (<code>*/*</code>)</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t5" headers="r1c1-t5">
<p><code>java.io.Reader</code></p>
</td>
<td align="left" headers="r5c1-t5 r1c2-t5">
<p>All media types (<code>*/*</code>)</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t5" headers="r1c1-t5">
<p><code>java.io.File</code></p>
</td>
<td align="left" headers="r6c1-t5 r1c2-t5">
<p>All media types (<code>*/*</code>)</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r7c1-t5" headers="r1c1-t5">
<p><code>javax.activation.DataSource</code></p>
</td>
<td align="left" headers="r7c1-t5 r1c2-t5">
<p>All media types (<code>*/*</code>)</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r8c1-t5" headers="r1c1-t5">
<p><code>javax.xml.transform.Source</code></p>
</td>
<td align="left" headers="r8c1-t5 r1c2-t5">
<p>XML media types (<code>text/xml</code>, <code>application/xml</code>, and <code>application/*+xml</code>)</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r9c1-t5" headers="r1c1-t5">
<p><code>javax.xml.bind.JAXBElement</code> and application-supplied JAXB classes</p>
</td>
<td align="left" headers="r9c1-t5 r1c2-t5">
<p>XML media types (<code>text/xml</code>, <code>application/xml</code>, and <code>application/*+xml</code>)</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r10c1-t5" headers="r1c1-t5">
<p><code>MultivaluedMap&lt;String, String&gt;</code></p>
</td>
<td align="left" headers="r10c1-t5 r1c2-t5">
<p>Form content (<code>application/x-www-form-urlencoded</code>)</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r11c1-t5" headers="r1c1-t5">
<p><code>StreamingOutput</code></p>
</td>
<td align="left" headers="r11c1-t5 r1c2-t5">
<p>All media types (<code>*/*</code>), <code>MessageBodyWriter</code> only</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>The following example shows how to use <code>MessageBodyReader</code> with the <code>@Consumes</code> and <code>@Provider</code> annotations:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Consumes("application/x-www-form-urlencoded")
@Provider
public class FormReader implements MessageBodyReader&lt;NameValuePair&gt; {
</pre>
<p>The following example shows how to use <code>MessageBodyWriter</code> with the <code>@Produces</code> and <code>@Provider</code> annotations:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Produces("text/html")
@Provider
public class FormWriter implements 
        MessageBodyWriter&lt;Hashtable&lt;String, String&gt;&gt; {
</pre>
<p>The following example shows how to use <code>ResponseBuilder</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
@GET
public Response getItem() {
    System.out.println("GET ITEM " + container + " " + item);
    
    Item i = MemoryStore.MS.getItem(container, item);
    if (i == null)
        throw new NotFoundException("Item not found");
    Date lastModified = i.getLastModified().getTime();
    EntityTag et = new EntityTag(i.getDigest());
    ResponseBuilder rb = request.evaluatePreconditions(lastModified, et);
    if (rb != null)
        return rb.build();
        
    byte[] b = MemoryStore.MS.getItemData(container, item);
    return Response.ok(b, i.getMimeType()).
            lastModified(lastModified).tag(et).build();
}
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="GIPZH" name="GIPZH"></a><a id="JEETT01056" name="JEETT01056"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">29.2.5</span> Using @Consumes and @Produces to Customize Requests and Responses</h2>
<p>The information sent to a resource and then passed back to the client is specified as a MIME media type in the headers of an HTTP request or response. You can specify which MIME media types of representations a resource can respond to or produce by using the following annotations:</p>
<ul>
<li>
<p><code>javax.ws.rs.Consumes</code></p>
</li>
<li>
<p><code>javax.ws.rs.Produces</code></p>
</li>
</ul>
<p>By default, a resource class can respond to and produce all MIME media types of representations specified in the HTTP request and response headers.</p>
<a id="GIPXF" name="GIPXF"></a><a id="JEETT00640" name="JEETT00640"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">29.2.5.1</span> <a id="sthref1534" name="sthref1534"></a>The @Produces Annotation</h3>
<p>The <code>@Produces</code> annotation is used to specify the MIME media types or representations a resource can produce and send back to the client. If <code>@Produces</code> is applied at the class level, all the methods in a resource can produce the specified MIME types by default. If applied at the method level, the annotation overrides any <code>@Produces</code> annotations applied at the class level.</p>
<p>If no methods in a resource are able to produce the MIME type in a client request, the JAX-RS runtime sends back an HTTP "406 Not Acceptable" error.</p>
<p>The value of <code>@Produces</code> is an array of <code>String</code> of MIME types or a comma-separated list of <code>MediaType</code> constants. For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Produces({"image/jpeg,image/png"})
</pre>
<p>The following example shows how to apply <code>@Produces</code> at both the class and method levels:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Path("/myResource")
@Produces("text/plain")
public class SomeResource {
    @GET
    public String doGetAsPlainText() {
        ...
    }

    @GET
    @Produces("text/html")
    public String doGetAsHtml() {
        ...
    }
}
</pre>
<p>The <code>doGetAsPlainText</code> method defaults to the MIME media type of the <code>@Produces</code> annotation at the class level. The <code>doGetAsHtml</code> method's <code>@Produces</code> annotation overrides the class-level <code>@Produces</code> setting and specifies that the method can produce HTML rather than plain text.</p>
<p><code>@Produces</code> can also use the constants defined in the <code>javax.ws.rs.core.MediaType</code> class to specify the media type. For example, specifying <code>MediaType.APPLICATION_XML</code> is equivalent to specifying <code>"application/xml"</code>.</p>
<pre xml:space="preserve" class="oac_no_warn">
@Produces(MediaType.APPLICATION_XML)
@GET
public Customer getCustomer() { ... }
</pre>
<p>If a resource class is capable of producing more than one MIME media type, the resource method chosen will correspond to the most acceptable media type as declared by the client. More specifically, the <code>Accept</code> header of the HTTP request declares what is most acceptable. For example, if the <code>Accept</code> header is <code>Accept: text/plain</code>, the <code>doGetAsPlainText</code> method will be invoked. Alternatively, if the <code>Accept</code> header is <code>Accept: text/plain;q=0.9, text/html</code>, which declares that the client can accept media types of <code>text/plain</code> and <code>text/html</code> but prefers the latter, the <code>doGetAsHtml</code> method will be invoked.</p>
<p>More than one media type may be declared in the same <code>@Produces</code> declaration. The following code example shows how this is done:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Produces({"application/xml", "application/json"})
public String doGetAsXmlOrJson() {
    ...
}
</pre>
<p>The <code>doGetAsXmlOrJson</code> method will get invoked if either of the media types <code>application/xml</code> or <code>application/json</code> is acceptable. If both are equally acceptable, the former will be chosen because it occurs first. The preceding examples refer explicitly to MIME media types for clarity. It is possible to refer to constant values, which may reduce typographical errors. For more information, see the API documentation for the constant field values of <code>javax.ws.rs.core.MediaType</code>.</p>
</div>
<!-- class="sect3" -->
<a id="GIPYT" name="GIPYT"></a><a id="JEETT00641" name="JEETT00641"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">29.2.5.2</span> <a id="sthref1535" name="sthref1535"></a>The @Consumes Annotation</h3>
<p>The <code>@Consumes</code> annotation is used to specify which MIME media types of representations a resource can accept, or consume, from the client. If <code>@Consumes</code> is applied at the class level, all the response methods accept the specified MIME types by default. If applied at the method level, <code>@Consumes</code> overrides any <code>@Consumes</code> annotations applied at the class level.</p>
<p>If a resource is unable to consume the MIME type of a client request, the JAX-RS runtime sends back an HTTP 415 ("Unsupported Media Type") error.</p>
<p>The value of <code>@Consumes</code> is an array of <code>String</code> of acceptable MIME types, or a comma-separated list of <code>MediaType</code> constants. For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Consumes({"text/plain,text/html"})
</pre>
<p>This is the equivalent of:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Consumes({MediaType.TEXT_PLAIN,MediaType.TEXT_HTML})
</pre>
<p>The following example shows how to apply <code>@Consumes</code> at both the class and method levels:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Path("/myResource")
@Consumes("multipart/related")
public class SomeResource {
    @POST
    public String doPost(MimeMultipart mimeMultipartData) {
        ...
    }

    @POST
    @Consumes("application/x-www-form-urlencoded")
    public String doPost2(FormURLEncodedProperties formData) {
        ...
    }
}
</pre>
<p>The <code>doPost</code> method defaults to the MIME media type of the <code>@Consumes</code> annotation at the class level. The <code>doPost2</code> method overrides the class level <code>@Consumes</code> annotation to specify that it can accept URL-encoded form data.</p>
<p>If no resource methods can respond to the requested MIME type, an HTTP 415 ("Unsupported Media Type") error is returned to the client.</p>
<p>The <code>HelloWorld</code> example discussed previously in this section can be modified to set the message by using <code>@Consumes</code>, as shown in the following code example:</p>
<pre xml:space="preserve" class="oac_no_warn">
@POST
@Consumes("text/html")
public void postHtml(String message) {
    // Store the message
}
</pre>
<p>In this example, the Java method will consume representations identified by the MIME media type <code>text/plain</code>. Note that the resource method returns <code>void</code>. This means that no representation is returned and that a response with a status code of HTTP 204 ("No Content") will be returned.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="GIPYW" name="GIPYW"></a><a id="JEETT01057" name="JEETT01057"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">29.2.6</span> <a id="sthref1536" name="sthref1536"></a><a id="sthref1537" name="sthref1537"></a><a id="sthref1538" name="sthref1538"></a>Extracting Request Parameters</h2>
<p>Parameters of a resource method may be annotated with parameter-based annotations to extract information from a request. A previous example presented the use of the <code>@PathParam</code> parameter to extract a path parameter from the path component of the request URL that matched the path declared in <code>@Path</code>.</p>
<p>You can extract the following types of parameters for use in your resource class:</p>
<ul>
<li>
<p>Query</p>
</li>
<li>
<p>URI path</p>
</li>
<li>
<p>Form</p>
</li>
<li>
<p>Cookie</p>
</li>
<li>
<p>Header</p>
</li>
<li>
<p>Matrix</p>
</li>
</ul>
<p><a id="sthref1539" name="sthref1539"></a><span class="glossaryterm">Query parameters</span> are extracted from the request URI query parameters and are specified by using the <code>javax.ws.rs.QueryParam</code> annotation in the method parameter arguments. The following example demonstrates using <code>@QueryParam</code> to extract query parameters from the <code>Query</code> component of the request URL:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Path("smooth")
@GET
public Response smooth(
        @DefaultValue("2") @QueryParam("step") int step,
        @DefaultValue("true") @QueryParam("min-m") boolean hasMin,
        @DefaultValue("true") @QueryParam("max-m") boolean hasMax,
        @DefaultValue("true") @QueryParam("last-m") boolean hasLast,           
        @DefaultValue("blue") @QueryParam("min-color") ColorParam minColor,
        @DefaultValue("green") @QueryParam("max-color") ColorParam maxColor,
        @DefaultValue("red") @QueryParam("last-color") ColorParam lastColor
        ) { ... }
</pre>
<p>If the query parameter <code>step</code> exists in the query component of the request URI, the value of <code>step</code> will be extracted and parsed as a 32-bit signed integer and assigned to the <code>step</code> method parameter. If <code>step</code> does not exist, a default value of 2, as declared in the <code>@DefaultValue</code> annotation, will be assigned to the <code>step</code> method parameter. If the <code>step</code> value cannot be parsed as a 32-bit signed integer, an HTTP 400 ("Client Error") response is returned.</p>
<p>User-defined Java programming language types may be used as query parameters. The following code example shows the <code>ColorParam</code> class used in the preceding query parameter example:</p>
<pre xml:space="preserve" class="oac_no_warn">
public class ColorParam extends Color {
    public ColorParam(String s) {
        super(getRGB(s));
    }

    private static int getRGB(String s) {
        if (s.charAt(0) == '#') {
            try {
                Color c = Color.decode("0x" + s.substring(1));
                return c.getRGB();
            } catch (NumberFormatException e) {
                throw new WebApplicationException(400);
            }
        } else {
            try {
                Field f = Color.class.getField(s);
                return ((Color)f.get(null)).getRGB();
            } catch (Exception e) {
                throw new WebApplicationException(400);
            }
        }
    }
}
</pre>
<p>The constructor for <code>ColorParam</code> takes a single <code>String</code> parameter.</p>
<p>Both <code>@QueryParam</code> and <code>@PathParam</code> can be used only on the following Java types.</p>
<ul>
<li>
<p>All primitive types except <code>char</code>.</p>
</li>
<li>
<p>All wrapper classes of primitive types except <code>Character</code>.</p>
</li>
<li>
<p>Any class with a constructor that accepts a single <code>String</code> argument.</p>
</li>
<li>
<p>Any class with the static method named <code>valueOf(String)</code> that accepts a single <code>String</code> argument.</p>
</li>
<li>
<p><code>List&lt;T&gt;</code>, <code>Set&lt;T&gt;</code>, or <code>SortedSet&lt;T&gt;</code>, where T matches the already listed criteria. Sometimes, parameters may contain more than one value for the same name. If this is the case, these types may be used to obtain all values.</p>
</li>
</ul>
<p>If <code>@DefaultValue</code> is not used in conjunction with <code>@QueryParam</code>, and the query parameter is not present in the request, the value will be an empty collection for <code>List</code>, <code>Set</code>, or <code>SortedSet</code>; null for other object types; and the default for primitive types.</p>
<p><a id="sthref1540" name="sthref1540"></a><a id="sthref1541" name="sthref1541"></a><span class="glossaryterm">URI path parameters</span> are extracted from the request URI, and the parameter names correspond to the URI path template variable names specified in the <code>@Path</code> class-level annotation. URI parameters are specified using the <code>javax.ws.rs.PathParam</code> annotation in the method parameter arguments. The following example shows how to use <code>@Path</code> variables and the <code>@PathParam</code> annotation in a method:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Path("/{username}")
public class MyResourceBean {
    ...
    @GET
    public String printUsername(@PathParam("username") String userId) {
        ...
    }
}
</pre>
<p>In the preceding snippet, the URI path template variable name <code>username</code> is specified as a parameter to the <code>printUsername</code> method. The <code>@PathParam</code> annotation is set to the variable name <code>username</code>. At runtime, before <code>printUsername</code> is called, the value of <code>username</code> is extracted from the URI and cast to a <code>String</code>. The resulting <code>String</code> is then available to the method as the <code>userId</code> variable.</p>
<p>If the URI path template variable cannot be cast to the specified type, the JAX-RS runtime returns an HTTP 400 ("Bad Request") error to the client. If the <code>@PathParam</code> annotation cannot be cast to the specified type, the JAX-RS runtime returns an HTTP 404 ("Not Found") error to the client.</p>
<p>The <code>@PathParam</code> parameter and the other parameter-based annotations (<code>@MatrixParam</code>, <code>@HeaderParam</code>, <code>@CookieParam</code>, and <code>@FormParam</code>) obey the same rules as <code>@QueryParam</code>.</p>
<p><a id="sthref1542" name="sthref1542"></a><a id="sthref1543" name="sthref1543"></a><a id="sthref1544" name="sthref1544"></a><span class="glossaryterm">Cookie parameters</span>, indicated by decorating the parameter with <code>javax.ws.rs.CookieParam</code>, extract information from the cookies declared in cookie-related HTTP headers. <span class="glossaryterm">Header parameters</span>, indicated by decorating the parameter with <code>javax.ws.rs.HeaderParam</code>, extract information from the HTTP headers. <span class="glossaryterm">Matrix parameters</span>, indicated by decorating the parameter with <code>javax.ws.rs.MatrixParam</code>, extract information from URL path segments.</p>
<p><a id="sthref1545" name="sthref1545"></a><span class="glossaryterm">Form parameters</span>, indicated by decorating the parameter with <code>javax.ws.rs.FormParam</code>, extract information from a request representation that is of the MIME media type <code>application/x-www-form-urlencoded</code> and conforms to the encoding specified by HTML forms, as described in <code><a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1">http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1</a></code>. This parameter is very useful for extracting information sent by POST in HTML forms.</p>
<p>The following example extracts the <code>name</code> form parameter from the POST form data:</p>
<pre xml:space="preserve" class="oac_no_warn">
@POST
@Consumes("application/x-www-form-urlencoded")
public void post(@FormParam("name") String name) {
    // Store the message
}
</pre>
<p>To obtain a general map of parameter names and values for query and path parameters, use the following code:</p>
<pre xml:space="preserve" class="oac_no_warn">
@GET
public String get(@Context UriInfo ui) {
    MultivaluedMap&lt;String, String&gt; queryParams = ui.getQueryParameters();
    MultivaluedMap&lt;String, String&gt; pathParams = ui.getPathParameters();
}
</pre>
<p>The following method extracts header and cookie parameter names and values into a map:</p>
<pre xml:space="preserve" class="oac_no_warn">
@GET
public String get(@Context HttpHeaders hh) {
    MultivaluedMap&lt;String, String&gt; headerParams = hh.getRequestHeaders();
    Map&lt;String, Cookie&gt; pathParams = hh.getCookies();
}
</pre>
<p>In general, <code>@Context</code> can be used to obtain contextual Java types related to the request or response.</p>
<p>For form parameters, it is possible to do the following:</p>
<pre xml:space="preserve" class="oac_no_warn">
@POST
@Consumes("application/x-www-form-urlencoded")
public void post(MultivaluedMap&lt;String, String&gt; formParams) {
    // Store the message
}
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1546" name="sthref1546"></a>
<h2 class="sect2"><span class="secnum">29.2.7</span> <a id="sthref1547" name="sthref1547"></a><a id="sthref1548" name="sthref1548"></a><a id="sthref1549" name="sthref1549"></a>Configuring JAX-RS Applications</h2>
<p>A JAX-RS application consists of at least one resource class packaged within a WAR file. The base URI from which an application's resources respond to requests can be set one of two ways:</p>
<ul>
<li>
<p>Using the <code>@ApplicationPath</code> annotation in a subclass of <code>javax.ws.rs.core.Application</code> packaged within the WAR</p>
</li>
<li>
<p>Using the <code>servlet-mapping</code> tag within the WAR's <code>web.xml</code> deployment descriptor</p>
</li>
</ul>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1550" name="sthref1550"></a>
<h3 class="sect3"><span class="secnum">29.2.7.1</span> Configuring a JAX-RS Application Using a Subclass of Application</h3>
<p>Create a subclass of <code>javax.ws.rs.core.Application</code> to manually configure the environment in which the REST resources defined in your resource classes are run, including the base URI. Add a class-level <code>@ApplicationPath</code> annotation to set the base URI.</p>
<pre xml:space="preserve" class="oac_no_warn">
@ApplicationPath("/webapi")
public class MyApplication extends Application { ... }
</pre>
<p>In the preceding example, the base URI is set to <code>/webapi</code>, which means that all resources defined within the application are relative to <code>/webapi</code>.</p>
<p>By default, all the resources in an archive will be processed for resources. Override the <code>getClasses</code> method to manually register the resource classes in the application with the JAX-RS runtime.</p>
<pre xml:space="preserve" class="oac_no_warn">
@Override
public Set&lt;Class&lt;?&gt;&gt; getClasses() {
    final Set&lt;Class&lt;?&gt;&gt; classes = new HashSet&lt;&gt;();
    // register root resource
    classes.add(MyResource.class);
    return classes;
}
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1551" name="sthref1551"></a>
<h3 class="sect3"><span class="secnum">29.2.7.2</span> Configuring the Base URI in web.xml</h3>
<p>The base URI for a JAX-RS application can be set using a <code>servlet-mapping</code> tag in the <code>web.xml</code> deployment descriptor, using the <code>Application</code> class name as the servlet.</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;javax.ws.rs.core.Application&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/webapi/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</pre>
<p>This setting will also override the path set by <code>@ApplicationPath</code> when using an <code>Application</code> subclass.</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;servlet-mapping&gt;
   &lt;servlet-name&gt;com.example.rest.MyApplication&lt;/servlet-name&gt;
   &lt;url-pattern&gt;/services/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jaxrs001.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jaxrs003.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

