<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:3Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Writing Simple JMS Applications" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Writing Simple JMS Applications | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<ul style="list-style-type:none">
<li><a href="jms-examples001.htm#BABEFBHJ"><span class="secnum">46.1</span> Overview of the JMS Examples</a></li>
<li><div id="backgroundColor"><a href="jms-examples002.htm#BNCFA"><span class="secnum">46.2</span> Writing Simple JMS Applications</a><ul style="list-style-type:none">
<li><a href="jms-examples002.htm#BNCFD"><span class="secnum">46.2.1</span> Starting the JMS Provider</a></li>
<li><a href="jms-examples002.htm#GKTJS"><span class="secnum">46.2.2</span> Creating JMS Administered Objects</a>
<ul style="list-style-type:none">
<li><a href="jms-examples002.htm#BABHEFCB"><span class="secnum">46.2.2.1</span> To Create Resources for the Simple Examples</a></li>
</ul>
</li>
<li><a href="jms-examples002.htm#BABEEABE"><span class="secnum">46.2.3</span> Building All the Simple Examples</a>
<ul style="list-style-type:none">
<li><a href="jms-examples002.htm#sthref2385"><span class="secnum">46.2.3.1</span> To Build All the Simple Examples Using NetBeans IDE</a></li>
<li><a href="jms-examples002.htm#sthref2386"><span class="secnum">46.2.3.2</span> To Build All the Simple Examples Using Maven</a></li>
</ul>
</li>
<li><a href="jms-examples002.htm#BABIHCAE"><span class="secnum">46.2.4</span> Sending Messages</a>
<ul style="list-style-type:none">
<li><a href="jms-examples002.htm#sthref2389"><span class="secnum">46.2.4.1</span> The Producer.java Client</a></li>
<li><a href="jms-examples002.htm#sthref2390"><span class="secnum">46.2.4.2</span> To Run the Producer Client</a></li>
</ul>
</li>
<li><a href="jms-examples002.htm#BNCFB"><span class="secnum">46.2.5</span> Receiving Messages Synchronously</a>
<ul style="list-style-type:none">
<li><a href="jms-examples002.htm#BNCFC"><span class="secnum">46.2.5.1</span> The SynchConsumer.java Client</a></li>
<li><a href="jms-examples002.htm#BNCFG"><span class="secnum">46.2.5.2</span> To Run the SynchConsumer and Producer Clients</a></li>
</ul>
</li>
<li><a href="jms-examples002.htm#BNCFH"><span class="secnum">46.2.6</span> Using a Message Listener for Asynchronous Message Delivery</a>
<ul style="list-style-type:none">
<li><a href="jms-examples002.htm#BNCFI"><span class="secnum">46.2.6.1</span> Writing the AsynchConsumer.java and TextListener.java Clients</a></li>
<li><a href="jms-examples002.htm#BNCFK"><span class="secnum">46.2.6.2</span> To Run the AsynchConsumer and Producer Clients</a></li>
</ul>
</li>
<li><a href="jms-examples002.htm#BNCFL"><span class="secnum">46.2.7</span> Browsing Messages on a Queue</a>
<ul style="list-style-type:none">
<li><a href="jms-examples002.htm#BNCFM"><span class="secnum">46.2.7.1</span> The MessageBrowser.java Client</a></li>
<li><a href="jms-examples002.htm#BNCFN"><span class="secnum">46.2.7.2</span> To Run the QueueBrowser Client</a></li>
</ul>
</li>
<li><a href="jms-examples002.htm#BABDDHHC"><span class="secnum">46.2.8</span> Running Multiple Consumers on the Same Destination</a></li>
<li><a href="jms-examples002.htm#BNCFX"><span class="secnum">46.2.9</span> Acknowledging Messages</a>
<ul style="list-style-type:none">
<li><a href="jms-examples002.htm#GJSCG"><span class="secnum">46.2.9.1</span> To Run the ClientAckConsumer Client</a></li>
</ul>
</li>
</ul>
</div></li>
<li><a href="jms-examples003.htm#GIWFH"><span class="secnum">46.3</span> Writing More Advanced JMS Applications</a>
<ul style="list-style-type:none">
<li><a href="jms-examples003.htm#BNCGG"><span class="secnum">46.3.1</span> Using Durable Subscriptions</a>
<ul style="list-style-type:none">
<li><a href="jms-examples003.htm#sthref2409"><span class="secnum">46.3.1.1</span> To Create Resources for the Durable Subscription Example</a></li>
<li><a href="jms-examples003.htm#GJSCI"><span class="secnum">46.3.1.2</span> To Run the Durable Subscription Example</a></li>
<li><a href="jms-examples003.htm#sthref2410"><span class="secnum">46.3.1.3</span> To Run the unsubscriber Example</a></li>
</ul>
</li>
<li><a href="jms-examples003.htm#BNCGJ"><span class="secnum">46.3.2</span> Using Local Transactions</a>
<ul style="list-style-type:none">
<li><a href="jms-examples003.htm#sthref2414"><span class="secnum">46.3.2.1</span> To Create Resources for the transactedexample Example</a></li>
<li><a href="jms-examples003.htm#GJSHA"><span class="secnum">46.3.2.2</span> To Run the transactedexample Clients</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="jms-examples004.htm#BABGEFHC"><span class="secnum">46.4</span> Writing High Performance and Scalable JMS Applications</a>
<ul style="list-style-type:none">
<li><a href="jms-examples004.htm#BABIBEAC"><span class="secnum">46.4.1</span> Using Shared Nondurable Subscriptions</a>
<ul style="list-style-type:none">
<li><a href="jms-examples004.htm#sthref2415"><span class="secnum">46.4.1.1</span> Writing the Clients for the Shared Consumer Example</a></li>
<li><a href="jms-examples004.htm#sthref2416"><span class="secnum">46.4.1.2</span> To Run the SharedConsumer and Producer Clients</a></li>
</ul>
</li>
<li><a href="jms-examples004.htm#BABEJBHA"><span class="secnum">46.4.2</span> Using Shared Durable Subscriptions</a>
<ul style="list-style-type:none">
<li><a href="jms-examples004.htm#sthref2419"><span class="secnum">46.4.2.1</span> To Run the SharedDurableConsumer and Producer Clients</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="jms-examples005.htm#BABBABFC"><span class="secnum">46.5</span> Sending and Receiving Messages Using a Simple Web Application</a>
<ul style="list-style-type:none">
<li><a href="jms-examples005.htm#sthref2425"><span class="secnum">46.5.1</span> The websimplemessage Facelets Pages</a></li>
<li><a href="jms-examples005.htm#sthref2426"><span class="secnum">46.5.2</span> The websimplemessage Managed Beans</a></li>
<li><a href="jms-examples005.htm#sthref2427"><span class="secnum">46.5.3</span> Running the websimplemessage Example</a>
<ul style="list-style-type:none">
<li><a href="jms-examples005.htm#sthref2428"><span class="secnum">46.5.3.1</span> Creating Resources for the websimplemessage Example</a></li>
<li><a href="jms-examples005.htm#sthref2429"><span class="secnum">46.5.3.2</span> To Package and Deploy websimplemessage Using NetBeans IDE</a></li>
<li><a href="jms-examples005.htm#sthref2430"><span class="secnum">46.5.3.3</span> To Package and Deploy websimplemessage Using Maven</a></li>
<li><a href="jms-examples005.htm#sthref2431"><span class="secnum">46.5.3.4</span> To Run the websimplemessage Example</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="jms-examples006.htm#BNBPK"><span class="secnum">46.6</span> Receiving Messages Asynchronously Using a Message-Driven Bean</a>
<ul style="list-style-type:none">
<li><a href="jms-examples006.htm#BNBPL"><span class="secnum">46.6.1</span> Overview of the simplemessage Example</a></li>
<li><a href="jms-examples006.htm#BNBPN"><span class="secnum">46.6.2</span> The simplemessage Application Client</a></li>
<li><a href="jms-examples006.htm#BNBPO"><span class="secnum">46.6.3</span> The simplemessage Message-Driven Bean Class</a>
<ul style="list-style-type:none">
<li><a href="jms-examples006.htm#BNBPP"><span class="secnum">46.6.3.1</span> The onMessage Method</a></li>
</ul>
</li>
<li><a href="jms-examples006.htm#BNBPQ"><span class="secnum">46.6.4</span> Running the simplemessage Example</a>
<ul style="list-style-type:none">
<li><a href="jms-examples006.htm#BNBPR"><span class="secnum">46.6.4.1</span> Creating Resources for the simplemessage Example</a></li>
<li><a href="jms-examples006.htm#sthref2448"><span class="secnum">46.6.4.2</span> To Run the simplemessage Example Using NetBeans IDE</a></li>
<li><a href="jms-examples006.htm#BNBPT"><span class="secnum">46.6.4.3</span> To Run the simplemessage Example Using Maven</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="jms-examples007.htm#BNCGW"><span class="secnum">46.7</span> Sending Messages from a Session Bean to an MDB</a>
<ul style="list-style-type:none">
<li><a href="jms-examples007.htm#BNCGX"><span class="secnum">46.7.1</span> Writing the Application Components for the clientsessionmdb Example</a>
<ul style="list-style-type:none">
<li><a href="jms-examples007.htm#BNCGZ"><span class="secnum">46.7.1.1</span> Coding the Application Client: MyAppClient.java</a></li>
<li><a href="jms-examples007.htm#BNCHA"><span class="secnum">46.7.1.2</span> Coding the Publisher Session Bean</a></li>
<li><a href="jms-examples007.htm#BNCHB"><span class="secnum">46.7.1.3</span> Coding the Message-Driven Bean: MessageBean.java</a></li>
</ul>
</li>
<li><a href="jms-examples007.htm#sthref2457"><span class="secnum">46.7.2</span> Running the clientsessionmdb Example</a>
<ul style="list-style-type:none">
<li><a href="jms-examples007.htm#sthref2458"><span class="secnum">46.7.2.1</span> To Run clientsessionmdb Using NetBeans IDE</a></li>
<li><a href="jms-examples007.htm#sthref2459"><span class="secnum">46.7.2.2</span> To Run clientsessionmdb Using Maven</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="jms-examples008.htm#BNCHF"><span class="secnum">46.8</span> Using an Entity to Join Messages from Two MDBs</a>
<ul style="list-style-type:none">
<li><a href="jms-examples008.htm#BNCHG"><span class="secnum">46.8.1</span> Overview of the clientmdbentity Example Application</a></li>
<li><a href="jms-examples008.htm#BNCHI"><span class="secnum">46.8.2</span> Writing the Application Components for the clientmdbentity Example</a>
<ul style="list-style-type:none">
<li><a href="jms-examples008.htm#BNCHJ"><span class="secnum">46.8.2.1</span> Coding the Application Client: HumanResourceClient.java</a></li>
<li><a href="jms-examples008.htm#BNCHK"><span class="secnum">46.8.2.2</span> Coding the Message-Driven Beans for the clientmdbentity Example</a></li>
<li><a href="jms-examples008.htm#BNCHL"><span class="secnum">46.8.2.3</span> Coding the Entity Class for the clientmdbentity Example</a></li>
</ul>
</li>
<li><a href="jms-examples008.htm#sthref2470"><span class="secnum">46.8.3</span> Running the clientmdbentity Example</a>
<ul style="list-style-type:none">
<li><a href="jms-examples008.htm#sthref2471"><span class="secnum">46.8.3.1</span> To Run clientmdbentity Using NetBeans IDE</a></li>
<li><a href="jms-examples008.htm#sthref2472"><span class="secnum">46.8.3.2</span> To Run clientmdbentity Using Maven</a></li>
<li><a href="jms-examples008.htm#sthref2473"><span class="secnum">46.8.3.3</span> Viewing the Application Output</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="jms-examples009.htm#BABDFDJC"><span class="secnum">46.9</span> Using NetBeans IDE to Create JMS Resources</a>
<ul style="list-style-type:none">
<li><a href="jms-examples009.htm#sthref2474"><span class="secnum">46.9.1</span> To Create JMS Resources Using NetBeans IDE</a></li>
<li><a href="jms-examples009.htm#sthref2479"><span class="secnum">46.9.2</span> To Delete JMS Resources Using NetBeans IDE</a></li>
</ul>
</li>
</ul>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jms-examples001.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jms-examples003.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BNCFA" name="BNCFA"></a><a id="JEETT00554" name="JEETT00554"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">46.2</span> <a id="sthref2380" name="sthref2380"></a><a id="sthref2381" name="sthref2381"></a>Writing Simple JMS Applications</h1>
<p>This section shows how to create, package, and run simple JMS clients that are packaged as application clients. The clients demonstrate the basic tasks a JMS application must perform:</p>
<ul>
<li>
<p>Creating a <code>JMSContext</code></p>
</li>
<li>
<p>Creating message producers and consumers</p>
</li>
<li>
<p>Sending and receiving messages</p>
</li>
</ul>
<p>Each example uses two clients: one that sends messages and one that receives them. You can run the clients in two terminal windows.</p>
<p>When you write a JMS client to run in an enterprise bean application, you use many of the same methods in much the same sequence as for an application client. However, there are some significant differences. <a href="jms-concepts005.htm#BNCGL">Using the JMS API in Java EE Applications</a> describes these differences, and this chapter provides examples that illustrate them.</p>
<p>The examples for this section are in the <span class="variable">tut-install</span><code>/examples/jms/simple/</code> directory, under the following subdirectories:</p>
<br />
<code>producer/</code><br />
<code>synchconsumer/</code><br />
<code>asynchconsumer/</code><br />
<code>messagebrowser/</code><br />
<code>clientackconsumer/</code><br />
<p>Before running the examples, you need to start GlassFish Server and create administered objects.</p>
<a id="BNCFD" name="BNCFD"></a><a id="JEETT00823" name="JEETT00823"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">46.2.1</span> Starting the JMS Provider</h2>
<p>When you use GlassFish Server, your JMS provider is GlassFish Server. Start the server as described in <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>.</p>
</div>
<!-- class="sect2" -->
<a id="GKTJS" name="GKTJS"></a><a id="JEETT00824" name="JEETT00824"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">46.2.2</span> <a id="sthref2382" name="sthref2382"></a><a id="sthref2383" name="sthref2383"></a>Creating JMS Administered Objects</h2>
<p>This example uses the following JMS administered objects:</p>
<ul>
<li>
<p>A connection factory</p>
</li>
<li>
<p>Two destination resources: a topic and a queue</p>
</li>
</ul>
<p>Before you run the applications, you can use the <code>asadmin add-resources</code> command to create needed JMS resources, specifying as the argument a file named <code>glassfish-resources.xml</code>. This file can be created in any project using NetBeans IDE, although you can also create it by hand. A file for the needed resources is present in the <code>jms/simple/producer/src/main/setup/</code> directory.</p>
<p>The JMS examples use a connection factory with the logical JNDI lookup name <code>java:comp/DefaultJMSConnectionFactory</code>, which is preconfigured in GlassFish Server.</p>
<p>You can also use the <code>asadmin create-jms-resource</code> command to create resources, the <code>asadmin list-jms-resources</code> command to display their names, and the <code>asadmin delete-jms-resource</code> command to remove them.</p>
<a id="BABHEFCB" name="BABHEFCB"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3"><span class="secnum">46.2.2.1</span> To Create Resources for the Simple Examples</h3>
<p>A <code>glassfish-resources.xml</code> file in one of the Maven projects can create all the resources needed for the simple examples.</p>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>In a command window, go to the <code>Producer</code> example.</p>
<pre xml:space="preserve" class="oac_no_warn">
cd <span class="variable">tut-install</span>/jms/simple/producer
</pre></li>
<li>
<p>Create the resources using the <code>asadmin add-resources</code> command:</p>
<pre xml:space="preserve" class="oac_no_warn">
asadmin add-resources src/main/setup/glassfish-resources.xml
</pre></li>
<li>
<p>Verify the creation of the resources:</p>
<pre xml:space="preserve" class="oac_no_warn">
asadmin list-jms-resources
</pre>
<p>The command lists the two destinations and connection factory specified in the <code>glassfish-resources.xml</code> file in addition to the platform default connection factory:</p>
<pre xml:space="preserve" class="oac_no_warn">
jms/MyQueue
jms/MyTopic
jms/__defaultConnectionFactory
Command list-jms-resources executed successfully.
</pre>
<p>In GlassFish Server, the Java EE <code>java:comp/DefaultJMSConnectionFactory</code> resource is mapped to a connection factory named <code>jms/__defaultConnectionFactory</code>.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABEEABE" name="BABEEABE"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2"><span class="secnum">46.2.3</span> Building All the Simple Examples</h2>
<p><a id="sthref2384" name="sthref2384"></a>To run the simple examples using GlassFish Server, package each example in an application client JAR file. The application client JAR file requires a manifest file, located in the <code>src/main/java/META-INF/</code> directory for each example, along with the <code>.class</code> file.</p>
<p>The <code>pom.xml</code> file for each example specifies a plugin that creates an application client JAR file. You can build the examples using either NetBeans IDE or Maven.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2385" name="sthref2385"></a>
<h3 class="sect3"><span class="secnum">46.2.3.1</span> To Build All the Simple Examples Using NetBeans IDE</h3>
<ol>
<li>
<p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/jms
</pre></li>
<li>
<p>Expand the <code>jms</code> node and select the <code>simple</code> folder.</p>
</li>
<li>
<p>Click <span class="gui-object-action">Open Project</span> to open all the simple examples.</p>
</li>
<li>
<p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>simple</code> project and select <span class="gui-object-action">Build</span> to build all the examples.</p>
<p>This command places the application client JAR files in the <code>target</code> directories for the examples.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2386" name="sthref2386"></a>
<h3 class="sect3"><span class="secnum">46.2.3.2</span> To Build All the Simple Examples Using Maven</h3>
<ol>
<li>
<p>In a terminal window, go to the <code>simple</code> directory:</p>
<pre xml:space="preserve" class="oac_no_warn">
cd <span class="variable">tut-install</span>/jms/simple/
</pre></li>
<li>
<p>Enter the following command to build all the projects:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre>
<p>This command places the application client JAR files in the <code>target</code> directories for the examples.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABIHCAE" name="BABIHCAE"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2"><span class="secnum">46.2.4</span> <a id="sthref2387" name="sthref2387"></a><a id="sthref2388" name="sthref2388"></a>Sending Messages</h2>
<p>This section describes how to use a client to send messages. The <code>Producer.java</code> client will send messages in all of these examples.</p>
<p>The general steps this example performs are as follows.</p>
<ol>
<li>
<p>Inject resources for the administered objects used by the example.</p>
</li>
<li>
<p>Accept and verify command-line arguments. You can use this example to send any number of messages to either a queue or a topic, so you specify the destination type and the number of messages on the command line when you run the program.</p>
</li>
<li>
<p>Create a <code>JMSContext</code>, then send the specified number of text messages in the form of strings, as described in <a href="jms-concepts003.htm#BNCEW">Message Bodies</a>.</p>
</li>
<li>
<p>Send a final message of type <code>Message</code> to indicate that the consumer should expect no more messages.</p>
</li>
<li>
<p>Catch any exceptions.</p>
</li>
</ol>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2389" name="sthref2389"></a>
<h3 class="sect3"><span class="secnum">46.2.4.1</span> The Producer.java Client</h3>
<p>The sending client, <code>Producer.java</code>, performs the following steps.</p>
<ol>
<li>
<p>Injects resources for a connection factory, queue, and topic:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Resource(lookup = "java:comp/DefaultJMSConnectionFactory")
private static ConnectionFactory connectionFactory;
@Resource(lookup = "jms/MyQueue")
private static Queue queue;
@Resource(lookup = "jms/MyTopic")
private static Topic topic;
</pre></li>
<li>
<p>Retrieves and verifies command-line arguments that specify the destination type and the number of arguments:</p>
<pre xml:space="preserve" class="oac_no_warn">
final int NUM_MSGS;
String destType = args[0];
System.out.println("Destination type is " + destType);
if ( ! ( destType.equals("queue") || destType.equals("topic") ) ) { 
    System.err.println("Argument must be \"queue\" or " + "\"topic\"");
    System.exit(1);
}
if (args.length == 2){ 
    NUM_MSGS = (new Integer(args[1])).intValue();
} else { 
    NUM_MSGS = 1;
}
</pre></li>
<li>
<p>Assigns either the queue or the topic to a destination object, based on the specified destination type:</p>
<pre xml:space="preserve" class="oac_no_warn">
Destination dest = null;
try { 
    if (destType.equals("queue")) { 
        dest = (Destination) queue; 
    } else { 
        dest = (Destination) topic; 
    }
} catch (Exception e) {
    System.err.println("Error setting destination: " + e.toString()); 
    System.exit(1);
}
</pre></li>
<li>
<p>Within a <code>try</code>-with-resources block, creates a <code>JMSContext</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
try (JMSContext context = connectionFactory.createContext();) {
</pre></li>
<li>
<p>Sets the message count to zero, then creates a <code>JMSProducer</code> and sends one or more messages to the destination and increments the count. Messages in the form of strings are of the <code>TextMessage</code> message type:</p>
<pre xml:space="preserve" class="oac_no_warn">
    int count = 0;
    for (int i = 0; i &lt; NUM_MSGS; i++) { 
        String message = "This is message " + (i + 1) 
                + " from producer";
        // Comment out the following line to send many messages
        System.out.println("Sending message: " + message); 
        context.createProducer().send(dest, message);
        count += 1;
    }
    System.out.println("Text messages sent: " + count);
</pre></li>
<li>
<p>Sends an empty control message to indicate the end of the message stream:</p>
<pre xml:space="preserve" class="oac_no_warn">
    context.createProducer().send(dest, context.createMessage());
</pre>
<p>Sending an empty message of no specified type is a convenient way for an application to indicate to the consumer that the final message has arrived.</p>
</li>
<li>
<p>Catches and handles any exceptions. The end of the <code>try</code>-with-resources block automatically causes the <code>JMSContext</code> to be closed:</p>
<pre xml:space="preserve" class="oac_no_warn">
} catch (Exception e) {
    System.err.println("Exception occurred: " + e.toString());
    System.exit(1);
}
System.exit(0);
</pre></li>
</ol>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2390" name="sthref2390"></a>
<h3 class="sect3"><span class="secnum">46.2.4.2</span> To Run the Producer Client</h3>
<p>You can run the client using the <code>appclient</code> command. The <code>Producer</code> client takes one or two command-line arguments: a destination type and, optionally, a number of messages. If you do not specify a number of messages, the client sends one message.</p>
<p>You will use the client to send three messages to a queue.</p>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>) and that you have created resources and built the simple JMS examples (see <a href="#GKTJS">Creating JMS Administered Objects</a> and <a href="#BABEEABE">Building All the Simple Examples</a>).</p>
</li>
<li>
<p>In a terminal window, go to the <code>producer</code> directory:</p>
<pre xml:space="preserve" class="oac_no_warn">
cd producer
</pre></li>
<li>
<p>Run the <code>Producer</code> program, sending three messages to the queue:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/producer.jar queue 3
</pre>
<p>The output of the program looks like this (along with some additional output):</p>
<pre xml:space="preserve" class="oac_no_warn">
Destination type is queue
Sending message: This is message 1 from producer
Sending message: This is message 2 from producer
Sending message: This is message 3 from producer
Text messages sent: 3
</pre>
<p>The messages are now in the queue, waiting to be received.</p>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>When you run an application client, the command may take a long time to complete.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNCFB" name="BNCFB"></a><a id="JEETT01291" name="JEETT01291"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">46.2.5</span> <a id="sthref2391" name="sthref2391"></a><a id="sthref2392" name="sthref2392"></a><a id="sthref2393" name="sthref2393"></a>Receiving Messages Synchronously</h2>
<p>This section describes the receiving client, which uses the <code>receive</code> method to consume messages synchronously. This section then explains how to run the clients using GlassFish Server.</p>
<a id="BNCFC" name="BNCFC"></a><a id="JEETT00822" name="JEETT00822"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">46.2.5.1</span> The SynchConsumer.java Client</h3>
<p>The receiving client, <code>SynchConsumer.java</code>, performs the following steps.</p>
<ol>
<li>
<p>Injects resources for a connection factory, queue, and topic.</p>
</li>
<li>
<p>Assigns either the queue or the topic to a destination object, based on the specified destination type.</p>
</li>
<li>
<p>Within a <code>try</code>-with-resources block, creates a <code>JMSContext</code>.</p>
</li>
<li>
<p>Creates a <code>JMSConsumer</code>, starting message delivery:</p>
<pre xml:space="preserve" class="oac_no_warn">
consumer = context.createConsumer(dest);
</pre></li>
<li>
<p>Receives the messages sent to the destination until the end-of-message-stream control message is received:</p>
<pre xml:space="preserve" class="oac_no_warn">
int count = 0;
while (true) {
    Message m = consumer.receive(1000); 
    if (m != null) { 
        if (m instanceof TextMessage) { 
            System.out.println(
                    "Reading message: " + m.getBody(String.class));
            count += 1; 
        } else { 
            break; 
        } 
    }
}
System.out.println("Messages received: " + count);
</pre>
<p>Because the control message is not a <code>TextMessage</code>, the receiving client terminates the <code>while</code> loop and stops receiving messages after the control message arrives.</p>
</li>
<li>
<p>Catches and handles any exceptions. The end of the <code>try</code>-with-resources block automatically causes the <code>JMSContext</code> to be closed.</p>
</li>
</ol>
<p>The <code>SynchConsumer</code> client uses an indefinite <code>while</code> loop to receive messages, calling <code>receive</code> with a timeout argument.</p>
</div>
<!-- class="sect3" -->
<a id="BNCFG" name="BNCFG"></a><a id="JEETT00825" name="JEETT00825"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">46.2.5.2</span> To Run the SynchConsumer and Producer Clients</h3>
<p>You can run the client using the <code>appclient</code> command. The <code>SynchConsumer</code> client takes one command-line argument, the destination type.</p>
<p>These steps show how to receive and send messages synchronously using both a queue and a topic. The steps assume you already ran the <code>Producer</code> client and have three messages waiting in the queue.</p>
<ol>
<li>
<p>In the same terminal window where you ran <code>Producer</code>, go to the <code>synchconsumer</code> directory:</p>
<pre xml:space="preserve" class="oac_no_warn">
cd ../synchconsumer
</pre></li>
<li>
<p>Run the <code>SynchConsumer</code> client, specifying the queue:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/synchconsumer.jar queue
</pre>
<p>The output of the client looks like this (along with some additional output):</p>
<pre xml:space="preserve" class="oac_no_warn">
Destination type is queue
Reading message: This is message 1 from producer
Reading message: This is message 2 from producer
Reading message: This is message 3 from producer
Messages received: 3
</pre></li>
<li>
<p>Now try running the clients in the opposite order. Run the <code>SynchConsumer</code> client:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/synchconsumer.jar queue
</pre>
<p>The client displays the destination type and then waits for messages.</p>
</li>
<li>
<p>Open a new terminal window and run the <code>Producer</code> client:</p>
<pre xml:space="preserve" class="oac_no_warn">
cd <span class="variable">tut-install</span>/jms/simple/producer
appclient -client target/producer.jar queue 3
</pre>
<p>When the messages have been sent, the <code>SynchConsumer</code> client receives them and exits.</p>
</li>
<li>
<p>Now run the <code>Producer</code> client using a topic instead of a queue:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/producer.jar topic 3
</pre>
<p>The output of the client looks like this (along with some additional output):</p>
<pre xml:space="preserve" class="oac_no_warn">
Destination type is topic
Sending message: This is message 1 from producer
Sending message: This is message 2 from producer
Sending message: This is message 3 from producer
Text messages sent: 3
</pre></li>
<li>
<p>Now, in the other terminal window, run the <code>SynchConsumer</code> client using the topic:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/synchconsumer.jar topic
</pre>
<p>The result, however, is different. Because you are using a subscription on a topic, messages that were sent before you created the subscription on the topic will not be added to the subscription and delivered to the consumer. (See <a href="jms-concepts002.htm#BNCED">Publish/Subscribe Messaging Style</a> and <a href="jms-concepts003.htm#BABEEJJJ">Consuming Messages from Topics</a> for details.) Instead of receiving the messages, the client waits for messages to arrive.</p>
</li>
<li>
<p>Leave the <code>SynchConsumer</code> client running and run the <code>Producer</code> client again:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/producer.jar topic 3
</pre>
<p>Now the <code>SynchConsumer</code> client receives the messages:</p>
<pre xml:space="preserve" class="oac_no_warn">
Destination type is topic
Reading message: This is message 1 from producer
Reading message: This is message 2 from producer
Reading message: This is message 3 from producer
Messages received: 3
</pre>
<p>Because these messages were sent after the consumer was started, the client receives them.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNCFH" name="BNCFH"></a><a id="JEETT01292" name="JEETT01292"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">46.2.6</span> <a id="sthref2394" name="sthref2394"></a><a id="sthref2395" name="sthref2395"></a><a id="sthref2396" name="sthref2396"></a>Using a Message Listener for Asynchronous Message Delivery</h2>
<p>This section describes the receiving clients in an example that uses a message listener for asynchronous message delivery. This section then explains how to compile and run the clients using GlassFish Server.</p>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>In the Java EE platform, message listeners can be used only in application clients, as in this example. To allow asynchronous message delivery in a web or enterprise bean application, you use a message-driven bean, shown in later examples in this chapter.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
<a id="BNCFI" name="BNCFI"></a><a id="JEETT00826" name="JEETT00826"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">46.2.6.1</span> Writing the AsynchConsumer.java and TextListener.java Clients</h3>
<p>The sending client is <code>Producer.java</code>, the same client used in <a href="#BABIHCAE">Sending Messages</a> and <a href="#BNCFB">Receiving Messages Synchronously</a>.</p>
<p>An asynchronous consumer normally runs indefinitely. This one runs until the user types the character <code>q</code> or <code>Q</code> to stop the client.</p>
<p>The client, <code>AsynchConsumer.java</code>, performs the following steps.</p>
<ol>
<li>
<p>Injects resources for a connection factory, queue, and topic.</p>
</li>
<li>
<p>Assigns either the queue or the topic to a destination object, based on the specified destination type.</p>
</li>
<li>
<p>In a <code>try</code>-with-resources block, creates a <code>JMSContext</code>.</p>
</li>
<li>
<p>Creates a <code>JMSConsumer</code>.</p>
</li>
<li>
<p>Creates an instance of the <code>TextListener</code> class and registers it as the message listener for the <code>JMSConsumer</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
listener = new TextListener();
consumer.setMessageListener(listener);
</pre></li>
<li>
<p>Listens for the messages sent to the destination, stopping when the user types the character <code>q</code> or <code>Q</code> (it uses a <code>java.io.InputStreamReader</code> to do this).</p>
</li>
<li>
<p>Catches and handles any exceptions. The end of the <code>try</code>-with-resources block automatically causes the <code>JMSContext</code> to be closed, thus stopping delivery of messages to the message listener.</p>
</li>
</ol>
<p><a id="sthref2397" name="sthref2397"></a>The message listener, <code>TextListener.java</code>, follows these steps:</p>
<ol>
<li>
<p>When a message arrives, the <code>onMessage</code> method is called automatically.</p>
</li>
<li>
<p>If the message is a <code>TextMessage</code>, the <code>onMessage</code> method displays its content as a string value. If the message is not a text message, it reports this fact:</p>
<pre xml:space="preserve" class="oac_no_warn">
public void onMessage(Message m) { 
    try { 
        if (m instanceof TextMessage) { 
            System.out.println(
                    "Reading message: " + m.getBody(String.class)); 
        } else { 
             System.out.println("Message is not a TextMessage"); 
        } 
    } catch (JMSException | JMSRuntimeException e) {
        System.err.println("JMSException in onMessage(): " + e.toString());
    }
}
</pre></li>
</ol>
<p>For this example, you will use the same connection factory and destinations you created in <a href="#BABHEFCB">To Create Resources for the Simple Examples</a>.</p>
<p>The steps assume that you have already built and packaged all the examples using NetBeans IDE or Maven.</p>
</div>
<!-- class="sect3" -->
<a id="BNCFK" name="BNCFK"></a><a id="JEETT00268" name="JEETT00268"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">46.2.6.2</span> <a id="sthref2398" name="sthref2398"></a>To Run the AsynchConsumer and Producer Clients</h3>
<p>You will need two terminal windows, as you did in <a href="#BNCFB">Receiving Messages Synchronously</a>.</p>
<ol>
<li>
<p>In the terminal window where you ran the <code>SynchConsumer</code> client, go to the <code>asynchconsumer</code> example directory:</p>
<pre xml:space="preserve" class="oac_no_warn">
cd <span class="variable">tut-install</span>/jms/simple/asynchconsumer
</pre></li>
<li>
<p>Run the <code>AsynchConsumer</code> client, specifying the <code>topic</code> destination type:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/asynchconsumer.jar topic
</pre>
<p>The client displays the following lines (along with some additional output) and then waits for messages:</p>
<pre xml:space="preserve" class="oac_no_warn">
Destination type is topic
To end program, enter Q or q, then &lt;return&gt;
</pre></li>
<li>
<p>In the terminal window where you ran the <code>Producer</code> client previously, run the client again, sending three messages:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/producer.jar topic 3
</pre>
<p>The output of the client looks like this (along with some additional output):</p>
<pre xml:space="preserve" class="oac_no_warn">
Destination type is topic
Sending message: This is message 1 from producer
Sending message: This is message 2 from producer
Sending message: This is message 3 from producer
Text messages sent: 3
</pre>
<p>In the other window, the <code>AsynchConsumer</code> client displays the following (along with some additional output):</p>
<pre xml:space="preserve" class="oac_no_warn">
Destination type is topic
To end program, enter Q or q, then &lt;return&gt;
Reading message: This is message 1 from producer
Reading message: This is message 2 from producer
Reading message: This is message 3 from producer
Message is not a TextMessage
</pre>
<p>The last line appears because the client has received the non-text control message sent by the <code>Producer</code> client.</p>
</li>
<li>
<p>Enter <code>Q</code> or <code>q</code> and press <span class="gui-object-action">Return</span> to stop the <code>AsynchConsumer</code> client.</p>
</li>
<li>
<p>Now run the clients using a queue.</p>
<p>In this case, as with the synchronous example, you can run the <code>Producer</code> client first, because there is no timing dependency between the sender and receiver:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/producer.jar queue 3
</pre>
<p>The output of the client looks like this:</p>
<pre xml:space="preserve" class="oac_no_warn">
Destination type is queue
Sending message: This is message 1 from producer
Sending message: This is message 2 from producer
Sending message: This is message 3 from producer
Text messages sent: 3
</pre></li>
<li>
<p>In the other window, run the <code>AsynchConsumer</code> client:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/asynchconsumer.jar queue
</pre>
<p>The output of the client looks like this (along with some additional output):</p>
<pre xml:space="preserve" class="oac_no_warn">
Destination type is queue
To end program, enter Q or q, then &lt;return&gt;
Reading message: This is message 1 from producer
Reading message: This is message 2 from producer
Reading message: This is message 3 from producer
Message is not a TextMessage
</pre></li>
<li>
<p>Enter <code>Q</code> or <code>q</code> and press <span class="gui-object-action">Return</span> to stop the client.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNCFL" name="BNCFL"></a><a id="JEETT01293" name="JEETT01293"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">46.2.7</span> <a id="sthref2399" name="sthref2399"></a><a id="sthref2400" name="sthref2400"></a><a id="sthref2401" name="sthref2401"></a>Browsing Messages on a Queue</h2>
<p>This section describes an example that creates a <code>QueueBrowser</code> object to examine messages on a queue, as described in <a href="jms-concepts003.htm#BNCEY">JMS Queue Browsers</a>. This section then explains how to compile, package, and run the example using GlassFish Server.</p>
<a id="BNCFM" name="BNCFM"></a><a id="JEETT00827" name="JEETT00827"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">46.2.7.1</span> The MessageBrowser.java Client</h3>
<p><a id="sthref2402" name="sthref2402"></a>To create a <code>QueueBrowser</code> for a queue, you call the <code>JMSContext.createBrowser</code> method with the queue as the argument. You obtain the messages in the queue as an <code>Enumeration</code> object. You can then iterate through the <code>Enumeration</code> object and display the contents of each message.</p>
<p>The <code>MessageBrowser.java</code> client performs the following steps.</p>
<ol>
<li>
<p>Injects resources for a connection factory and a queue.</p>
</li>
<li>
<p>In a <code>try</code>-with-resources block, creates a <code>JMSContext</code>.</p>
</li>
<li>
<p>Creates a <code>QueueBrowser</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
QueueBrowser browser = context.createBrowser(queue);
</pre></li>
<li>
<p>Retrieves the <code>Enumeration</code> that contains the messages:</p>
<pre xml:space="preserve" class="oac_no_warn">
Enumeration msgs = browser.getEnumeration();
</pre></li>
<li>
<p>Verifies that the <code>Enumeration</code> contains messages, then displays the contents of the messages:</p>
<pre xml:space="preserve" class="oac_no_warn">
if ( !msgs.hasMoreElements() ) { 
    System.out.println("No messages in queue");
} else { 
    while (msgs.hasMoreElements()) { 
        Message tempMsg = (Message)msgs.nextElement(); 
        System.out.println("Message: " + tempMsg); 
    }
}
</pre></li>
<li>
<p>Catches and handles any exceptions. The end of the <code>try</code>-with-resources block automatically causes the <code>JMSContext</code> to be closed.</p>
</li>
</ol>
<p>Dumping the message contents to standard output retrieves the message body and properties in a format that depends on the implementation of the <code>toString</code> method. In GlassFish Server, the message format looks something like this:</p>
<pre xml:space="preserve" class="oac_no_warn">
Text:   This is message 3 from producer
Class:                  com.sun.messaging.jmq.jmsclient.TextMessageImpl
getJMSMessageID():      ID:8-10.152.23.26(bf:27:4:e:e7:ec)-55645-1363100335526
getJMSTimestamp():      1129061034355
getJMSCorrelationID():  null
JMSReplyTo:             null
JMSDestination:         PhysicalQueue
getJMSDeliveryMode():   PERSISTENT
getJMSRedelivered():    false
getJMSType():           null
getJMSExpiration():     0
getJMSPriority():       4
Properties:             {JMSXDeliveryCount=0}
</pre>
<p>Instead of displaying the message contents this way, you can call some of the <code>Message</code> interface's getter methods to retrieve the parts of the message you want to see.</p>
<p>For this example, you will use the connection factory and queue you created for <a href="#BNCFB">Receiving Messages Synchronously</a>. It is assumed that you have already built and packaged all the examples.</p>
</div>
<!-- class="sect3" -->
<a id="BNCFN" name="BNCFN"></a><a id="JEETT00270" name="JEETT00270"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">46.2.7.2</span> To Run the QueueBrowser Client</h3>
<p>To run the <code>MessageBrowser</code> example using the <code>appclient</code> command, follow these steps.</p>
<p>You also need the <code>Producer</code> example to send the message to the queue, and one of the consumer clients to consume the messages after you inspect them.</p>
<p>To run the clients, you need two terminal windows.</p>
<ol>
<li>
<p>In a terminal window, go to the <code>producer</code> directory:</p>
<pre xml:space="preserve" class="oac_no_warn">
cd <span class="variable">tut-install</span>/examples/jms/simple/producer/
</pre></li>
<li>
<p>Run the <code>Producer</code> client, sending one message to the queue, along with the non-text control message:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/producer.jar queue
</pre>
<p>The output of the client looks like this (along with some additional output):</p>
<pre xml:space="preserve" class="oac_no_warn">
Destination type is queue
Sending message: This is message 1 from producer
Text messages sent: 1
</pre></li>
<li>
<p>In another terminal window, go to the <code>messagebrowser</code> directory:</p>
<pre xml:space="preserve" class="oac_no_warn">
cd <span class="variable">tut-install</span>/jms/simple/messagebrowser
</pre></li>
<li>
<p>Run the <code>MessageBrowser</code> client using the following command:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/messagebrowser.jar
</pre>
<p>The output of the client looks something like this (along with some additional output):</p>
<pre xml:space="preserve" class="oac_no_warn">
Message: 
Text:   This is message 1 from producer
Class:                  com.sun.messaging.jmq.jmsclient.TextMessageImpl
getJMSMessageID():      ID:9-10.152.23.26(bf:27:4:e:e7:ec)-55645-1363100335526
getJMSTimestamp():      1363100335526
getJMSCorrelationID():  null
JMSReplyTo:             null
JMSDestination:         PhysicalQueue
getJMSDeliveryMode():   PERSISTENT
getJMSRedelivered():    false
getJMSType():           null
getJMSExpiration():     0
getJMSPriority():       4
Properties:             {JMSXDeliveryCount=0}

Message: 
Class:                  com.sun.messaging.jmq.jmsclient.MessageImpl
getJMSMessageID():      ID:10-10.152.23.26(bf:27:4:e:e7:ec)-55645-1363100335526
getJMSTimestamp():      1363100335526
getJMSCorrelationID():  null
JMSReplyTo:             null
JMSDestination:         PhysicalQueue
getJMSDeliveryMode():   PERSISTENT
getJMSRedelivered():    false
getJMSType():           null
getJMSExpiration():     0
getJMSPriority():       4
Properties:             {JMSXDeliveryCount=0}
</pre>
<p>The first message is the <code>TextMessage</code>, and the second is the non-text control message.</p>
</li>
<li>
<p>Go to the <code>synchconsumer</code> directory.</p>
</li>
<li>
<p>Run the <code>SynchConsumer</code> client to consume the messages:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/synchconsumer.jar queue
</pre>
<p>The output of the client looks like this (along with some additional output):</p>
<pre xml:space="preserve" class="oac_no_warn">
Destination type is queue
Reading message: This is message 1 from producer
Messages received: 1
</pre></li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABDDHHC" name="BABDDHHC"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h2 class="sect2"><span class="secnum">46.2.8</span> Running Multiple Consumers on the Same Destination</h2>
<p>To illustrate further the way point-to-point and publish/subscribe messaging works, you can use the <code>Producer</code> and <code>SynchConsumer</code> examples to send messages that are then consumed by two clients running simultaneously.</p>
<ol>
<li>
<p>Open three command windows. In one, go to the <code>producer</code> directory. In the other two, go to the <code>synchconsumer</code> directory.</p>
</li>
<li>
<p>In each of the <code>synchconsumer</code> windows, start running the client, receiving messages from a queue:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/synchconsumer.jar queue
</pre>
<p>Wait until you see the "Destination type is queue" message in both windows.</p>
</li>
<li>
<p>In the <code>producer</code> window, run the client, sending 20 or so messages to the queue:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/producer.jar queue 20
</pre></li>
<li>
<p>Look at the output in the <code>synchconsumer</code> windows. In point-to-point messaging, each message can have only one consumer. Therefore, each of the clients receives some of the messages. One of the clients receives the non-text control message, reports the number of messages received, and exits.</p>
</li>
<li>
<p>In the window of the client that did not receive the non-text control message, enter Control-C to exit the program.</p>
</li>
<li>
<p>Next, run the <code>synchconsumer</code> clients using a topic. In each window, run the following command:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/synchconsumer.jar topic
</pre>
<p>Wait until you see the "Destination type is topic" message in both windows.</p>
</li>
<li>
<p>In the <code>producer</code> window, run the client, sending 20 or so messages to the topic:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/producer.jar topic 20
</pre></li>
<li>
<p>Again, look at the output in the <code>synchconsumer</code> windows. In publish/subscribe messaging, a copy of every message is sent to each subscription on the topic. Therefore, each of the clients receives all 20 text messages as well as the non-text control message.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BNCFX" name="BNCFX"></a><a id="JEETT01296" name="JEETT01296"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">46.2.9</span> <a id="sthref2403" name="sthref2403"></a><a id="sthref2404" name="sthref2404"></a>Acknowledging Messages</h2>
<p>JMS provides two alternative ways for a consuming client to ensure that a message is not acknowledged until the application has finished processing the message:</p>
<ul>
<li>
<p>Using a synchronous consumer in a <code>JMSContext</code> that has been configured to use the <code>CLIENT_ACKNOWLEDGE</code> setting</p>
</li>
<li>
<p>Using a message listener for asynchronous message delivery in a <code>JMSContext</code> that has been configured to use the default <code>AUTO_ACKNOWLEDGE</code> setting</p>
</li>
</ul>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>In the Java EE platform, <code>CLIENT_ACKNOWLEDGE</code> sessions can be used only in application clients, as in this example.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
<p>The <code>clientackconsumer</code> example demonstrates the first alternative, in which a synchronous consumer uses client acknowledgment. The <code>asynchconsumer</code> example described in <a href="#BNCFH">Using a Message Listener for Asynchronous Message Delivery</a> demonstrates the second alternative.</p>
<p>For information about message acknowledgment, see <a href="jms-concepts004.htm#BNCFW">Controlling Message Acknowledgment</a>.</p>
<p>The following table describes four possible interactions between types of consumers and types of acknowledgment.</p>
<div class="tblhruleformal"><a id="sthref2405" name="sthref2405"></a><a id="sthref2406" name="sthref2406"></a>
<p class="titleintable">Table 46-3 Message Acknowledgment with Synchronous and Asynchronous Consumers</p>
<table class="HRuleFormal" title="Message Acknowledgment with Synchronous and Asynchronous Consumers" summary="This table describes the behavior of synchronous and asynchronous consumers with client and auto acknowledgment." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="21%" />
<col width="29%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t7">Consumer Type</th>
<th align="left" valign="bottom" id="r1c2-t7">Acknowledgment Type</th>
<th align="left" valign="bottom" id="r1c3-t7">Behavior</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t7" headers="r1c1-t7">
<p>Synchronous</p>
</td>
<td align="left" headers="r2c1-t7 r1c2-t7">
<p>Client</p>
</td>
<td align="left" headers="r2c1-t7 r1c3-t7">
<p>Client acknowledges message after processing is complete</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t7" headers="r1c1-t7">
<p>Asynchronous</p>
</td>
<td align="left" headers="r3c1-t7 r1c2-t7">
<p>Client</p>
</td>
<td align="left" headers="r3c1-t7 r1c3-t7">
<p>Client acknowledges message after processing is complete</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t7" headers="r1c1-t7">
<p>Synchronous</p>
</td>
<td align="left" headers="r4c1-t7 r1c2-t7">
<p>Auto</p>
</td>
<td align="left" headers="r4c1-t7 r1c3-t7">
<p>Acknowledgment happens immediately after <code>receive</code> call; message cannot be redelivered if any subsequent processing steps fail</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t7" headers="r1c1-t7">
<p>Asynchronous</p>
</td>
<td align="left" headers="r5c1-t7 r1c2-t7">
<p>Auto</p>
</td>
<td align="left" headers="r5c1-t7 r1c3-t7">
<p>Message is automatically acknowledged when <code>onMessage</code> method returns</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>The example is under the <span class="variable">tut-install</span><code>/examples/jms/simple/clientackconsumer/</code> directory.</p>
<p>The example client, <code>ClientAckConsumer.java</code>, creates a <code>JMSContext</code> that specifies client acknowledgment:</p>
<pre xml:space="preserve" class="oac_no_warn">
try (JMSContext context =
      connectionFactory.createContext(JMSContext.CLIENT_ACKNOWLEDGE);) {
    ...
</pre>
<p>The client uses a <code>while</code> loop almost identical to that used by <code>SynchConsumer.java</code>, with the exception that after processing each message, it calls the <code>acknowledge</code> method on the <code>JMSContext</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
context.acknowledge();
</pre>
<p>The example uses the following objects:</p>
<ul>
<li>
<p>The <code>jms/MyQueue</code> resource that you created for <a href="#BNCFB">Receiving Messages Synchronously</a>.</p>
</li>
<li>
<p><code>java:comp/DefaultJMSConnectionFactory</code>, the platform default connection factory preconfigured with GlassFish Server</p>
</li>
</ul>
<a id="GJSCG" name="GJSCG"></a><a id="JEETT00277" name="JEETT00277"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">46.2.9.1</span> To Run the ClientAckConsumer Client</h3>
<ol>
<li>
<p>In a terminal window, go to the following directory:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/jms/simple/producer/
</pre></li>
<li>
<p>Run the <code>Producer</code> client, sending some messages to the queue:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/producer.jar queue 3
</pre></li>
<li>
<p>In another terminal window, go to the following directory:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/jms/simple/clientackconsumer/
</pre></li>
<li>
<p>To run the client, use the following command:</p>
<pre xml:space="preserve" class="oac_no_warn">
appclient -client target/clientackconsumer.jar
</pre>
<p>The client output looks like this (along with some additional output):</p>
<pre xml:space="preserve" class="oac_no_warn">
Created client-acknowledge JMSContext
Reading message: This is message 1 from producer
Acknowledging TextMessage
Reading message: This is message 2 from producer
Acknowledging TextMessage
Reading message: This is message 3 from producer
Acknowledging TextMessage
Acknowledging non-text control message
</pre>
<p>The client acknowledges each message explicitly after processing it, just as a <code>JMSContext</code> configured to use <code>AUTO_ACKNOWLEDGE</code> does automatically after a <code>MessageListener</code> returns successfully from processing a message received asynchronously.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jms-examples001.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jms-examples003.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

