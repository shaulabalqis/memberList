<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:4Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Using Programmatic Security with Web Applications" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Using Programmatic Security with Web Applications | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<ul style="list-style-type:none">
<li><a href="security-webtier001.htm#BNCAT"><span class="secnum">48.1</span> Overview of Web Application Security</a></li>
<li><a href="security-webtier002.htm#GKBAA"><span class="secnum">48.2</span> Securing Web Applications</a>
<ul style="list-style-type:none">
<li><a href="security-webtier002.htm#BNCBK"><span class="secnum">48.2.1</span> Specifying Security Constraints</a>
<ul style="list-style-type:none">
<li><a href="security-webtier002.htm#GJJCD"><span class="secnum">48.2.1.1</span> Specifying a Web Resource Collection</a></li>
<li><a href="security-webtier002.htm#GJJCG"><span class="secnum">48.2.1.2</span> Specifying an Authorization Constraint</a></li>
<li><a href="security-webtier002.htm#BNCBM"><span class="secnum">48.2.1.3</span> Specifying a Secure Connection</a></li>
<li><a href="security-webtier002.htm#BNCBL"><span class="secnum">48.2.1.4</span> Specifying Security Constraints for Resources</a></li>
</ul>
</li>
<li><a href="security-webtier002.htm#GKBSA"><span class="secnum">48.2.2</span> Specifying Authentication Mechanisms</a>
<ul style="list-style-type:none">
<li><a href="security-webtier002.htm#BNCBO"><span class="secnum">48.2.2.1</span> HTTP Basic Authentication</a></li>
<li><a href="security-webtier002.htm#BNCBQ"><span class="secnum">48.2.2.2</span> Form-Based Authentication</a></li>
<li><a href="security-webtier002.htm#BNCBW"><span class="secnum">48.2.2.3</span> Digest Authentication</a></li>
</ul>
</li>
<li><a href="security-webtier002.htm#BNCBN"><span class="secnum">48.2.3</span> Specifying an Authentication Mechanism in the Deployment Descriptor</a></li>
<li><a href="security-webtier002.htm#BNCAV"><span class="secnum">48.2.4</span> Declaring Security Roles</a></li>
</ul>
</li>
<li><div id="backgroundColor"><a href="security-webtier003.htm#GJIIE"><span class="secnum">48.3</span> Using Programmatic Security with Web Applications</a><ul style="list-style-type:none">
<li><a href="security-webtier003.htm#GIRCJ"><span class="secnum">48.3.1</span> Authenticating Users Programmatically</a></li>
<li><a href="security-webtier003.htm#BNCBA"><span class="secnum">48.3.2</span> Checking Caller Identity Programmatically</a></li>
<li><a href="security-webtier003.htm#GJJLQ"><span class="secnum">48.3.3</span> Example Code for Programmatic Security</a></li>
<li><a href="security-webtier003.htm#BNCBB"><span class="secnum">48.3.4</span> Declaring and Linking Role References</a></li>
</ul>
</div></li>
<li><a href="security-webtier004.htm#BNCBX"><span class="secnum">48.4</span> Examples: Securing Web Applications</a>
<ul style="list-style-type:none">
<li><a href="security-webtier004.htm#GJJLK"><span class="secnum">48.4.1</span> To Set Up Your System for Running the Security Examples</a></li>
<li><a href="security-webtier004.htm#BNCCK"><span class="secnum">48.4.2</span> The hello2-basicauth Example: Basic Authentication with a Servlet</a>
<ul style="list-style-type:none">
<li><a href="security-webtier004.htm#GJRMH"><span class="secnum">48.4.2.1</span> Specifying Security for Basic Authentication Using Annotations</a></li>
<li><a href="security-webtier004.htm#GJQYS"><span class="secnum">48.4.2.2</span> To Build, Package, and Deploy the hello2-basicauth Example Using NetBeans IDE</a></li>
<li><a href="security-webtier004.htm#GJQZH"><span class="secnum">48.4.2.3</span> To Build, Package, and Deploy the hello2-basicauth Example Using Maven</a></li>
<li><a href="security-webtier004.htm#GJQZF"><span class="secnum">48.4.2.4</span> To Run the hello2-basicauth Example</a></li>
</ul>
</li>
<li><a href="security-webtier004.htm#BNCBY"><span class="secnum">48.4.3</span> The hello1-formauth Example: Form-Based Authentication with a JavaServer Faces Application</a>
<ul style="list-style-type:none">
<li><a href="security-webtier004.htm#BNCCA"><span class="secnum">48.4.3.1</span> Creating the Login Form and the Error Page</a></li>
<li><a href="security-webtier004.htm#BNCCB"><span class="secnum">48.4.3.2</span> Specifying Security for the Form-Based Authentication Example</a></li>
<li><a href="security-webtier004.htm#GJRBA"><span class="secnum">48.4.3.3</span> To Build, Package, and Deploy the hello1-formauth Example Using NetBeans IDE</a></li>
<li><a href="security-webtier004.htm#GJRAZ"><span class="secnum">48.4.3.4</span> To Build, Package, and Deploy the hello1-formauth Example Using Maven and the asadmin Command</a></li>
<li><a href="security-webtier004.htm#GJRAL"><span class="secnum">48.4.3.5</span> To Run the hello1-formauth Example</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="security-webtier002.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="security-webtier004.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="GJIIE" name="GJIIE"></a><a id="JEETT00518" name="JEETT00518"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">48.3</span> <a id="sthref2650" name="sthref2650"></a>Using Programmatic Security with Web Applications</h1>
<p>Programmatic security is used by security-aware applications when declarative security alone is not sufficient to express the security model of the application.</p>
<a id="GIRCJ" name="GIRCJ"></a><a id="JEETT01229" name="JEETT01229"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">48.3.1</span> <a id="sthref2651" name="sthref2651"></a><a id="sthref2652" name="sthref2652"></a><a id="sthref2653" name="sthref2653"></a>Authenticating Users Programmatically</h2>
<p>The following methods of the <code>HttpServletRequest</code> interface enable you to authenticate users for a web application programmatically.</p>
<ul>
<li>
<p><code>authenticate</code> allows an application to instigate authentication of the request caller by the container from within an unconstrained request context. A login dialog box displays and collects the user name and password for authentication purposes.</p>
</li>
<li>
<p><code>login</code> allows an application to collect user name and password information as an alternative to specifying form-based authentication in an application deployment descriptor.</p>
</li>
<li>
<p><code>logout</code> allows an application to reset the caller identity of a request.</p>
</li>
</ul>
<p>The following example code shows how to use the <code>login</code> and <code>logout</code> methods:</p>
<pre xml:space="preserve" class="oac_no_warn">
package test;

import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import javax.ejb.EJB;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet(name="TutorialServlet", urlPatterns={"/TutorialServlet"})
public class TutorialServlet extends HttpServlet {
    @EJB
    private ConverterBean converterBean;

    /**
     * Processes requests for both HTTP &lt;code&gt;GET&lt;/code&gt; 
     *    and &lt;code&gt;POST&lt;/code&gt; methods.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, 
            HttpServletResponse response)
    throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();
        try {

            out.println("&lt;html&gt;");
            out.println("&lt;head&gt;");
            out.println("&lt;title&gt;Servlet TutorialServlet&lt;/title&gt;");
            out.println("&lt;/head&gt;");
            out.println("&lt;body&gt;");
            request.<span class="bold">login</span>("TutorialUser", "TutorialUser");
            BigDecimal result = 
                converterBean.dollarToYen(new BigDecimal("1.0"));
            out.println("&lt;h1&gt;Servlet TutorialServlet result of dollarToYen= "
                + result + "&lt;/h1&gt;");
            out.println("&lt;/body&gt;");
            out.println("&lt;/html&gt;");
        } catch (Exception e) {
            throw new ServletException(e);
        } finally {
            request.<span class="bold">logout</span>();
            out.close();
        }
    }
}
</pre>
<p>The following example code shows how to use the <code>authenticate</code> method:</p>
<pre xml:space="preserve" class="oac_no_warn">
package com.example.test;

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class TestServlet extends HttpServlet {

    protected void processRequest(HttpServletRequest request, 
            HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();
        try {
            request.<span class="bold">authenticate</span>(response);
            out.println("Authenticate Successful");
        } finally {
            out.close();
        }
    }
</pre></div>
<!-- class="sect2" -->
<a id="BNCBA" name="BNCBA"></a><a id="JEETT01230" name="JEETT01230"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">48.3.2</span> <a id="sthref2654" name="sthref2654"></a><a id="sthref2655" name="sthref2655"></a><a id="sthref2656" name="sthref2656"></a><a id="sthref2657" name="sthref2657"></a>Checking Caller Identity Programmatically</h2>
<p>In general, security management should be enforced by the container in a manner that is transparent to the web component. The security API described in this section should be used only in the less frequent situations in which the web component methods need to access the security context information.</p>
<p>Servlet 3.1 specifies the following methods that enable you to access security information about the component's caller.</p>
<ul>
<li>
<p><code>getRemoteUser</code> determines the user name with which the client authenticated. The <code>getRemoteUser</code> method returns the name of the remote user (the caller) associated by the container with the request. If no user has been authenticated, this method returns <code>null</code>.</p>
</li>
<li>
<p><code>isUserInRole</code> determines whether a remote user is in a specific security role. If no user has been authenticated, this method returns <code>false</code>. This method expects a <code>String</code> user <code>role-name</code> parameter.</p>
<p>The <code>security-role-ref</code> element should be declared in the deployment descriptor with a <code>role-name</code> subelement containing the role name to be passed to the method. Using security role references is discussed in <a href="#BNCBB">Declaring and Linking Role References</a>.</p>
</li>
<li>
<p><code>getUserPrincipal</code> determines the principal name of the current user and returns a <code>java.security.Principal</code> object. If no user has been authenticated, this method returns <code>null</code>. Calling the <code>getName</code> method on the <code>Principal</code> returned by <code>getUserPrincipal</code> returns the name of the remote user.</p>
</li>
</ul>
<p>Your application can make business-logic decisions based on the information obtained using these APIs.</p>
</div>
<!-- class="sect2" -->
<a id="GJJLQ" name="GJJLQ"></a><a id="JEETT01231" name="JEETT01231"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">48.3.3</span> Example Code for Programmatic Security</h2>
<p>The following code demonstrates the use of programmatic security for the purposes of programmatic login. This servlet does the following.</p>
<ol>
<li>
<p>It displays information about the current user.</p>
</li>
<li>
<p>It prompts the user to log in.</p>
</li>
<li>
<p>It prints out the information again to demonstrate the effect of the <code>login</code> method.</p>
</li>
<li>
<p>It logs the user out.</p>
</li>
<li>
<p>It prints out the information again to demonstrate the effect of the <code>logout</code> method.</p>
</li>
</ol>
<pre xml:space="preserve" class="oac_no_warn">
package enterprise.programmatic_login;

import java.io.*;
import java.net.*;
import javax.annotation.security.DeclareRoles;
import javax.servlet.*;
import javax.servlet.http.*;

@DeclareRoles("javaee7user")
public class LoginServlet extends HttpServlet {

    /** 
     * Processes requests for both HTTP GET and POST methods.
     * @param request servlet request
     * @param response servlet response
     */
    protected void processRequest(HttpServletRequest request, 
                 HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();
        try {
            String userName = request.getParameter("txtUserName");
            String password = request.getParameter("txtPassword");
            
            out.println("Before Login" + "&lt;br&gt;&lt;br&gt;");
            out.println("IsUserInRole?.." 
                        + request.isUserInRole("javaee7user")+"&lt;br&gt;");
            out.println("getRemoteUser?.." + request.getRemoteUser()+"&lt;br&gt;");
            out.println("getUserPrincipal?.." 
                        + request.getUserPrincipal()+"&lt;br&gt;");
            out.println("getAuthType?.." + request.getAuthType()+"&lt;br&gt;&lt;br&gt;");
            
            try {
                request.login(userName, password); 
            } catch(ServletException ex) {
                out.println("Login Failed with a ServletException.." 
                    + ex.getMessage());
                return;
            }
            out.println("After Login..."+"&lt;br&gt;&lt;br&gt;");
            out.println("IsUserInRole?.." 
                        + request.isUserInRole("javaee7user")+"&lt;br&gt;");
            out.println("getRemoteUser?.." + request.getRemoteUser()+"&lt;br&gt;");
            out.println("getUserPrincipal?.." 
                        + request.getUserPrincipal()+"&lt;br&gt;");
            out.println("getAuthType?.." + request.getAuthType()+"&lt;br&gt;&lt;br&gt;");
            
            request.logout();
            out.println("After Logout..."+"&lt;br&gt;&lt;br&gt;");
            out.println("IsUserInRole?.." 
                        + request.isUserInRole("javaee7user")+"&lt;br&gt;");
            out.println("getRemoteUser?.." + request.getRemoteUser()+"&lt;br&gt;");
            out.println("getUserPrincipal?.."
                        + request.getUserPrincipal()+"&lt;br&gt;");
            out.println("getAuthType?.." + request.getAuthType()+"&lt;br&gt;");
        } finally {
            out.close();
        }
    }
    ...
}
</pre></div>
<!-- class="sect2" -->
<a id="BNCBB" name="BNCBB"></a><a id="JEETT01232" name="JEETT01232"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">48.3.4</span> <a id="sthref2658" name="sthref2658"></a><a id="sthref2659" name="sthref2659"></a><a id="sthref2660" name="sthref2660"></a>Declaring and Linking Role References</h2>
<p>A <span class="glossaryterm">security role reference</span> is a mapping between the name of a role that is called from a web component using <code>isUserInRole(String role)</code> and the name of a security role that has been defined for the application. If no <code>security-role-ref</code> element is declared in a deployment descriptor and the <code>isUserInRole</code> method is called, the container defaults to checking the provided role name against the list of all security roles defined for the web application. Using the default method instead of using the <code>security-role-ref</code> element limits your flexibility to change role names in an application without also recompiling the servlet making the call.</p>
<p>The <code>security-role-ref</code> element is used when an application uses the <code>HttpServletRequest.isUserInRole(String role)</code>. The value passed to the <code>isUserInRole</code> method is a <code>String</code> representing the role name of the user. The value of the <code>role-name</code> element must be the <code>String</code> used as the parameter to the <code>HttpServletRequest.isUserInRole(String role)</code>. The <code>role-link</code> must contain the name of one of the security roles defined in the <code>security-role</code> elements. The container uses the mapping of <code>security-role-ref</code> to <code>security-role</code> when determining the return value of the call.</p>
<p>For example, to map the security role reference <code>cust</code> to the security role with role name <code>bankCustomer</code>, the elements would look like this:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;servlet&gt;
...
    &lt;security-role-ref&gt;
        &lt;role-name&gt;cust&lt;/role-name&gt;
        &lt;role-link&gt;bankCustomer&lt;/role-link&gt;
    &lt;/security-role-ref&gt;
...
&lt;/servlet&gt;
</pre>
<p>If the servlet method is called by a user in the <code>bankCustomer</code> security role, <code>isUserInRole("cust")</code> returns <code>true</code>.</p>
<p>The <code>role-link</code> element in the <code>security-role-ref</code> element must match a <code>role-name</code> defined in the <code>security-role</code> element of the same <code>web.xml</code> deployment descriptor, as shown here:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;security-role&gt;
    &lt;role-name&gt;bankCustomer&lt;/role-name&gt;
&lt;/security-role&gt;
</pre>
<p>A security role reference, including the name defined by the reference, is scoped to the component whose deployment descriptor contains the <code>security-role-ref</code> deployment descriptor element.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="security-webtier002.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="security-webtier004.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

