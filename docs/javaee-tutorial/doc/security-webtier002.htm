<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:4Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Securing Web Applications" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Securing Web Applications | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<ul style="list-style-type:none">
<li><a href="security-webtier001.htm#BNCAT"><span class="secnum">48.1</span> Overview of Web Application Security</a></li>
<li><div id="backgroundColor"><a href="security-webtier002.htm#GKBAA"><span class="secnum">48.2</span> Securing Web Applications</a><ul style="list-style-type:none">
<li><a href="security-webtier002.htm#BNCBK"><span class="secnum">48.2.1</span> Specifying Security Constraints</a>
<ul style="list-style-type:none">
<li><a href="security-webtier002.htm#GJJCD"><span class="secnum">48.2.1.1</span> Specifying a Web Resource Collection</a></li>
<li><a href="security-webtier002.htm#GJJCG"><span class="secnum">48.2.1.2</span> Specifying an Authorization Constraint</a></li>
<li><a href="security-webtier002.htm#BNCBM"><span class="secnum">48.2.1.3</span> Specifying a Secure Connection</a></li>
<li><a href="security-webtier002.htm#BNCBL"><span class="secnum">48.2.1.4</span> Specifying Security Constraints for Resources</a></li>
</ul>
</li>
<li><a href="security-webtier002.htm#GKBSA"><span class="secnum">48.2.2</span> Specifying Authentication Mechanisms</a>
<ul style="list-style-type:none">
<li><a href="security-webtier002.htm#BNCBO"><span class="secnum">48.2.2.1</span> HTTP Basic Authentication</a></li>
<li><a href="security-webtier002.htm#BNCBQ"><span class="secnum">48.2.2.2</span> Form-Based Authentication</a></li>
<li><a href="security-webtier002.htm#BNCBW"><span class="secnum">48.2.2.3</span> Digest Authentication</a></li>
</ul>
</li>
<li><a href="security-webtier002.htm#BNCBN"><span class="secnum">48.2.3</span> Specifying an Authentication Mechanism in the Deployment Descriptor</a></li>
<li><a href="security-webtier002.htm#BNCAV"><span class="secnum">48.2.4</span> Declaring Security Roles</a></li>
</ul>
</div></li>
<li><a href="security-webtier003.htm#GJIIE"><span class="secnum">48.3</span> Using Programmatic Security with Web Applications</a>
<ul style="list-style-type:none">
<li><a href="security-webtier003.htm#GIRCJ"><span class="secnum">48.3.1</span> Authenticating Users Programmatically</a></li>
<li><a href="security-webtier003.htm#BNCBA"><span class="secnum">48.3.2</span> Checking Caller Identity Programmatically</a></li>
<li><a href="security-webtier003.htm#GJJLQ"><span class="secnum">48.3.3</span> Example Code for Programmatic Security</a></li>
<li><a href="security-webtier003.htm#BNCBB"><span class="secnum">48.3.4</span> Declaring and Linking Role References</a></li>
</ul>
</li>
<li><a href="security-webtier004.htm#BNCBX"><span class="secnum">48.4</span> Examples: Securing Web Applications</a>
<ul style="list-style-type:none">
<li><a href="security-webtier004.htm#GJJLK"><span class="secnum">48.4.1</span> To Set Up Your System for Running the Security Examples</a></li>
<li><a href="security-webtier004.htm#BNCCK"><span class="secnum">48.4.2</span> The hello2-basicauth Example: Basic Authentication with a Servlet</a>
<ul style="list-style-type:none">
<li><a href="security-webtier004.htm#GJRMH"><span class="secnum">48.4.2.1</span> Specifying Security for Basic Authentication Using Annotations</a></li>
<li><a href="security-webtier004.htm#GJQYS"><span class="secnum">48.4.2.2</span> To Build, Package, and Deploy the hello2-basicauth Example Using NetBeans IDE</a></li>
<li><a href="security-webtier004.htm#GJQZH"><span class="secnum">48.4.2.3</span> To Build, Package, and Deploy the hello2-basicauth Example Using Maven</a></li>
<li><a href="security-webtier004.htm#GJQZF"><span class="secnum">48.4.2.4</span> To Run the hello2-basicauth Example</a></li>
</ul>
</li>
<li><a href="security-webtier004.htm#BNCBY"><span class="secnum">48.4.3</span> The hello1-formauth Example: Form-Based Authentication with a JavaServer Faces Application</a>
<ul style="list-style-type:none">
<li><a href="security-webtier004.htm#BNCCA"><span class="secnum">48.4.3.1</span> Creating the Login Form and the Error Page</a></li>
<li><a href="security-webtier004.htm#BNCCB"><span class="secnum">48.4.3.2</span> Specifying Security for the Form-Based Authentication Example</a></li>
<li><a href="security-webtier004.htm#GJRBA"><span class="secnum">48.4.3.3</span> To Build, Package, and Deploy the hello1-formauth Example Using NetBeans IDE</a></li>
<li><a href="security-webtier004.htm#GJRAZ"><span class="secnum">48.4.3.4</span> To Build, Package, and Deploy the hello1-formauth Example Using Maven and the asadmin Command</a></li>
<li><a href="security-webtier004.htm#GJRAL"><span class="secnum">48.4.3.5</span> To Run the hello1-formauth Example</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="security-webtier001.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="security-webtier003.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="GKBAA" name="GKBAA"></a><a id="JEETT00517" name="JEETT00517"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">48.2</span> Securing Web Applications</h1>
<p>Web applications are created by application developers who give, sell, or otherwise transfer the application to an application deployer for installation into a runtime environment. Application developers communicate how to set up security for the deployed application by using annotations or deployment descriptors. This information is passed on to the deployer, who uses it to define method permissions for security roles, set up user authentication, and set up the appropriate transport mechanism. If the application developer doesn't define security requirements, the deployer will have to determine the security requirements independently.</p>
<p>Some elements necessary for security in a web application cannot be specified as annotations for all types of web applications. This chapter explains how to secure web applications using annotations wherever possible. It explains how to use deployment descriptors where annotations cannot be used.</p>
<a id="BNCBK" name="BNCBK"></a><a id="JEETT01225" name="JEETT01225"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">48.2.1</span> <a id="sthref2613" name="sthref2613"></a><a id="sthref2614" name="sthref2614"></a>Specifying Security Constraints</h2>
<p>A <span class="glossaryterm">security constraint</span> is used to define the access privileges to a collection of resources using their URL mapping.</p>
<p><a id="sthref2615" name="sthref2615"></a><a id="sthref2616" name="sthref2616"></a><a id="sthref2617" name="sthref2617"></a>If your web application uses a servlet, you can express the security constraint information by using annotations. Specifically, you use the <code>@HttpConstraint</code> and, optionally, the <code>@HttpMethodConstraint</code> annotations within the <code>@ServletSecurity</code> annotation to specify a security constraint.</p>
<p>If your web application does not use a servlet, however, you must specify a <code>security-constraint</code> element in the deployment descriptor file. The authentication mechanism cannot be expressed using annotations, so if you use any authentication method other than <code>BASIC</code> (the default), a deployment descriptor is required.</p>
<p>The following subelements can be part of a <code>security-constraint</code>.</p>
<ul>
<li>
<p><a id="sthref2618" name="sthref2618"></a><span class="bold">Web resource collection</span> (<code>web-resource-collection</code>): A list of URL patterns (the part of a URL <span class="italic">after</span> the host name and port you want to constrain) and HTTP operations (the methods within the files that match the URL pattern you want to constrain) that describe a set of resources to be protected. Web resource collections are discussed in <a href="#GJJCD">Specifying a Web Resource Collection</a>.</p>
</li>
<li>
<p><a id="sthref2619" name="sthref2619"></a><span class="bold">Authorization constraint</span> (<code>auth-constraint</code>): Specifies whether authentication is to be used and names the roles authorized to perform the constrained requests. For more information about authorization constraints, see <a href="#GJJCG">Specifying an Authorization Constraint</a>.</p>
</li>
<li>
<p><a id="sthref2620" name="sthref2620"></a><span class="bold">User data constraint</span> (<code>user-data-constraint</code>): Specifies how data is protected when transported between a client and a server. User data constraints are discussed in <a href="#BNCBM">Specifying a Secure Connection</a>.</p>
</li>
</ul>
<a id="GJJCD" name="GJJCD"></a><a id="JEETT00773" name="JEETT00773"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">48.2.1.1</span> <a id="sthref2621" name="sthref2621"></a><a id="sthref2622" name="sthref2622"></a>Specifying a Web Resource Collection</h3>
<p>A web resource collection consists of the following subelements.</p>
<ul>
<li>
<p><code>web-resource-name</code> is the name you use for this resource. Its use is optional.</p>
</li>
<li>
<p><a id="sthref2623" name="sthref2623"></a><code>url-pattern</code> is used to list the request URI to be protected. Many applications have both unprotected and protected resources. To provide unrestricted access to a resource, do not configure a security constraint for that particular request URI.</p>
<p>The request URI is the part of a URL <span class="italic">after</span> the host name and port. For example, let's say that you have an e-commerce site with a catalog that you would want anyone to be able to access and browse, and a shopping cart area for customers only. You could set up the paths for your web application so that the pattern <code>/cart/*</code> is protected but nothing else is protected. Assuming that the application is installed at context path <code>/myapp</code>, the following are true.</p>
<ul>
<li>
<p><code>http://localhost:8080/myapp/index.xhtml</code> is <span class="italic">not</span> protected.</p>
</li>
<li>
<p><code>http://localhost:8080/myapp/cart/index.xhtml</code> <span class="italic">is</span> protected.</p>
</li>
</ul>
<p>A user will be prompted to log in the first time he or she accesses a resource in the <code>cart/</code> subdirectory.</p>
</li>
<li>
<p><code>http-method</code> or <code>http-method-omission</code> is used to specify which methods should be protected or which methods should be omitted from protection. An HTTP method is protected by a <code>web-resource-collection</code> under any of the following circumstances:</p>
<ul>
<li>
<p>If no HTTP methods are named in the collection (which means that all are protected)</p>
</li>
<li>
<p>If the collection specifically names the HTTP method in an <code>http-method</code> subelement</p>
</li>
<li>
<p>If the collection contains one or more <code>http-method-omission</code> elements, none of which names the HTTP method</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="GJJCG" name="GJJCG"></a><a id="JEETT00774" name="JEETT00774"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">48.2.1.2</span> <a id="sthref2624" name="sthref2624"></a><a id="sthref2625" name="sthref2625"></a>Specifying an Authorization Constraint</h3>
<p>An authorization constraint (<code>auth-constraint</code>) contains the <code>role-name</code> element. You can use as many <code>role-name</code> elements as needed here.</p>
<p>An authorization constraint establishes a requirement for authentication and names the roles authorized to access the URL patterns and HTTP methods declared by this security constraint. If there is no authorization constraint, the container must accept the request without requiring user authentication. If there is an authorization constraint but no roles are specified within it, the container will not allow access to constrained requests under any circumstances. Each role name specified here must either correspond to the role name of one of the <code>security-role</code> elements defined for this web application or be the specially reserved role name <code>*</code>, which indicates all roles in the web application. Role names are case sensitive. The roles defined for the application must be mapped to users and groups defined on the server, except when default principal-to-role mapping is used.</p>
<p>For more information about security roles, see <a href="#BNCAV">Declaring Security Roles</a>. For information on mapping security roles, see <a href="security-intro005.htm#BNBXV">Mapping Roles to Users and Groups</a>.</p>
<p>For a servlet, the <code>@HttpConstraint</code> and <code>@HttpMethodConstraint</code> annotations accept a <code>rolesAllowed</code> element that specifies the authorized roles.</p>
</div>
<!-- class="sect3" -->
<a id="BNCBM" name="BNCBM"></a><a id="JEETT00775" name="JEETT00775"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">48.2.1.3</span> <a id="sthref2626" name="sthref2626"></a><a id="sthref2627" name="sthref2627"></a><a id="sthref2628" name="sthref2628"></a><a id="sthref2629" name="sthref2629"></a><a id="sthref2630" name="sthref2630"></a><a id="sthref2631" name="sthref2631"></a>Specifying a Secure Connection</h3>
<p>A user data constraint (<code>user-data-constraint</code> in the deployment descriptor) contains the <code>transport-guarantee</code> subelement. A user data constraint can be used to require that a protected transport-layer connection, such as HTTPS, be used for all constrained URL patterns and HTTP methods specified in the security constraint. The choices for transport guarantee are <code>CONFIDENTIAL</code>, <code>INTEGRAL</code>, or <code>NONE</code>. If you specify <code>CONFIDENTIAL</code> or <code>INTEGRAL</code> as a security constraint, it generally means that the use of SSL is required and applies to all requests that match the URL patterns in the web resource collection, not just to the login dialog box.</p>
<p>The strength of the required protection is defined by the value of the transport guarantee, as follows.</p>
<ul>
<li>
<p>Specify <code>CONFIDENTIAL</code> when the application requires that data be transmitted so as to prevent other entities from observing the contents of the transmission.</p>
</li>
<li>
<p>Specify <code>INTEGRAL</code> when the application requires that the data be sent between client and server in such a way that it cannot be changed in transit.</p>
</li>
<li>
<p>Specify <code>NONE</code> to indicate that the container must accept the constrained requests on any connection, including an unprotected one.</p>
</li>
</ul>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>In practice, Java EE servers treat the <code>CONFIDENTIAL</code> and <code>INTEGRAL</code> transport guarantee values identically.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
<p>The user data constraint is handy to use in conjunction with basic and form-based user authentication. When the login authentication method is set to <code>BASIC</code> or <code>FORM</code>, passwords are not protected, meaning that passwords sent between a client and a server on an unprotected session can be viewed and intercepted by third parties. Using a user data constraint with the user authentication mechanism can alleviate this concern. Configuring a user authentication mechanism is described in <a href="#BNCBN">Specifying an Authentication Mechanism in the Deployment Descriptor</a>.</p>
<p>To guarantee that data is transported over a secure connection, ensure that SSL support is configured for your server. SSL support is already configured for GlassFish Server.</p>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>After you switch to SSL for a session, you should never accept any non-SSL requests for the rest of that session. For example, a shopping site might not use SSL until the checkout page, and then it might switch to using SSL to accept your card number. After switching to SSL, you should stop listening to non-SSL requests for this session. The reason for this practice is that the session ID itself was not encrypted on the earlier communications. This is not so bad when you're only doing your shopping, but after the credit card information is stored in the session, you don't want anyone to use that information to fake the purchase transaction against your credit card. This practice could be easily implemented by using a filter.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
</div>
<!-- class="sect3" -->
<a id="BNCBL" name="BNCBL"></a><a id="JEETT00776" name="JEETT00776"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">48.2.1.4</span> <a id="sthref2632" name="sthref2632"></a>Specifying Security Constraints for Resources</h3>
<p>You can create security constraints for resources within your application. For example, you could allow users with the role of <code>PARTNER</code> full access to all resources at the URL pattern <code>/acme/wholesale/*</code> and allow users with the role of <code>CLIENT</code> full access to all resources at the URL pattern <code>/acme/retail/*</code>. This is the recommended way to protect resources if you do not want to protect some HTTP methods while leaving other HTTP methods unprotected. An example of a deployment descriptor that would demonstrate this functionality is the following:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="bold">&lt;!-- SECURITY CONSTRAINT #1 --&gt;</span>
&lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
        &lt;web-resource-name&gt;wholesale&lt;/web-resource-name&gt;
        &lt;url-pattern&gt;/acme/wholesale/*&lt;/url-pattern&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
        &lt;role-name&gt;PARTNER&lt;/role-name&gt;
    &lt;/auth-constraint&gt;
    &lt;user-data-constraint&gt;
        &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;
    &lt;/user-data-constraint&gt;
&lt;/security-constraint&gt;

<span class="bold">&lt;!-- SECURITY CONSTRAINT #2 --&gt;</span>
&lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
        &lt;web-resource-name&gt;retail&lt;/web-resource-name&gt;
        &lt;url-pattern&gt;/acme/retail/*&lt;/url-pattern&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
        &lt;role-name&gt;CLIENT&lt;/role-name&gt;
    &lt;/auth-constraint&gt;
    &lt;user-data-constraint&gt;
        &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;
    &lt;/user-data-constraint&gt;
&lt;/security-constraint&gt;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="GKBSA" name="GKBSA"></a><a id="JEETT01226" name="JEETT01226"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">48.2.2</span> <a id="sthref2633" name="sthref2633"></a><a id="sthref2634" name="sthref2634"></a>Specifying Authentication Mechanisms</h2>
<p>A user authentication mechanism specifies</p>
<ul>
<li>
<p>The way a user gains access to web content</p>
</li>
<li>
<p>With basic authentication, the realm in which the user will be authenticated</p>
</li>
<li>
<p>With form-based authentication, additional attributes</p>
</li>
</ul>
<p>When an authentication mechanism is specified, the user must be authenticated before access is granted to any resource that is constrained by a security constraint. There can be multiple security constraints applying to multiple resources, but the same authentication method will apply to all constrained resources in an application.</p>
<p>Before you can authenticate a user, you must have a database of user names, passwords, and roles configured on your web or application server. For information on setting up the user database, see <a href="security-intro005.htm#BNBXR">Managing Users and Groups in GlassFish Server</a>.</p>
<p>The Java EE platform supports the following authentication mechanisms:</p>
<ul>
<li>
<p>Basic authentication</p>
</li>
<li>
<p>Form-based authentication</p>
</li>
<li>
<p>Digest authentication</p>
</li>
<li>
<p>Client authentication</p>
</li>
<li>
<p>Mutual authentication</p>
</li>
</ul>
<p>Basic, form-based, and digest authentication are discussed in this section. Client and mutual authentication are discussed in <a href="security-advanced.htm#GJJWX">Chapter 50, "Java EE Security: Advanced Topics"</a>.</p>
<p>HTTP basic authentication and form-based authentication are not very secure authentication mechanisms. Basic authentication sends user names and passwords over the Internet as Base64-encoded text. Form-based authentication sends this data as plain text. In both cases, the target server is not authenticated. Therefore, these forms of authentication leave user data exposed and vulnerable. If someone can intercept the transmission, the user name and password information can easily be decoded.</p>
<p>However, when a secure transport mechanism, such as SSL, or security at the network level, such as the Internet Protocol Security (IPsec) protocol or virtual private network (VPN) strategies, is used in conjunction with basic or form-based authentication, some of these concerns can be alleviated. To specify a secure transport mechanism, use the elements described in <a href="#BNCBM">Specifying a Secure Connection</a>.</p>
<a id="BNCBO" name="BNCBO"></a><a id="JEETT00777" name="JEETT00777"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">48.2.2.1</span> <a id="sthref2635" name="sthref2635"></a><a id="sthref2636" name="sthref2636"></a><a id="sthref2637" name="sthref2637"></a>HTTP Basic Authentication</h3>
<p>Specifying <span class="glossaryterm">HTTP basic authentication</span> requires that the server request a user name and password from the web client and verify that the user name and password are valid by comparing them against a database of authorized users in the specified or default realm.</p>
<p>Basic authentication is the default when you do not specify an authentication mechanism.</p>
<p>When basic authentication is used, the following actions occur.</p>
<ol>
<li>
<p>A client requests access to a protected resource.</p>
</li>
<li>
<p>The web server returns a dialog box that requests the user name and password.</p>
</li>
<li>
<p>The client submits the user name and password to the server.</p>
</li>
<li>
<p>The server authenticates the user in the specified realm and, if successful, returns the requested resource.</p>
</li>
</ol>
<p><a href="#BNCBP">Figure 48-1</a> shows what happens when you specify HTTP basic authentication.</p>
<div class="figure"><a id="BNCBP" name="BNCBP"></a><a id="JEETT00036" name="JEETT00036"></a>
<p class="titleinfigure">Figure 48-1 HTTP Basic Authentication</p>
<img src="img/jeett_dt_045.png" alt="Description of Figure 48-1 follows" title="Description of Figure 48-1 follows" longdesc="img_text/jeett_dt_045.htm" /><br />
<a id="sthref2638" name="sthref2638" href="img_text/jeett_dt_045.htm">Description of "Figure 48-1 HTTP Basic Authentication"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<a id="BNCBQ" name="BNCBQ"></a><a id="JEETT00778" name="JEETT00778"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">48.2.2.2</span> <a id="sthref2639" name="sthref2639"></a><a id="sthref2640" name="sthref2640"></a>Form-Based Authentication</h3>
<p><span class="glossaryterm">Form-based authentication</span> allows the developer to control the look and feel of the login authentication screens by customizing the login screen and error pages that an HTTP browser presents to the end user. When form-based authentication is declared, the following actions occur.</p>
<ol>
<li>
<p>A client requests access to a protected resource.</p>
</li>
<li>
<p>If the client is unauthenticated, the server redirects the client to a login page.</p>
</li>
<li>
<p>The client submits the login form to the server.</p>
</li>
<li>
<p>The server attempts to authenticate the user.</p>
<ul>
<li>
<p>If authentication succeeds, the authenticated user's principal is checked to ensure that it is in a role that is authorized to access the resource. If the user is authorized, the server redirects the client to the resource by using the stored URL path.</p>
</li>
<li>
<p>If authentication fails, the client is forwarded or redirected to an error page.</p>
</li>
</ul>
</li>
</ol>
<p><a href="#GEXFA">Figure 48-2</a> shows what happens when you specify form-based authentication.</p>
<div class="figure"><a id="GEXFA" name="GEXFA"></a><a id="JEETT00037" name="JEETT00037"></a>
<p class="titleinfigure">Figure 48-2 Form-Based Authentication</p>
<img src="img/jeett_dt_046.png" alt="Description of Figure 48-2 follows" title="Description of Figure 48-2 follows" longdesc="img_text/jeett_dt_046.htm" /><br />
<a id="sthref2641" name="sthref2641" href="img_text/jeett_dt_046.htm">Description of "Figure 48-2 Form-Based Authentication"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The section <a href="security-webtier004.htm#BNCBY">The hello1-formauth Example: Form-Based Authentication with a JavaServer Faces Application</a> is an example application that uses form-based authentication.</p>
<p>When you create a form-based login, be sure to maintain sessions using cookies or SSL session information.</p>
<p>For authentication to proceed appropriately, the action of the login form must always be <code>j_security_check</code>. This restriction is made so that the login form will work no matter which resource it is for and to avoid requiring the server to specify the action field of the outbound form. The following code snippet shows how the form should be coded into the HTML page:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;form method="POST" action="j_security_check"&gt;
&lt;input type="text" name="j_username"&gt;
&lt;input type="password" name="j_password"&gt;
&lt;/form&gt;
</pre></div>
<!-- class="sect3" -->
<a id="BNCBW" name="BNCBW"></a><a id="JEETT00779" name="JEETT00779"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">48.2.2.3</span> <a id="sthref2642" name="sthref2642"></a><a id="sthref2643" name="sthref2643"></a>Digest Authentication</h3>
<p>Like basic authentication, <span class="glossaryterm">digest authentication</span> authenticates a user based on a user name and a password. However, unlike basic authentication, digest authentication does not send user passwords over the network. Instead, the client sends a one-way cryptographic hash of the password and additional data. Although passwords are not sent on the wire, digest authentication requires that clear-text password equivalents be available to the authenticating container so that it can validate received authenticators by calculating the expected digest.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BNCBN" name="BNCBN"></a><a id="JEETT01227" name="JEETT01227"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">48.2.3</span> <a id="sthref2644" name="sthref2644"></a><a id="sthref2645" name="sthref2645"></a>Specifying an Authentication Mechanism in the Deployment Descriptor</h2>
<p>To specify an authentication mechanism, use the <code>login-config</code> element. It can contain the following subelements.</p>
<ul>
<li>
<p>The <code>auth-method</code> subelement configures the authentication mechanism for the web application. The element content must be either <code>NONE</code>, <code>BASIC</code>, <code>DIGEST</code>, <code>FORM</code>, or <code>CLIENT-CERT</code>.</p>
</li>
<li>
<p>The <code>realm-name</code> subelement indicates the realm name to use when the basic authentication scheme is chosen for the web application.</p>
</li>
<li>
<p>The <code>form-login-config</code> subelement specifies the login and error pages that should be used when form-based login is specified.</p>
</li>
</ul>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>Another way to specify form-based authentication is to use the <code>authenticate</code>, <code>login</code>, and <code>logout</code> methods of <code>HttpServletRequest</code>, as discussed in <a href="security-webtier003.htm#GIRCJ">Authenticating Users Programmatically</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
<p>When you try to access a web resource that is constrained by a <code>security-constraint</code> element, the web container activates the authentication mechanism that has been configured for that resource. The authentication mechanism specifies how the user will be prompted to log in. If the <code>login-config</code> element is present and the <code>auth-method</code> element contains a value other than <code>NONE</code>, the user must be authenticated to access the resource. If you do not specify an authentication mechanism, authentication of the user is not required.</p>
<p>The following example shows how to declare form-based authentication in your deployment descriptor:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;login-config&gt;
    &lt;auth-method&gt;FORM&lt;/auth-method&gt;
    &lt;realm-name&gt;file&lt;/realm-name&gt;
    &lt;form-login-config&gt;
        &lt;form-login-page&gt;/login.xhtml&lt;/form-login-page&gt;
        &lt;form-error-page&gt;/error.xhtml&lt;/form-error-page&gt;
    &lt;/form-login-config&gt;
&lt;/login-config&gt;
</pre>
<p>The login and error page locations are specified relative to the location of the deployment descriptor. Examples of login and error pages are shown in <a href="security-webtier004.htm#BNCCA">Creating the Login Form and the Error Page</a>.</p>
<p>The following example shows how to declare digest authentication in your deployment descriptor:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;login-config&gt;
    &lt;auth-method&gt;DIGEST&lt;/auth-method&gt;
&lt;/login-config&gt;
</pre></div>
<!-- class="sect2" -->
<a id="BNCAV" name="BNCAV"></a><a id="JEETT01228" name="JEETT01228"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">48.2.4</span> <a id="sthref2646" name="sthref2646"></a><a id="sthref2647" name="sthref2647"></a><a id="sthref2648" name="sthref2648"></a><a id="sthref2649" name="sthref2649"></a>Declaring Security Roles</h2>
<p>You can declare security role names used in web applications by using the <code>security-role</code> element of the deployment descriptor. Use this element to list all the security roles that you have referenced in your application.</p>
<p>The following snippet of a deployment descriptor declares the roles that will be used in an application using the <code>security-role</code> element and specifies which of these roles is authorized to access protected resources using the <code>auth-constraint</code> element:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
        &lt;web-resource-name&gt;Protected Area&lt;/web-resource-name&gt;
        &lt;url-pattern&gt;/security/protected/*&lt;/url-pattern&gt;
        &lt;http-method&gt;PUT&lt;/http-method&gt;
        &lt;http-method&gt;DELETE&lt;/http-method&gt;
        &lt;http-method&gt;GET&lt;/http-method&gt;
        &lt;http-method&gt;POST&lt;/http-method&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
        &lt;role-name&gt;manager&lt;/role-name&gt;
    &lt;/auth-constraint&gt;
&lt;/security-constraint&gt;

 &lt;!-- Security roles used by this web application --&gt;
&lt;security-role&gt;
    &lt;role-name&gt;manager&lt;/role-name&gt;
&lt;/security-role&gt;
&lt;security-role&gt;
    &lt;role-name&gt;employee&lt;/role-name&gt;
&lt;/security-role&gt;
</pre>
<p>In this example, the <code>security-role</code> element lists all the security roles used in the application: <code>manager</code> and <code>employee</code>. This enables the deployer to map all the roles defined in the application to users and groups defined in GlassFish Server.</p>
<p>The <code>auth-constraint</code> element specifies the role, <code>manager</code>, that can access the HTTP methods PUT, DELETE, GET, and POST located in the directory specified by the <code>url-pattern</code> element (<code>/security/protected/*</code>).</p>
<p>The <code>@ServletSecurity</code> annotation cannot be used in this situation because its constraints apply to all URL patterns specified by the <code>@WebServlet</code> annotation.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="security-webtier001.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="security-webtier003.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

