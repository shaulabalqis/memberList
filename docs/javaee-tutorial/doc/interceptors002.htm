<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:4Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Using Interceptors" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Using Interceptors | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<ul style="list-style-type:none">
<li><a href="interceptors001.htm#GKIGQ"><span class="secnum">54.1</span> Overview of Interceptors</a>
<ul style="list-style-type:none">
<li><a href="interceptors001.htm#GKECK"><span class="secnum">54.1.1</span> Interceptor Classes</a></li>
<li><a href="interceptors001.htm#GKEDY"><span class="secnum">54.1.2</span> Interceptor Lifecycle</a></li>
<li><a href="interceptors001.htm#GKHSN"><span class="secnum">54.1.3</span> Interceptors and CDI</a></li>
</ul>
</li>
<li><div id="backgroundColor"><a href="interceptors002.htm#GKEDM"><span class="secnum">54.2</span> Using Interceptors</a><ul style="list-style-type:none">
<li><a href="interceptors002.htm#GKECY"><span class="secnum">54.2.1</span> Intercepting Method Invocations</a>
<ul style="list-style-type:none">
<li><a href="interceptors002.htm#GKHMH"><span class="secnum">54.2.1.1</span> Using Multiple Method Interceptors</a></li>
<li><a href="interceptors002.htm#GKHOV"><span class="secnum">54.2.1.2</span> Accessing Target Method Parameters from an Interceptor Class</a></li>
</ul>
</li>
<li><a href="interceptors002.htm#GKECR"><span class="secnum">54.2.2</span> Intercepting Lifecycle Callback Events</a>
<ul style="list-style-type:none">
<li><a href="interceptors002.htm#sthref2926"><span class="secnum">54.2.2.1</span> Using AroundConstruct Interceptor Methods</a></li>
<li><a href="interceptors002.htm#GKHNI"><span class="secnum">54.2.2.2</span> Using Multiple Lifecycle Callback Interceptors</a></li>
</ul>
</li>
<li><a href="interceptors002.htm#GKEDU"><span class="secnum">54.2.3</span> Intercepting Timeout Events</a>
<ul style="list-style-type:none">
<li><a href="interceptors002.htm#GKHLA"><span class="secnum">54.2.3.1</span> Using Multiple Timeout Interceptors</a></li>
</ul>
</li>
<li><a href="interceptors002.htm#sthref2927"><span class="secnum">54.2.4</span> Binding Interceptors to Components</a>
<ul style="list-style-type:none">
<li><a href="interceptors002.htm#sthref2928"><span class="secnum">54.2.4.1</span> Declaring the Interceptor Bindings on an Interceptor Class</a></li>
<li><a href="interceptors002.htm#sthref2929"><span class="secnum">54.2.4.2</span> Binding a Component to an Interceptor</a></li>
</ul>
</li>
<li><a href="interceptors002.htm#sthref2930"><span class="secnum">54.2.5</span> Ordering Interceptors</a></li>
</ul>
</div></li>
<li><a href="interceptors003.htm#GKECI"><span class="secnum">54.3</span> The interceptor Example Application</a>
<ul style="list-style-type:none">
<li><a href="interceptors003.htm#sthref2937"><span class="secnum">54.3.1</span> Running the interceptor Example</a>
<ul style="list-style-type:none">
<li><a href="interceptors003.htm#GKEDF"><span class="secnum">54.3.1.1</span> To Run the interceptor Example Using NetBeans IDE</a></li>
<li><a href="interceptors003.htm#GKECT"><span class="secnum">54.3.1.2</span> To Run the interceptor Example Using Maven</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="interceptors001.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="interceptors003.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="GKEDM" name="GKEDM"></a><a id="JEETT00564" name="JEETT00564"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">54.2</span> Using Interceptors</h1>
<p>To define an interceptor, use one of the interceptor metadata annotations listed in <a href="interceptors001.htm#GKECC">Table 54-1</a> within the target class, or in a separate interceptor class. The following code declares an <code>@AroundTimeout</code> interceptor method within a target class:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Stateless
public class TimerBean {
    ...
    @Schedule(minute="*/1", hour="*")
    public void automaticTimerMethod() { ... }

    @AroundTimeout
    public void timeoutInterceptorMethod(InvocationContext ctx) { ... }
    ...
}
</pre>
<p>If you are using interceptor classes, use the <code>javax.interceptor.Interceptors</code> annotation to declare one or more interceptors at the class or method level of the target class. The following code declares interceptors at the class level:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Stateless
@Interceptors({PrimaryInterceptor.class, SecondaryInterceptor.class})
public class OrderBean { ... }
</pre>
<p>The following code declares a method-level interceptor class:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Stateless
public class OrderBean {
    ...
    @Interceptors(OrderInterceptor.class)
    public void placeOrder(Order order) { ... }
    ...
}
</pre>
<a id="GKECY" name="GKECY"></a><a id="JEETT01317" name="JEETT01317"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">54.2.1</span> <a id="sthref2922" name="sthref2922"></a>Intercepting Method Invocations</h2>
<p>Use the <code>@AroundInvoke</code> annotation to designate interceptor methods for managed object methods. Only one around-invoke interceptor method per class is allowed. Around-invoke interceptor methods have the following form:</p>
<pre xml:space="preserve" class="oac_no_warn">
@AroundInvoke
<span class="variable">visibility</span> Object <span class="variable">method-name</span>(InvocationContext) throws Exception { ... }
</pre>
<p>For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
@AroundInvoke
public void interceptOrder(InvocationContext ctx) { ... }
</pre>
<p>Around-invoke interceptor methods can have public, private, protected, or package-level access, and must not be declared static or final.</p>
<p>An around-invoke interceptor can call any component or resource that is callable by the target method on which it interposes, can have the same security and transaction context as the target method, and can run in the same Java virtual machine call stack as the target method.</p>
<p>Around-invoke interceptors can throw runtime exceptions and any exception allowed by the <code>throws</code> clause of the target method. They may catch and suppress exceptions, and then recover by calling the <code>InvocationContext.proceed</code> method.</p>
<a id="GKHMH" name="GKHMH"></a><a id="JEETT00838" name="JEETT00838"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">54.2.1.1</span> Using Multiple Method Interceptors</h3>
<p>Use the <code>@Interceptors</code> annotation to declare multiple interceptors for a target method or class:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Interceptors({PrimaryInterceptor.class, SecondaryInterceptor.class, 
        LastInterceptor.class})
public void updateInfo(String info) { ... }
</pre>
<p>The order of the interceptors in the <code>@Interceptors</code> annotation is the order in which the interceptors are invoked.</p>
<p>You can also define multiple interceptors in the deployment descriptor. The order of the interceptors in the deployment descriptor is the order in which the interceptors will be invoked:</p>
<pre xml:space="preserve" class="oac_no_warn">
...
&lt;interceptor-binding&gt;
    &lt;target-name&gt;myapp.OrderBean&lt;/target-name&gt;
    &lt;interceptor-class&gt;myapp.PrimaryInterceptor.class&lt;/interceptor-class&gt;
    &lt;interceptor-class&gt;myapp.SecondaryInterceptor.class&lt;/interceptor-class&gt;
    &lt;interceptor-class&gt;myapp.LastInterceptor.class&lt;/interceptor-class&gt;
    &lt;method-name&gt;updateInfo&lt;/method-name&gt;
&lt;/interceptor-binding&gt;
...
</pre>
<p>To explicitly pass control to the next interceptor in the chain, call the <code>InvocationContext.proceed</code> method.</p>
<p>Data can be shared across interceptors.</p>
<ul>
<li>
<p>The same <code>InvocationContext</code> instance is passed as an input parameter to each interceptor method in the interceptor chain for a particular target method. The <code>InvocationContext</code> instance's <code>contextData</code> property is used to pass data across interceptor methods. The <code>contextData</code> property is a <code>java.util.Map&lt;String, Object&gt;</code> object. Data stored in <code>contextData</code> is accessible to interceptor methods further down the interceptor chain.</p>
</li>
<li>
<p>The data stored in <code>contextData</code> is not sharable across separate target class method invocations. That is, a different <code>InvocationContext</code> object is created for each invocation of the method in the target class.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="GKHOV" name="GKHOV"></a><a id="JEETT00839" name="JEETT00839"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">54.2.1.2</span> Accessing Target Method Parameters from an Interceptor Class</h3>
<p>You can use the <code>InvocationContext</code> instance passed to each around-invoke method to access and modify the parameters of the target method. The <code>parameters</code> property of <code>InvocationContext</code> is an array of <code>Object</code> instances that corresponds to the parameter order of the target method. For example, for the following target method, the <code>parameters</code> property, in the <code>InvocationContext</code> instance passed to the around-invoke interceptor method in <code>PrimaryInterceptor</code>, is an <code>Object</code> array containing two <code>String</code> objects (<code>firstName</code> and <code>lastName</code>) and a <code>Date</code> object (<code>date</code>):</p>
<pre xml:space="preserve" class="oac_no_warn">
@Interceptors(PrimaryInterceptor.class)
public void updateInfo(String firstName, String lastName, Date date) { ... }
</pre>
<p>You can access and modify the parameters by using the <code>InvocationContext.getParameters</code> and <code>InvocationContext.setParameters</code> methods, respectively.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="GKECR" name="GKECR"></a><a id="JEETT01318" name="JEETT01318"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">54.2.2</span> <a id="sthref2923" name="sthref2923"></a><a id="sthref2924" name="sthref2924"></a><a id="sthref2925" name="sthref2925"></a>Intercepting Lifecycle Callback Events</h2>
<p>Interceptors for lifecycle callback events (around-construct, post-construct, and pre-destroy) may be defined in the target class or in interceptor classes. The <code>javax.interceptor.AroundConstruct</code> annotation designates the method as an interceptor method that interposes on the invocation of the target class's constructor. The <code>javax.annotation.PostConstruct</code> annotation is used to designate a method as a post-construct lifecycle event interceptor. The <code>javax.annotation.PreDestroy</code> annotation is used to designate a method as a pre-destroy lifecycle event interceptor.</p>
<p>Lifecycle event interceptors defined within the target class have the following form:</p>
<pre xml:space="preserve" class="oac_no_warn">
void <span class="variable">method-name</span>() { ... }
</pre>
<p>For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
@PostConstruct
void initialize() { ... }
</pre>
<p>Lifecycle event interceptors defined in an interceptor class have the following form:</p>
<pre xml:space="preserve" class="oac_no_warn">
void <span class="variable">method-name</span>(InvocationContext) { ... }
</pre>
<p>For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
@PreDestroy
void cleanup(InvocationContext ctx) { ... }
</pre>
<p>Lifecycle interceptor methods can have public, private, protected, or package-level access, and must not be declared static or final. Lifecycle interceptors may throw runtime exceptions but cannot throw checked exceptions.</p>
<p>Lifecycle interceptor methods are called in an unspecified security and transaction context. That is, portable Java EE applications should not assume the lifecycle event interceptor method has access to a security or transaction context. Only one interceptor method for each lifecycle event (post-create and pre-destroy) is allowed per class.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2926" name="sthref2926"></a>
<h3 class="sect3"><span class="secnum">54.2.2.1</span> Using AroundConstruct Interceptor Methods</h3>
<p><code>@AroundConstruct</code> methods are interposed on the invocation of the target class's constructor. Methods decorated with <code>@AroundConstruct</code> may only be defined within interceptor classes or superclasses of interceptor classes. You may not use <code>@AroundConstruct</code> methods within the target class.</p>
<p>The <code>@AroundConstruct</code> method is called after dependency injection has been completed for all interceptors associated with the target class. The target class is created and the target class's constructor injection is performed after all associated <code>@AroundConstruct</code> methods have called the <code>Invocation.proceed</code> method. At that point, dependency injection for the target class is completed, and then any <code>@PostConstruct</code> callback methods are invoked.</p>
<p><code>@AroundConstruct</code> methods can access the constructed target instance after calling <code>Invocation.proceed</code> by calling the <code>InvocationContext.getTarget</code> method.</p>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Caution:</p>
<p>Calling methods on the target instance from an <code>@AroundConstruct</code> method is dangerous because dependency injection may not have completed on the target instance.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
<p><code>@AroundConstruct</code> methods must call <code>Invocation.proceed</code> in order to create the target instance. If an <code>@AroundConstruct</code> method does not call <code>Invocation.proceed</code>, the target instance will not be created.</p>
</div>
<!-- class="sect3" -->
<a id="GKHNI" name="GKHNI"></a><a id="JEETT00840" name="JEETT00840"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">54.2.2.2</span> Using Multiple Lifecycle Callback Interceptors</h3>
<p>You can define multiple lifecycle interceptors for a target class by specifying the interceptor classes in the <code>@Interceptors</code> annotation:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Interceptors({PrimaryInterceptor.class, SecondaryInterceptor.class, 
        LastInterceptor.class})
@Stateless
public class OrderBean { ... }
</pre>
<p>Data stored in the <code>contextData</code> property of <code>InvocationContext</code> is not sharable across different lifecycle events.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="GKEDU" name="GKEDU"></a><a id="JEETT01319" name="JEETT01319"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">54.2.3</span> Intercepting Timeout Events</h2>
<p>You can define interceptors for EJB timer service timeout methods by using the <code>@AroundTimeout</code> annotation on methods in the target class or in an interceptor class. Only one <code>@AroundTimeout</code> method per class is allowed.</p>
<p>Timeout interceptors have the following form:</p>
<pre xml:space="preserve" class="oac_no_warn">
Object <span class="variable">method-name</span>(InvocationContext) throws Exception { ... }
</pre>
<p>For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
@AroundTimeout
protected void timeoutInterceptorMethod(InvocationContext ctx) { ... }
</pre>
<p>Timeout interceptor methods can have public, private, protected, or package-level access, and must not be declared static or final.</p>
<p>Timeout interceptors can call any component or resource callable by the target timeout method, and are invoked in the same transaction and security context as the target method.</p>
<p>Timeout interceptors may access the timer object associated with the target timeout method through the <code>InvocationContext</code> instance's <code>getTimer</code> method.</p>
<a id="GKHLA" name="GKHLA"></a><a id="JEETT00841" name="JEETT00841"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">54.2.3.1</span> Using Multiple Timeout Interceptors</h3>
<p>You can define multiple timeout interceptors for a given target class by specifying the interceptor classes containing <code>@AroundTimeout</code> interceptor methods in an <code>@Interceptors</code> annotation at the class level.</p>
<p>If a target class specifies timeout interceptors in an interceptor class, and also has an <code>@AroundTimeout</code> interceptor method within the target class itself, the timeout interceptors in the interceptor classes are called first, followed by the timeout interceptors defined in the target class. For example, in the following example, assume that both the <code>PrimaryInterceptor</code> and <code>SecondaryInterceptor</code> classes have timeout interceptor methods:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Interceptors({PrimaryInterceptor.class, SecondaryInterceptor.class})
@Stateful
public class OrderBean {
    ...
    @AroundTimeout
    private void last(InvocationContext ctx) { ... }
    ...
}
</pre>
<p>The timeout interceptor in <code>PrimaryInterceptor</code> will be called first, followed by the timeout interceptor in <code>SecondaryInterceptor</code>, and finally the <code>last</code> method defined in the target class.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2927" name="sthref2927"></a>
<h2 class="sect2"><span class="secnum">54.2.4</span> Binding Interceptors to Components</h2>
<p>Interceptor binding types are annotations that may be applied to components to associate them with a particular interceptor. Interceptor binding types are typically custom runtime annotation types that specify the interceptor target. Use the <code>javax.interceptor.InterceptorBinding</code> annotation on the custom annotation definition and specify the target by using <code>@Target</code>, setting one or more of <code>TYPE</code> (class-level interceptors), <code>METHOD</code> (method-level interceptors), <code>CONSTRUCTOR</code> (around-construct interceptors), or any other valid target:</p>
<pre xml:space="preserve" class="oac_no_warn">
@InterceptorBinding
@Target({TYPE, METHOD})
@Retention(RUNTIME)
@Inherited
pubic @interface Logged { ... }
</pre>
<p>Interceptor binding types may also be applied to other interceptor binding types:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Logged
@InterceptorBinding
@Target({TYPE, METHOD})
@Retention(RUNTIME)
@Inherited
public @interface Secured { ... }
</pre>
<div class="sect3"><a id="sthref2928" name="sthref2928"></a>
<h3 class="sect3"><span class="secnum">54.2.4.1</span> Declaring the Interceptor Bindings on an Interceptor Class</h3>
<p>Annotate the interceptor class with the interceptor binding type and <code>@Interceptor</code> to associate the interceptor binding with the interceptor class:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Logged
@Interceptor
public class LoggingInterceptor {
    @AroundInvoke
    public Object logInvocation(InvocationContext ctx) throws Exception { ... }
    ...
}
</pre>
<p>An interceptor class may declare multiple interceptor binding types, and more than one interceptor class may declare an interceptor binding type.</p>
<p>If the interceptor class intercepts lifecycle callbacks, it can only declare interceptor binding types with <code>Target(TYPE)</code>, or in the case of <code>@AroundConstruct</code> lifecycle callbacks, <code>Target(CONSTRUCTOR)</code>.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2929" name="sthref2929"></a>
<h3 class="sect3"><span class="secnum">54.2.4.2</span> Binding a Component to an Interceptor</h3>
<p>Add the interceptor binding type annotation to the target component's class, method, or constructor. Interceptor binding types are applied using the same rules as <code>@Interceptor</code> annotations:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Logged
public class Message {
    ...
    @Secured
    public void getConfidentialMessage() { ... }
    ...
}
</pre>
<p>If the component has a class-level interceptor binding, it must not be <code>final</code> or have any non-<code>static</code>, non-<code>private</code> <code>final</code> methods. If a non-<code>static</code>, non-<code>private</code> method has an interceptor binding applied to it, it must not be <code>final</code>, and the component class cannot be <code>final</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2930" name="sthref2930"></a>
<h2 class="sect2"><span class="secnum">54.2.5</span> <a id="sthref2931" name="sthref2931"></a><a id="sthref2932" name="sthref2932"></a>Ordering Interceptors</h2>
<p>The order in which multiple interceptors are invoked is determined by the following rules.</p>
<ul>
<li>
<p>Default interceptors are defined in a deployment descriptor, and are invoked first. They may specify the invocation order or override the order specified using annotations. Default interceptors are invoked in the order in which they are defined in the deployment descriptor.</p>
</li>
<li>
<p>The order in which the interceptor classes are listed in the <code>@Interceptors</code> annotation defines the order in which the interceptors are invoked. Any <code>@Priority</code> settings for interceptors listed within an <code>@Interceptors</code> annotation are ignored.</p>
</li>
<li>
<p>If the interceptor class has superclasses, the interceptors defined on the superclasses are invoked first, starting with the most general superclass.</p>
</li>
<li>
<p>Interceptor classes may set the priority of the interceptor methods by setting a value within a <code>javax.annotation.Priority</code> annotation.</p>
</li>
<li>
<p>After the interceptors defined within interceptor classes have been invoked, the target class's constructor, around-invoke, or around-timeout interceptors are invoked in the same order as the interceptors within the <code>@Interceptors</code> annotation.</p>
</li>
<li>
<p>If the target class has superclasses, any interceptors defined on the superclasses are invoked first, starting with the most general superclass.</p>
</li>
</ul>
<p>The <code>@Priority</code> annotation requires an <code>int</code> value as an element. The lower the number, the higher the priority of the associated interceptor.</p>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>The invocation order of interceptors with the same priority value is implementation-specific.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
<p>The <code>javax.interceptor.Interceptor.Priority</code> class defines the priority constants listed in <a href="#BABFBAEF">Table 54-2</a>.</p>
<div class="tblformal"><a id="sthref2933" name="sthref2933"></a><a id="BABFBAEF" name="BABFBAEF"></a>
<p class="titleintable">Table 54-2 Interceptor Priority Constants</p>
<table class="Formal" title="Interceptor Priority Constants" summary="Description of Interceptor.Priority constants." dir="ltr" border="1" width="100%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<col width="26%" />
<col width="13%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t6">Priority Constant</th>
<th align="left" valign="bottom" id="r1c2-t6">Value</th>
<th align="left" valign="bottom" id="r1c3-t6">Description</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t6" headers="r1c1-t6">
<p><code>PLATFORM_BEFORE</code></p>
</td>
<td align="left" headers="r2c1-t6 r1c2-t6">
<p>0</p>
</td>
<td align="left" headers="r2c1-t6 r1c3-t6">
<p>Interceptors defined by the Java EE Platform and intended to be invoked early in the invocation chain should use the range between <code>PLATFORM_BEFORE</code> and <code>LIBRARY_BEFORE</code>. These interceptors have the highest priority.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t6" headers="r1c1-t6">
<p><code>LIBRARY_BEFORE</code></p>
</td>
<td align="left" headers="r3c1-t6 r1c2-t6">
<p>1000</p>
</td>
<td align="left" headers="r3c1-t6 r1c3-t6">
<p>Interceptors defined by extension libraries that should be invoked early in the interceptor chain should use the range between <code>LIBRARY_BEFORE</code> and <code>APPLICATION</code>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t6" headers="r1c1-t6">
<p><code>APPLICATION</code></p>
</td>
<td align="left" headers="r4c1-t6 r1c2-t6">
<p>2000</p>
</td>
<td align="left" headers="r4c1-t6 r1c3-t6">
<p>Interceptors defined by applications should use the range between <code>APPLICATION</code> and <code>LIBRARY_AFTER</code>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t6" headers="r1c1-t6">
<p><code>LIBRARY_AFTER</code></p>
</td>
<td align="left" headers="r5c1-t6 r1c2-t6">
<p>3000</p>
</td>
<td align="left" headers="r5c1-t6 r1c3-t6">
<p>Low priority interceptors defined by extension libraries should use the range between <code>LIBRARY_AFTER</code> and <code>PLATFORM_AFTER</code>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t6" headers="r1c1-t6">
<p><code>PLATFORM_AFTER</code></p>
</td>
<td align="left" headers="r6c1-t6 r1c2-t6">
<p>4000</p>
</td>
<td align="left" headers="r6c1-t6 r1c3-t6">
<p>Low priority interceptors defined by the Java EE Platform should have values higher than <code>PLATFORM_AFTER</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>Negative priority values are reserved by the Interceptors specification for future use, and should not be used.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
<p>The following code snippet shows how to use the priority constants in an application-defined interceptor:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Interceptor
@Priority(Interceptor.Priority.APPLICATION+200
public class MyInterceptor { ... }
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="interceptors001.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="interceptors003.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

