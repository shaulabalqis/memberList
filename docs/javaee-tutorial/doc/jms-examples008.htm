<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:3Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Using an Entity to Join Messages from Two MDBs" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:Using an Entity to Join Messages from Two MDBs | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<ul style="list-style-type:none">
<li><a href="jms-examples001.htm#BABEFBHJ"><span class="secnum">46.1</span> Overview of the JMS Examples</a></li>
<li><a href="jms-examples002.htm#BNCFA"><span class="secnum">46.2</span> Writing Simple JMS Applications</a>
<ul style="list-style-type:none">
<li><a href="jms-examples002.htm#BNCFD"><span class="secnum">46.2.1</span> Starting the JMS Provider</a></li>
<li><a href="jms-examples002.htm#GKTJS"><span class="secnum">46.2.2</span> Creating JMS Administered Objects</a>
<ul style="list-style-type:none">
<li><a href="jms-examples002.htm#BABHEFCB"><span class="secnum">46.2.2.1</span> To Create Resources for the Simple Examples</a></li>
</ul>
</li>
<li><a href="jms-examples002.htm#BABEEABE"><span class="secnum">46.2.3</span> Building All the Simple Examples</a>
<ul style="list-style-type:none">
<li><a href="jms-examples002.htm#sthref2385"><span class="secnum">46.2.3.1</span> To Build All the Simple Examples Using NetBeans IDE</a></li>
<li><a href="jms-examples002.htm#sthref2386"><span class="secnum">46.2.3.2</span> To Build All the Simple Examples Using Maven</a></li>
</ul>
</li>
<li><a href="jms-examples002.htm#BABIHCAE"><span class="secnum">46.2.4</span> Sending Messages</a>
<ul style="list-style-type:none">
<li><a href="jms-examples002.htm#sthref2389"><span class="secnum">46.2.4.1</span> The Producer.java Client</a></li>
<li><a href="jms-examples002.htm#sthref2390"><span class="secnum">46.2.4.2</span> To Run the Producer Client</a></li>
</ul>
</li>
<li><a href="jms-examples002.htm#BNCFB"><span class="secnum">46.2.5</span> Receiving Messages Synchronously</a>
<ul style="list-style-type:none">
<li><a href="jms-examples002.htm#BNCFC"><span class="secnum">46.2.5.1</span> The SynchConsumer.java Client</a></li>
<li><a href="jms-examples002.htm#BNCFG"><span class="secnum">46.2.5.2</span> To Run the SynchConsumer and Producer Clients</a></li>
</ul>
</li>
<li><a href="jms-examples002.htm#BNCFH"><span class="secnum">46.2.6</span> Using a Message Listener for Asynchronous Message Delivery</a>
<ul style="list-style-type:none">
<li><a href="jms-examples002.htm#BNCFI"><span class="secnum">46.2.6.1</span> Writing the AsynchConsumer.java and TextListener.java Clients</a></li>
<li><a href="jms-examples002.htm#BNCFK"><span class="secnum">46.2.6.2</span> To Run the AsynchConsumer and Producer Clients</a></li>
</ul>
</li>
<li><a href="jms-examples002.htm#BNCFL"><span class="secnum">46.2.7</span> Browsing Messages on a Queue</a>
<ul style="list-style-type:none">
<li><a href="jms-examples002.htm#BNCFM"><span class="secnum">46.2.7.1</span> The MessageBrowser.java Client</a></li>
<li><a href="jms-examples002.htm#BNCFN"><span class="secnum">46.2.7.2</span> To Run the QueueBrowser Client</a></li>
</ul>
</li>
<li><a href="jms-examples002.htm#BABDDHHC"><span class="secnum">46.2.8</span> Running Multiple Consumers on the Same Destination</a></li>
<li><a href="jms-examples002.htm#BNCFX"><span class="secnum">46.2.9</span> Acknowledging Messages</a>
<ul style="list-style-type:none">
<li><a href="jms-examples002.htm#GJSCG"><span class="secnum">46.2.9.1</span> To Run the ClientAckConsumer Client</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="jms-examples003.htm#GIWFH"><span class="secnum">46.3</span> Writing More Advanced JMS Applications</a>
<ul style="list-style-type:none">
<li><a href="jms-examples003.htm#BNCGG"><span class="secnum">46.3.1</span> Using Durable Subscriptions</a>
<ul style="list-style-type:none">
<li><a href="jms-examples003.htm#sthref2409"><span class="secnum">46.3.1.1</span> To Create Resources for the Durable Subscription Example</a></li>
<li><a href="jms-examples003.htm#GJSCI"><span class="secnum">46.3.1.2</span> To Run the Durable Subscription Example</a></li>
<li><a href="jms-examples003.htm#sthref2410"><span class="secnum">46.3.1.3</span> To Run the unsubscriber Example</a></li>
</ul>
</li>
<li><a href="jms-examples003.htm#BNCGJ"><span class="secnum">46.3.2</span> Using Local Transactions</a>
<ul style="list-style-type:none">
<li><a href="jms-examples003.htm#sthref2414"><span class="secnum">46.3.2.1</span> To Create Resources for the transactedexample Example</a></li>
<li><a href="jms-examples003.htm#GJSHA"><span class="secnum">46.3.2.2</span> To Run the transactedexample Clients</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="jms-examples004.htm#BABGEFHC"><span class="secnum">46.4</span> Writing High Performance and Scalable JMS Applications</a>
<ul style="list-style-type:none">
<li><a href="jms-examples004.htm#BABIBEAC"><span class="secnum">46.4.1</span> Using Shared Nondurable Subscriptions</a>
<ul style="list-style-type:none">
<li><a href="jms-examples004.htm#sthref2415"><span class="secnum">46.4.1.1</span> Writing the Clients for the Shared Consumer Example</a></li>
<li><a href="jms-examples004.htm#sthref2416"><span class="secnum">46.4.1.2</span> To Run the SharedConsumer and Producer Clients</a></li>
</ul>
</li>
<li><a href="jms-examples004.htm#BABEJBHA"><span class="secnum">46.4.2</span> Using Shared Durable Subscriptions</a>
<ul style="list-style-type:none">
<li><a href="jms-examples004.htm#sthref2419"><span class="secnum">46.4.2.1</span> To Run the SharedDurableConsumer and Producer Clients</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="jms-examples005.htm#BABBABFC"><span class="secnum">46.5</span> Sending and Receiving Messages Using a Simple Web Application</a>
<ul style="list-style-type:none">
<li><a href="jms-examples005.htm#sthref2425"><span class="secnum">46.5.1</span> The websimplemessage Facelets Pages</a></li>
<li><a href="jms-examples005.htm#sthref2426"><span class="secnum">46.5.2</span> The websimplemessage Managed Beans</a></li>
<li><a href="jms-examples005.htm#sthref2427"><span class="secnum">46.5.3</span> Running the websimplemessage Example</a>
<ul style="list-style-type:none">
<li><a href="jms-examples005.htm#sthref2428"><span class="secnum">46.5.3.1</span> Creating Resources for the websimplemessage Example</a></li>
<li><a href="jms-examples005.htm#sthref2429"><span class="secnum">46.5.3.2</span> To Package and Deploy websimplemessage Using NetBeans IDE</a></li>
<li><a href="jms-examples005.htm#sthref2430"><span class="secnum">46.5.3.3</span> To Package and Deploy websimplemessage Using Maven</a></li>
<li><a href="jms-examples005.htm#sthref2431"><span class="secnum">46.5.3.4</span> To Run the websimplemessage Example</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="jms-examples006.htm#BNBPK"><span class="secnum">46.6</span> Receiving Messages Asynchronously Using a Message-Driven Bean</a>
<ul style="list-style-type:none">
<li><a href="jms-examples006.htm#BNBPL"><span class="secnum">46.6.1</span> Overview of the simplemessage Example</a></li>
<li><a href="jms-examples006.htm#BNBPN"><span class="secnum">46.6.2</span> The simplemessage Application Client</a></li>
<li><a href="jms-examples006.htm#BNBPO"><span class="secnum">46.6.3</span> The simplemessage Message-Driven Bean Class</a>
<ul style="list-style-type:none">
<li><a href="jms-examples006.htm#BNBPP"><span class="secnum">46.6.3.1</span> The onMessage Method</a></li>
</ul>
</li>
<li><a href="jms-examples006.htm#BNBPQ"><span class="secnum">46.6.4</span> Running the simplemessage Example</a>
<ul style="list-style-type:none">
<li><a href="jms-examples006.htm#BNBPR"><span class="secnum">46.6.4.1</span> Creating Resources for the simplemessage Example</a></li>
<li><a href="jms-examples006.htm#sthref2448"><span class="secnum">46.6.4.2</span> To Run the simplemessage Example Using NetBeans IDE</a></li>
<li><a href="jms-examples006.htm#BNBPT"><span class="secnum">46.6.4.3</span> To Run the simplemessage Example Using Maven</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="jms-examples007.htm#BNCGW"><span class="secnum">46.7</span> Sending Messages from a Session Bean to an MDB</a>
<ul style="list-style-type:none">
<li><a href="jms-examples007.htm#BNCGX"><span class="secnum">46.7.1</span> Writing the Application Components for the clientsessionmdb Example</a>
<ul style="list-style-type:none">
<li><a href="jms-examples007.htm#BNCGZ"><span class="secnum">46.7.1.1</span> Coding the Application Client: MyAppClient.java</a></li>
<li><a href="jms-examples007.htm#BNCHA"><span class="secnum">46.7.1.2</span> Coding the Publisher Session Bean</a></li>
<li><a href="jms-examples007.htm#BNCHB"><span class="secnum">46.7.1.3</span> Coding the Message-Driven Bean: MessageBean.java</a></li>
</ul>
</li>
<li><a href="jms-examples007.htm#sthref2457"><span class="secnum">46.7.2</span> Running the clientsessionmdb Example</a>
<ul style="list-style-type:none">
<li><a href="jms-examples007.htm#sthref2458"><span class="secnum">46.7.2.1</span> To Run clientsessionmdb Using NetBeans IDE</a></li>
<li><a href="jms-examples007.htm#sthref2459"><span class="secnum">46.7.2.2</span> To Run clientsessionmdb Using Maven</a></li>
</ul>
</li>
</ul>
</li>
<li><div id="backgroundColor"><a href="jms-examples008.htm#BNCHF"><span class="secnum">46.8</span> Using an Entity to Join Messages from Two MDBs</a><ul style="list-style-type:none">
<li><a href="jms-examples008.htm#BNCHG"><span class="secnum">46.8.1</span> Overview of the clientmdbentity Example Application</a></li>
<li><a href="jms-examples008.htm#BNCHI"><span class="secnum">46.8.2</span> Writing the Application Components for the clientmdbentity Example</a>
<ul style="list-style-type:none">
<li><a href="jms-examples008.htm#BNCHJ"><span class="secnum">46.8.2.1</span> Coding the Application Client: HumanResourceClient.java</a></li>
<li><a href="jms-examples008.htm#BNCHK"><span class="secnum">46.8.2.2</span> Coding the Message-Driven Beans for the clientmdbentity Example</a></li>
<li><a href="jms-examples008.htm#BNCHL"><span class="secnum">46.8.2.3</span> Coding the Entity Class for the clientmdbentity Example</a></li>
</ul>
</li>
<li><a href="jms-examples008.htm#sthref2470"><span class="secnum">46.8.3</span> Running the clientmdbentity Example</a>
<ul style="list-style-type:none">
<li><a href="jms-examples008.htm#sthref2471"><span class="secnum">46.8.3.1</span> To Run clientmdbentity Using NetBeans IDE</a></li>
<li><a href="jms-examples008.htm#sthref2472"><span class="secnum">46.8.3.2</span> To Run clientmdbentity Using Maven</a></li>
<li><a href="jms-examples008.htm#sthref2473"><span class="secnum">46.8.3.3</span> Viewing the Application Output</a></li>
</ul>
</li>
</ul>
</div></li>
<li><a href="jms-examples009.htm#BABDFDJC"><span class="secnum">46.9</span> Using NetBeans IDE to Create JMS Resources</a>
<ul style="list-style-type:none">
<li><a href="jms-examples009.htm#sthref2474"><span class="secnum">46.9.1</span> To Create JMS Resources Using NetBeans IDE</a></li>
<li><a href="jms-examples009.htm#sthref2479"><span class="secnum">46.9.2</span> To Delete JMS Resources Using NetBeans IDE</a></li>
</ul>
</li>
</ul>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jms-examples007.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jms-examples009.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BNCHF" name="BNCHF"></a><a id="JEETT00557" name="JEETT00557"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">46.8</span> <a id="sthref2460" name="sthref2460"></a><a id="sthref2461" name="sthref2461"></a><a id="sthref2462" name="sthref2462"></a><a id="sthref2463" name="sthref2463"></a>Using an Entity to Join Messages from Two MDBs</h1>
<p>This section explains how to write, compile, package, deploy, and run an application that uses the JMS API with an entity. The application uses the following components:</p>
<ul>
<li>
<p>An application client that both sends and receives messages</p>
</li>
<li>
<p>Two message-driven beans</p>
</li>
<li>
<p>An entity class</p>
</li>
</ul>
<p>You will find the source files for this section in the <span class="variable">tut-install</span><code>/examples/jms/clientmdbentity/</code> directory. Path names in this section are relative to this directory.</p>
<a id="BNCHG" name="BNCHG"></a><a id="JEETT01301" name="JEETT01301"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">46.8.1</span> Overview of the clientmdbentity Example Application</h2>
<p>This application simulates, in a simplified way, the work flow of a company's human resources (HR) department when it processes a new hire. This application also demonstrates how to use the Java EE platform to accomplish a task that many JMS applications need to perform.</p>
<p>A messaging client must often wait for several messages from various sources. It then uses the information in all these messages to assemble a message that it then sends to another destination. The common term for this design pattern (which is not specific to JMS) is <span class="glossaryterm">joining messages</span>. Such a task must be transactional, with all the receives and the send as a single transaction. If not all the messages are received successfully, the transaction can be rolled back. For an application client example that illustrates this task, see <a href="jms-examples003.htm#BNCGJ">Using Local Transactions</a>.</p>
<p>A message-driven bean can process only one message at a time in a transaction. To provide the ability to join messages, an application can have the message-driven bean store the interim information in a Java Persistence API entity. The entity can then determine whether all the information has been received; when it has, the entity can report this back to one of the message-driven beans, which then creates and sends the message to the other destination. After it has completed its task, the entity can be removed.</p>
<p>The basic steps of the application are as follows.</p>
<ol>
<li>
<p>The HR department's application client generates an employee ID for each new hire and then publishes a message (M1) containing the new hire's name, employee ID, and position. It publishes the message to a topic because the message needs to be consumed by two message-driven beans. The client then creates a temporary queue, <code>ReplyQueue</code>, with a message listener that waits for a reply to the message. (See <a href="jms-concepts004.htm#BNCGB">Creating Temporary Destinations</a> for more information.)</p>
</li>
<li>
<p>Two message-driven beans process each message: One bean, <code>OfficeMDB</code>, assigns the new hire's office number, and the other bean, <code>EquipmentMDB</code>, assigns the new hire's equipment. The first bean to process the message creates and persists an entity named <code>SetupOffice</code>, then calls a business method of the entity to store the information it has generated. The second bean locates the existing entity and calls another business method to add its information.</p>
</li>
<li>
<p>When both the office and the equipment have been assigned, the entity business method returns a value of <code>true</code> to the message-driven bean that called the method. The message-driven bean then sends to the reply queue a message (M2) describing the assignments. Then it removes the entity. The application client's message listener retrieves the information.</p>
</li>
</ol>
<p><a href="#BNCHH">Figure 46-5</a> illustrates the structure of this application. Of course, an actual HR application would have more components; other beans could set up payroll and benefits records, schedule orientation, and so on.</p>
<p><a href="#BNCHH">Figure 46-5</a> assumes that <code>OfficeMDB</code> is the first message-driven bean to consume the message from the client. <code>OfficeMDB</code> then creates and persists the <code>SetupOffice</code> entity and stores the office information. <code>EquipmentMDB</code> then finds the entity, stores the equipment information, and learns that the entity has completed its work. <code>EquipmentMDB</code> then sends the message to the reply queue and removes the entity.</p>
<div class="figure"><a id="BNCHH" name="BNCHH"></a><a id="JEETT00058" name="JEETT00058"></a>
<p class="titleinfigure">Figure 46-5 An Enterprise Bean Application: Client to Message-Driven Beans to Entity</p>
<img src="img/jeett_dt_038.png" alt="Description of Figure 46-5 follows" title="Description of Figure 46-5 follows" longdesc="img_text/jeett_dt_038.htm" /><br />
<a id="sthref2464" name="sthref2464" href="img_text/jeett_dt_038.htm">Description of "Figure 46-5 An Enterprise Bean Application: Client to Message-Driven Beans to Entity"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="BNCHI" name="BNCHI"></a><a id="JEETT01302" name="JEETT01302"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">46.8.2</span> Writing the Application Components for the clientmdbentity Example</h2>
<p>Writing the components of the application involves coding the application client, the message-driven beans, and the entity class.</p>
<a id="BNCHJ" name="BNCHJ"></a><a id="JEETT00832" name="JEETT00832"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">46.8.2.1</span> <a id="sthref2465" name="sthref2465"></a><a id="sthref2466" name="sthref2466"></a><a id="sthref2467" name="sthref2467"></a><a id="sthref2468" name="sthref2468"></a>Coding the Application Client: HumanResourceClient.java</h3>
<p>The application client, <code>HumanResourceClient.java</code>, found under <code>clientmdbentity-app-client</code>, performs the following steps:</p>
<ol>
<li>
<p>Defines a topic for the application, using the <code>java:app</code> namespace because the topic is used in both the application client and the EJB module</p>
</li>
<li>
<p>Injects <code>ConnectionFactory</code> and <code>Topic</code> resources</p>
</li>
<li>
<p>Creates a <code>TemporaryQueue</code> to receive notification of processing that occurs, based on new-hire events it has published</p>
</li>
<li>
<p>Creates a <code>JMSConsumer</code> for the <code>TemporaryQueue</code>, sets the <code>JMSConsumer</code>'s message listener, and starts the connection</p>
</li>
<li>
<p>Creates a <code>MapMessage</code></p>
</li>
<li>
<p>Creates five new employees with randomly generated names, positions, and ID numbers (in sequence) and publishes five messages containing this information</p>
</li>
</ol>
<p>The message listener, <code>HRListener</code>, waits for messages that contain the assigned office and equipment for each employee. When a message arrives, the message listener displays the information received and determines whether all five messages have arrived. When they have, the message listener notifies the <code>main</code> method, which then exits.</p>
</div>
<!-- class="sect3" -->
<a id="BNCHK" name="BNCHK"></a><a id="JEETT00833" name="JEETT00833"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">46.8.2.2</span> <a id="sthref2469" name="sthref2469"></a>Coding the Message-Driven Beans for the clientmdbentity Example</h3>
<p>This example uses two message-driven beans, both under <code>clientmdbentity-ejb</code>:</p>
<ul>
<li>
<p><code>EquipmentMDB.java</code></p>
</li>
<li>
<p><code>OfficeMDB.java</code></p>
</li>
</ul>
<p>The beans take the following steps.</p>
<ol>
<li>
<p>They inject a <code>MessageDrivenContext</code> resource, an <code>EntityManager</code>, and a <code>JMSContext</code>.</p>
</li>
<li>
<p>The <code>onMessage</code> method retrieves the information in the message. The <code>EquipmentMDB</code>'s <code>onMessage</code> method chooses equipment, based on the new hire's position; the <code>OfficeMDB</code>'s <code>onMessage</code> method randomly generates an office number.</p>
</li>
<li>
<p>After a slight delay to simulate real world processing hitches, the <code>onMessage</code> method calls a helper method, <code>compose</code>.</p>
</li>
<li>
<p>The <code>compose</code> method takes the following steps.</p>
<ol>
<li>
<p>It either creates and persists the <code>SetupOffice</code> entity or finds it by primary key.</p>
</li>
<li>
<p>It uses the entity to store the equipment or the office information in the database, calling either the <code>doEquipmentList</code> or the <code>doOfficeNumber</code> business method.</p>
</li>
<li>
<p>If the business method returns <code>true</code>, meaning that all of the information has been stored, it retrieves the reply destination information from the message, creates a <code>JMSProducer</code>, and sends a reply message that contains the information stored in the entity.</p>
</li>
<li>
<p>It removes the entity.</p>
</li>
</ol>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BNCHL" name="BNCHL"></a><a id="JEETT00834" name="JEETT00834"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">46.8.2.3</span> Coding the Entity Class for the clientmdbentity Example</h3>
<p>The <code>SetupOffice.java</code> class, also under <code>clientmdbentity-ejb</code>, is an entity class. The entity and the message-driven beans are packaged together in an EJB JAR file. The entity class is declared as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Entity
public class SetupOffice implements Serializable {
</pre>
<p>The class contains a no-argument constructor and a constructor that takes two arguments, the employee ID and name. It also contains getter and setter methods for the employee ID, name, office number, and equipment list. The getter method for the employee ID has the <code>@Id</code> annotation to indicate that this field is the primary key:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Id
public String getEmployeeId() {
    return id;
}
</pre>
<p>The class also implements the two business methods, <code>doEquipmentList</code> and <code>doOfficeNumber</code>, and their helper method, <code>checkIfSetupComplete</code>.</p>
<p>The message-driven beans call the business methods and the getter methods.</p>
<p>The <code>persistence.xml</code> file for the entity specifies the most basic settings:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;persistence version="2.1" 
             xmlns="http://xmlns.jcp.org/xml/ns/persistence" 
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence 
               http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"&gt;
  &lt;persistence-unit name="clientmdbentity-ejbPU" transaction-type="JTA"&gt;
    &lt;provider&gt;org.eclipse.persistence.jpa.PersistenceProvider&lt;/provider&gt;
    &lt;jta-data-source&gt;java:comp/DefaultDataSource&lt;/jta-data-source&gt;
    &lt;properties&gt;
      &lt;property name="eclipselink.ddl-generation" 
                value="drop-and-create-tables"/&gt;
    &lt;/properties&gt;
  &lt;/persistence-unit&gt;
&lt;/persistence&gt;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2470" name="sthref2470"></a>
<h2 class="sect2"><span class="secnum">46.8.3</span> Running the clientmdbentity Example</h2>
<p>You can use either NetBeans IDE or Maven to build, deploy, and run the <code>clientmdbentity</code> example.</p>
<p>Because the example defines its own application-private topic and uses the preconfigured default connection factory <code>java:comp/DefaultJMSConnectionFactory</code> and the preconfigured default JDBC resource <code>java:comp/DefaultDataSource</code>, you do not need to create resources for it.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2471" name="sthref2471"></a>
<h3 class="sect3"><span class="secnum">46.8.3.1</span> To Run clientmdbentity Using NetBeans IDE</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>), as well as the database server (see <a href="usingexamples004.htm#BNADK">Starting and Stopping the Java DB Server</a>).</p>
</li>
<li>
<p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/jms/clientmdbentity
</pre></li>
<li>
<p>Select the <code>clientmdbentity</code> folder.</p>
</li>
<li>
<p>Click <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>clientmdbentity</code> project and select <span class="gui-object-action">Build</span>.</p>
<p>This command creates the following:</p>
<ul>
<li>
<p>An application client JAR file that contains the client class and listener class files, along with a manifest file that specifies the main class</p>
</li>
<li>
<p>An EJB JAR file that contains the message-driven beans and the entity class, along with the <code>persistence.xml</code> file</p>
</li>
<li>
<p>An application EAR file that contains the two JAR files along with an <code>application.xml</code> file</p>
<p>The <code>clientmdbentity.ear</code> file is created in the <code>clientmdbentity-ear/target/</code> directory.</p>
</li>
</ul>
<p>The command then deploys the EAR file, retrieves the client stubs, and runs the application client.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref2472" name="sthref2472"></a>
<h3 class="sect3"><span class="secnum">46.8.3.2</span> To Run clientmdbentity Using Maven</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>), as well as the database server (see <a href="usingexamples004.htm#BNADK">Starting and Stopping the Java DB Server</a>).</p>
</li>
<li>
<p>Go to the following directory:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/jms/clientmdbentity/
</pre></li>
<li>
<p>To compile the source files and package, deploy, and run the application, enter the following command:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre>
<p>This command creates the following:</p>
<ul>
<li>
<p>An application client JAR file that contains the client class and listener class files, along with a manifest file that specifies the main class</p>
</li>
<li>
<p>An EJB JAR file that contains the message-driven beans and the entity class, along with the <code>persistence.xml</code> file</p>
</li>
<li>
<p>An application EAR file that contains the two JAR files along with an <code>application.xml</code> file</p>
</li>
</ul>
<p>The command then deploys the application, retrieves the client stubs, and runs the application client.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref2473" name="sthref2473"></a>
<h3 class="sect3"><span class="secnum">46.8.3.3</span> Viewing the Application Output</h3>
<p>The output in the NetBeans IDE output window or in the terminal window looks something like this (preceded by application client container output and Maven output):</p>
<pre xml:space="preserve" class="oac_no_warn">
SENDER: Setting hire ID to 50, name Bill Tudor, position Programmer
SENDER: Setting hire ID to 51, name Carol Jones, position Senior Programmer
SENDER: Setting hire ID to 52, name Mark Wilson, position Manager
SENDER: Setting hire ID to 53, name Polly Wren, position Senior Programmer
SENDER: Setting hire ID to 54, name Joe Lawrence, position Director
Waiting for 5 message(s)
New hire event processed:
  Employee ID: 52
  Name: Mark Wilson
  Equipment: Tablet
  Office number: 294
Waiting for 4 message(s)
New hire event processed:
  Employee ID: 53
  Name: Polly Wren
  Equipment: Laptop
  Office number: 186
Waiting for 3 message(s)
New hire event processed:
  Employee ID: 54
  Name: Joe Lawrence
  Equipment: Mobile Phone
  Office number: 135
Waiting for 2 message(s)
New hire event processed:
  Employee ID: 50
  Name: Bill Tudor
  Equipment: Desktop System
  Office number: 200
Waiting for 1 message(s)
New hire event processed:
  Employee ID: 51
  Name: Carol Jones
  Equipment: Laptop
  Office number: 262
</pre>
<p>The output from the message-driven beans and the entity class appears in the server log.</p>
<p>For each employee, the application first creates the entity and then finds it. You may see runtime errors in the server log, and transaction rollbacks may occur. The errors occur if both of the message-driven beans discover at the same time that the entity does not yet exist, so they both try to create it. The first attempt succeeds, but the second fails because the bean already exists. After the rollback, the second message-driven bean tries again and succeeds in finding the entity. Container-managed transactions allow the application to run correctly, in spite of these errors, with no special programming.</p>
<p>To undeploy the application after you have finished running it, use the <span class="gui-object-action">Services</span> tab or issue the <code>mvn cargo:undeploy</code> command.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="jms-examples007.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="jms-examples009.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

