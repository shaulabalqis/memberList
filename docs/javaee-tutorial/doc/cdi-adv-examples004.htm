<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:2Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="The billpayment Example: Using Events and Interceptors" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:The billpayment Example: Using Events and Interceptors | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples001.htm#GKHPU"><span class="secnum">26.1</span> The encoder Example: Using Alternatives</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples001.htm#GKHQA"><span class="secnum">26.1.1</span> The Coder Interface and Implementations</a></li>
<li><a href="cdi-adv-examples001.htm#GKHPM"><span class="secnum">26.1.2</span> The encoder Facelets Page and Managed Bean</a></li>
<li><a href="cdi-adv-examples001.htm#GKHQQ"><span class="secnum">26.1.3</span> Running the encoder Example</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples001.htm#GKHOW"><span class="secnum">26.1.3.1</span> To Build, Package, and Deploy the encoder Example Using NetBeans IDE</a></li>
<li><a href="cdi-adv-examples001.htm#GKHQU"><span class="secnum">26.1.3.2</span> To Run the encoder Example Using NetBeans IDE</a></li>
<li><a href="cdi-adv-examples001.htm#GKHQL"><span class="secnum">26.1.3.3</span> To Build, Package, and Deploy the encoder Example Using Maven</a></li>
<li><a href="cdi-adv-examples001.htm#GKHOL"><span class="secnum">26.1.3.4</span> To Run the encoder Example Using Maven</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="cdi-adv-examples002.htm#GKHPY"><span class="secnum">26.2</span> The producermethods Example: Using a Producer Method to Choose a Bean Implementation</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples002.htm#GKHRO"><span class="secnum">26.2.1</span> Components of the producermethods Example</a></li>
<li><a href="cdi-adv-examples002.htm#GKHQE"><span class="secnum">26.2.2</span> Running the producermethods Example</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples002.htm#GKHPE"><span class="secnum">26.2.2.1</span> To Build, Package, and Deploy the producermethods Example Using NetBeans IDE</a></li>
<li><a href="cdi-adv-examples002.htm#GKHPS"><span class="secnum">26.2.2.2</span> To Build, Package, and Deploy the producermethods Example Using Maven</a></li>
<li><a href="cdi-adv-examples002.htm#GKHQG"><span class="secnum">26.2.2.3</span> To Run the producermethods Example</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="cdi-adv-examples003.htm#GKHRG"><span class="secnum">26.3</span> The producerfields Example: Using Producer Fields to Generate Resources</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples003.htm#GKHPP"><span class="secnum">26.3.1</span> The Producer Field for the producerfields Example</a></li>
<li><a href="cdi-adv-examples003.htm#GKHPD"><span class="secnum">26.3.2</span> The producerfields Entity and Session Bean</a></li>
<li><a href="cdi-adv-examples003.htm#GKHPF"><span class="secnum">26.3.3</span> The producerfields Facelets Pages and Managed Bean</a></li>
<li><a href="cdi-adv-examples003.htm#GKHRH"><span class="secnum">26.3.4</span> Running the producerfields Example</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples003.htm#GKHPB"><span class="secnum">26.3.4.1</span> To Build, Package, and Deploy the producerfields Example Using NetBeans IDE</a></li>
<li><a href="cdi-adv-examples003.htm#GKHRM"><span class="secnum">26.3.4.2</span> To Build, Package, and Deploy the producerfields Example Using Maven</a></li>
<li><a href="cdi-adv-examples003.htm#GKHRR"><span class="secnum">26.3.4.3</span> To Run the producerfields Example</a></li>
</ul>
</li>
</ul>
</li>
<li><div id="backgroundColor"><a href="cdi-adv-examples004.htm#GKHPA"><span class="secnum">26.4</span> The billpayment Example: Using Events and Interceptors</a><ul style="list-style-type:none">
<li><a href="cdi-adv-examples004.htm#GKHOK"><span class="secnum">26.4.1</span> The PaymentEvent Event Class</a></li>
<li><a href="cdi-adv-examples004.htm#GKHRB"><span class="secnum">26.4.2</span> The PaymentHandler Event Listener</a></li>
<li><a href="cdi-adv-examples004.htm#GKHRJ"><span class="secnum">26.4.3</span> The billpayment Facelets Pages and Managed Bean</a></li>
<li><a href="cdi-adv-examples004.htm#GKHRQ"><span class="secnum">26.4.4</span> The LoggedInterceptor Interceptor Class</a></li>
<li><a href="cdi-adv-examples004.htm#GKHPK"><span class="secnum">26.4.5</span> Running the billpayment Example</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples004.htm#GKHQS"><span class="secnum">26.4.5.1</span> To Build, Package, and Deploy the billpayment Example Using NetBeans IDE</a></li>
<li><a href="cdi-adv-examples004.htm#GKHPX"><span class="secnum">26.4.5.2</span> To Build, Package, and Deploy the billpayment Example Using Maven</a></li>
<li><a href="cdi-adv-examples004.htm#GKHPT"><span class="secnum">26.4.5.3</span> To Run the billpayment Example</a></li>
</ul>
</li>
</ul>
</div></li>
<li><a href="cdi-adv-examples005.htm#GKPAX"><span class="secnum">26.5</span> The decorators Example: Decorating a Bean</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples005.htm#GKPAQ"><span class="secnum">26.5.1</span> Components of the decorators Example</a></li>
<li><a href="cdi-adv-examples005.htm#GKPBK"><span class="secnum">26.5.2</span> Running the decorators Example</a>
<ul style="list-style-type:none">
<li><a href="cdi-adv-examples005.htm#GKPAG"><span class="secnum">26.5.2.1</span> To Build, Package, and Deploy the decorators Example Using NetBeans IDE</a></li>
<li><a href="cdi-adv-examples005.htm#GKPAJ"><span class="secnum">26.5.2.2</span> To Build, Package, and Deploy the decorators Example Using Maven</a></li>
<li><a href="cdi-adv-examples005.htm#GKPAN"><span class="secnum">26.5.2.3</span> To Run the decorators Example</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="cdi-adv-examples003.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="cdi-adv-examples005.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="GKHPA" name="GKHPA"></a><a id="JEETT00486" name="JEETT00486"></a>
<div class="sect1">
<h1 class="sect1"><span class="secnum">26.4</span> <a id="sthref1447" name="sthref1447"></a><a id="sthref1448" name="sthref1448"></a>The billpayment Example: Using Events and Interceptors</h1>
<p>The <code>billpayment</code> example shows how to use both events and interceptors.</p>
<p>The example simulates paying an amount using a debit card or credit card. When the user chooses a payment method, the managed bean creates an appropriate event, supplies its payload, and fires it. A simple event listener handles the event using observer methods.</p>
<p>The example also defines an interceptor that is set on a class and on two methods of another class.</p>
<p>The source files are located in the <span class="variable">tut-install</span><code>/examples/cdi/billpayment/src/main/java/javaeetutorial/billpayment/</code> directory.</p>
<a id="GKHOK" name="GKHOK"></a><a id="JEETT01143" name="JEETT01143"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">26.4.1</span> The PaymentEvent Event Class</h2>
<p>The event class, <code>event.PaymentEvent</code>, is a simple bean class that contains a no-argument constructor. It also has a <code>toString</code> method and getter and setter methods for the payload components: a <code>String</code> for the payment type, a <code>BigDecimal</code> for the payment amount, and a <code>Date</code> for the timestamp.</p>
<pre xml:space="preserve" class="oac_no_warn">
public class PaymentEvent implements Serializable {

    ...
    public String paymentType;
    public BigDecimal value;
    public Date datetime;

    public PaymentEvent() {
    }

    @Override
    public String toString() {
        return this.paymentType
                + " = $" + this.value.toString()
                + " at " + this.datetime.toString();
    }
    ...
</pre>
<p>The event class is a simple bean that is instantiated by the managed bean using <code>new</code> and then populated. For this reason, the CDI container cannot intercept the creation of the bean, and hence it cannot allow interception of its getter and setter methods.</p>
</div>
<!-- class="sect2" -->
<a id="GKHRB" name="GKHRB"></a><a id="JEETT01144" name="JEETT01144"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">26.4.2</span> The PaymentHandler Event Listener</h2>
<p>The event listener, <code>listener.PaymentHandler</code>, contains two observer methods, one for each of the two event types:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Logged
@SessionScoped
public class PaymentHandler implements Serializable {

    ...
    public void creditPayment(@Observes @Credit PaymentEvent event) {
        logger.log(Level.INFO, "PaymentHandler - Credit Handler: {0}",
                event.toString());

        // call a specific Credit handler class...
    }

    public void debitPayment(@Observes @Debit PaymentEvent event) {
        logger.log(Level.INFO, "PaymentHandler - Debit Handler: {0}",
                event.toString());
 
        // call a specific Debit handler class...
    }
}
</pre>
<p>Each observer method takes as an argument the event, annotated with <code>@Observes</code> and with the qualifier for the type of payment. In a real application, the observer methods would pass the event information on to another component that would perform business logic on the payment.</p>
<p>The qualifiers are defined in the <code>payment</code> package, described in <a href="#GKHRJ">The billpayment Facelets Pages and Managed Bean</a>.</p>
<p>The <code>PaymentHandler</code> bean is annotated <code>@Logged</code> so that all its methods can be intercepted.</p>
</div>
<!-- class="sect2" -->
<a id="GKHRJ" name="GKHRJ"></a><a id="JEETT01145" name="JEETT01145"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">26.4.3</span> The billpayment Facelets Pages and Managed Bean</h2>
<p>The <code>billpayment</code> example contains two Facelets pages, <code>index.xhtml</code> and the very simple <code>response.xhtml</code>. The body of <code>index.xhtml</code> looks like this:</p>
<pre xml:space="preserve" class="oac_no_warn">
    &lt;h:body&gt;
        &lt;h3&gt;Bill Payment Options&lt;/h3&gt;
        &lt;p&gt;Enter an amount, select Debit Card or Credit Card, 
            then click Pay.&lt;/p&gt;
        &lt;h:form&gt;
            &lt;p&gt;
            &lt;h:outputLabel value="Amount: $" for="amt"/&gt;
            &lt;h:inputText id="amt" value="#{paymentBean.value}"
                         required="true"
                         requiredMessage="An amount is required."
                         maxlength="15" /&gt;
            &lt;/p&gt;
            &lt;h:outputLabel value="Options:" for="opt"/&gt;
            &lt;h:selectOneRadio id="opt" value="#{paymentBean.paymentOption}"&gt;
                &lt;f:selectItem id="debit" itemLabel="Debit Card"
                              itemValue="1"/&gt;
                &lt;f:selectItem id="credit" itemLabel="Credit Card"
                              itemValue="2" /&gt;
            &lt;/h:selectOneRadio&gt;
            &lt;p&gt;&lt;h:commandButton id="submit" value="Pay"
                                action="#{paymentBean.pay}" /&gt;&lt;/p&gt;
            &lt;p&gt;&lt;h:commandButton value="Reset" 
                                action="#{paymentBean.reset}" /&gt;&lt;/p&gt;
        &lt;/h:form&gt;
        ...
    &lt;/h:body&gt;
</pre>
<p>The input field takes a payment amount, passed to <code>paymentBean.value</code>. Two options ask the user to select a Debit Card or Credit Card payment, passing the integer value to <code>paymentBean.paymentOption</code>. Finally, the <span class="gui-object-action">Pay</span> command button's action is set to the method <code>paymentBean.pay</code>, and the <span class="gui-object-action">Reset</span> button's action is set to the <code>paymentBean.reset</code> method.</p>
<p>The <code>payment.PaymentBean</code> managed bean uses qualifiers to differentiate between the two kinds of payment event:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Named
@SessionScoped
public class PaymentBean implements Serializable {

   ...
    @Inject
    @Credit
    Event&lt;PaymentEvent&gt; creditEvent;

    @Inject
    @Debit
    Event&lt;PaymentEvent&gt; debitEvent;
</pre>
<p>The qualifiers, <code>@Credit</code> and <code>@Debit</code>, are defined in the <code>payment</code> package along with <code>PaymentBean</code>.</p>
<p>Next, the <code>PaymentBean</code> defines the properties it obtains from the Facelets page and will pass on to the event:</p>
<pre xml:space="preserve" class="oac_no_warn">
    public static final int DEBIT = 1;
    public static final int CREDIT = 2;
    private int paymentOption = DEBIT;
    
    @Digits(integer = 10, fraction = 2, message = "Invalid value")
    private BigDecimal value;

    private Date datetime;
</pre>
<p>The <code>paymentOption</code> value is an integer passed in from the option component; the default value is <code>DEBIT</code>. The <code>value</code> is a <code>BigDecimal</code> with a Bean Validation constraint that enforces a currency value with a maximum number of digits. The timestamp for the event, <code>datetime</code>, is a <code>Date</code> object initialized when the <code>pay</code> method is called.</p>
<p>The <code>pay</code> method of the bean first sets the timestamp for this payment event. It then creates and populates the event payload, using the constructor for the <code>PaymentEvent</code> and calling the event's setter methods, using the bean properties as arguments. It then fires the event.</p>
<pre xml:space="preserve" class="oac_no_warn">
    @Logged
    public String pay() {
        this.setDatetime(Calendar.getInstance().getTime());
        switch (paymentOption) {
            case DEBIT:
                PaymentEvent debitPayload = new PaymentEvent();
                debitPayload.setPaymentType("Debit");
                debitPayload.setValue(value);
                debitPayload.setDatetime(datetime);
                debitEvent.fire(debitPayload);
                break;
            case CREDIT:
                PaymentEvent creditPayload = new PaymentEvent();
                creditPayload.setPaymentType("Credit");
                creditPayload.setValue(value);
                creditPayload.setDatetime(datetime);
                creditEvent.fire(creditPayload);
                break;
            default:
                logger.severe("Invalid payment option!");
        }
        return "response";
    }
</pre>
<p>The <code>pay</code> method returns the page to which the action is redirected, <code>response.xhtml</code>.</p>
<p>The <code>PaymentBean</code> class also contains a <code>reset</code> method that empties the value field on the <code>index.xhtml</code> page and sets the payment option to the default:</p>
<pre xml:space="preserve" class="oac_no_warn">
    @Logged
    public void reset() {
        setPaymentOption(DEBIT);
        setValue(BigDecimal.ZERO);
    }
</pre>
<p>In this bean, only the <code>pay</code> and <code>reset</code> methods are intercepted.</p>
<p>The <code>response.xhtml</code> page displays the amount paid. It uses a <code>rendered</code> expression to display the payment method:</p>
<pre xml:space="preserve" class="oac_no_warn">
    &lt;h:body&gt;
        &lt;h:form&gt;
            &lt;h2&gt;Bill Payment: Result&lt;/h2&gt;
            &lt;h3&gt;Amount Paid with
                &lt;h:outputText id="debit" value="Debit Card: "
                              rendered="#{paymentBean.paymentOption eq 1}" /&gt;
                &lt;h:outputText id="credit" value="Credit Card: "
                              rendered="#{paymentBean.paymentOption eq 2}" /&gt;
                &lt;h:outputText id="result" value="#{paymentBean.value}"&gt;
                    &lt;f:convertNumber type="currency"/&gt;
                &lt;/h:outputText&gt;
            &lt;/h3&gt;
            &lt;p&gt;&lt;h:commandButton id="back" value="Back" action="index" /&gt;&lt;/p&gt;
        &lt;/h:form&gt;
    &lt;/h:body&gt;
</pre></div>
<!-- class="sect2" -->
<a id="GKHRQ" name="GKHRQ"></a><a id="JEETT01146" name="JEETT01146"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">26.4.4</span> The LoggedInterceptor Interceptor Class</h2>
<p>The interceptor class, <code>LoggedInterceptor</code>, and its interceptor binding, <code>Logged</code>, are both defined in the <code>interceptor</code> package. The <code>Logged</code> interceptor binding is defined as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Inherited
@InterceptorBinding
@Retention(RUNTIME)
@Target({METHOD, TYPE})
public @interface Logged {
}
</pre>
<p>The <code>LoggedInterceptor</code> class looks like this:</p>
<pre xml:space="preserve" class="oac_no_warn">
@Logged
@Interceptor
public class LoggedInterceptor implements Serializable {

    ...

    public LoggedInterceptor() {
    }

    @AroundInvoke
    public Object logMethodEntry(InvocationContext invocationContext)
            throws Exception {
        System.out.println("Entering method: "
                + invocationContext.getMethod().getName() + " in class "
                + invocationContext.getMethod().getDeclaringClass().getName());

        return invocationContext.proceed();
    }
}
</pre>
<p>The class is annotated with both the <code>@Logged</code> and the <code>@Interceptor</code> annotations. The <code>@AroundInvoke</code> method, <code>logMethodEntry</code>, takes the required <code>InvocationContext</code> argument and calls the required <code>proceed</code> method. When a method is intercepted, <code>logMethodEntry</code> displays the name of the method being invoked as well as its class.</p>
<p>To enable the interceptor, the <code>beans.xml</code> file defines it as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
&lt;interceptors&gt;
    &lt;class&gt;javaeetutorial.billpayment.interceptor.LoggedInterceptor&lt;/class&gt;
&lt;/interceptors&gt;
</pre>
<p>In this application, the <code>PaymentEvent</code> and <code>PaymentHandler</code> classes are annotated <code>@Logged</code>, so all their methods are intercepted. In <code>PaymentBean</code>, only the <code>pay</code> and <code>reset</code> methods are annotated <code>@Logged</code>, so only those methods are intercepted.</p>
</div>
<!-- class="sect2" -->
<a id="GKHPK" name="GKHPK"></a><a id="JEETT01147" name="JEETT01147"></a>
<div class="sect2">
<h2 class="sect2"><span class="secnum">26.4.5</span> Running the billpayment Example</h2>
<p>You can use either NetBeans IDE or Maven to build, package, deploy, and run the <code>billpayment</code> application.</p>
<a id="GKHQS" name="GKHQS"></a><a id="JEETT00229" name="JEETT00229"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">26.4.5.1</span> To Build, Package, and Deploy the billpayment Example Using NetBeans IDE</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/cdi
</pre></li>
<li>
<p>Select the <code>billpayment</code> folder.</p>
</li>
<li>
<p>Click <span class="gui-object-action">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>billpayment</code> project and select <span class="gui-object-action">Build</span>.</p>
<p>This command builds and packages the application into a WAR file, <code>billpayment.war</code>, located in the <code>target</code> directory, and then deploys it to GlassFish Server.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="GKHPX" name="GKHPX"></a><a id="JEETT00230" name="JEETT00230"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">26.4.5.2</span> To Build, Package, and Deploy the billpayment Example Using Maven</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>In a terminal window, go to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="variable">tut-install</span>/examples/cdi/billpayment/
</pre></li>
<li>
<p>Enter the following command to deploy the application:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre>
<p>This command builds and packages the application into a WAR file, <code>billpayment.war</code>, located in the <code>target</code> directory, and then deploys it to GlassFish Server.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="GKHPT" name="GKHPT"></a><a id="JEETT00231" name="JEETT00231"></a>
<div class="sect3">
<h3 class="sect3"><span class="secnum">26.4.5.3</span> To Run the billpayment Example</h3>
<ol>
<li>
<p>In a web browser, enter the following URL:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/billpayment
</pre></li>
<li>
<p>On the <span class="gui-object-title">Bill Payment Options</span> page, enter a value in the <span class="gui-object-action">Amount</span> field.</p>
<p>The amount can contain up to 10 digits and include up to two decimal places. For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
9876.54
</pre></li>
<li>
<p>Select <span class="gui-object-action">Debit Card</span> or <span class="gui-object-action">Credit Card</span> and click <span class="gui-object-action">Pay</span>.</p>
<p>The <span class="gui-object-title">Bill Payment: Result</span> page opens, displaying the amount paid and the method of payment:</p>
<pre xml:space="preserve" class="oac_no_warn">
Amount Paid with Credit Card: $9,876.34
</pre></li>
<li>
<p>Click <span class="gui-object-action">Back</span> to return to the <span class="gui-object-title">Bill Payment Options</span> page.</p>
<p>You can also click <span class="gui-object-action">Reset</span> to return to the initial page values.</p>
</li>
<li>
<p>Examine the server log output.</p>
<p>In NetBeans IDE, the output is visible in the GlassFish Server <span class="gui-object-action">Output</span> tab. Otherwise, view <span class="variable">domain-dir</span><code>/logs/server.log</code>.</p>
<p>The output from each interceptor appears in the log, followed by the additional logger output defined by the constructor and methods:</p>
<pre xml:space="preserve" class="oac_no_warn">
INFO: Entering method: pay in class billpayment.payment.PaymentBean
INFO: PaymentHandler created.
INFO: Entering method: debitPayment in class billpayment.listener.PaymentHandler
INFO: PaymentHandler - Debit Handler: Debit = $1234.56 at Tue Dec 14 14:50:28 EST 2010
</pre></li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="cdi-adv-examples003.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="cdi-adv-examples005.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

