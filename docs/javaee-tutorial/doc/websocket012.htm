<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
        <meta http-equiv="Content-Style-Type" content="text/css" />
        <meta http-equiv="Content-Script-Type" content="text/javascript" />

        <!-- Add DARB meta tags here -->

        <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-09-06T2:45:1Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="The websocketbot Example Application" />
<meta name="relnum" content="Release 7" />
<meta name="partnum" content="E39031-01" />
        <meta name="description" content="A guide to developing enterprise applications for the Java Platform, Enterprise Edition 7 (Java EE 7) using GlassFish Server Open Source Edition." />
        <meta name="keywords" content="Get started with Java EE, get started with Java EE 7, tutorials, Java EE getting started, Java EE getting started guide, Java EE, Java EE 7, Java FX, Web, developer, enterprise, Java EE Tutorial, Java EE 7 Tutorial" />

        <!-- Persistent copyright link from DARB output -->
        <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

        <!-- Links to Java EE output template style sheets -->
        <link href="../css/javaee-darb-position.css" rel="stylesheet" type="text/css" />
        <link href="../css/javaee-darb-fonts.css" rel="stylesheet" type="text/css" />

        <title>The Java EE 7 Tutorial:The websocketbot Example Application | Java EE Documentation</title>


    </head>

    <body class="javaee">
        <!-- The following markup is required for accessibility -->
        <noscript>
            JavaScript is not supported by your browser.  JavaScript support is required for full functionality of this page.
        </noscript>


        	<!-- ///////// Container ///////// -->
        	<div id="container">



            <!--///////// Header /////////-->
            <div id="header">
                <div id="headertrail" class="breadcrumb"><a href="http://www.oracle.com/technetwork/java/index.html">Java</a> &gt; <a href="http://www.oracle.com/technetwork/java/javaee/overview/index.html">Java EE </a> &gt; <a href="http://docs.oracle.com/javaee/">Java EE Documentation</a>
                </div>
            </div>   
			<!-- end #header -->
            <!--///////// End Header /////////-->



            <!--///////// Start Side Bar /////////-->
            <div id="sidebar">

                <!-- Sidebar item 1. This <div> is obligatory -->
                <div id="sidebar_version_box" class="type_med_gry">
                    <h1>Release: Java EE 7.0</h1>
                    <p>Last Updated: September, 2014</p>
					 <p><a href="http://docs.oracle.com/javaee/7/tutorial/doc/javaeetutorial7.pdf">Download as PDF</a></p>  
                 </div>
			    <!-- end obligatory sidebar_version_box -->


                <!-- Sidebar item 2 Table of Contents. -->
                <div id="sidebar_toc_box" class="type_med_gry">
                    
                    <div id="toc">

                         <h2 class="tocheader"><a href="preface.htm#GEXAF">Preface</a></h2>
<h2 class="tocheader"><a href="partintro.htm#GFIRP">Part I Introduction</a></h2>
<h2 class="tocheader"><a href="overview.htm#BNAAW"><span class="secnum">1</span> Overview</a></h2>
<h2 class="tocheader"><a href="usingexamples.htm#GFIUD"><span class="secnum">2</span> Using the Tutorial Examples</a></h2>
<h2 class="tocheader"><a href="partplatform.htm#GFIRP2">Part II Platform Basics</a></h2>
<h2 class="tocheader"><a href="resource-creation.htm#GKJIQ2"><span class="secnum">3</span> Resource Creation</a></h2>
<h2 class="tocheader"><a href="injection.htm#GKJIQ3"><span class="secnum">4</span> Injection</a></h2>
<h2 class="tocheader"><a href="packaging.htm#GKJIQ4"><span class="secnum">5</span> Packaging</a></h2>
<h2 class="tocheader"><a href="partwebtier.htm#BNADP">Part III The Web Tier</a></h2>
<h2 class="tocheader"><a href="webapp.htm#BNADR"><span class="secnum">6</span> Getting Started with Web Applications</a></h2>
<h2 class="tocheader"><a href="jsf-intro.htm#BNAPH"><span class="secnum">7</span> JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-facelets.htm#GIEPX"><span class="secnum">8</span> Introduction to Facelets</a></h2>
<h2 class="tocheader"><a href="jsf-el.htm#GJDDD"><span class="secnum">9</span> Expression Language</a></h2>
<h2 class="tocheader"><a href="jsf-page.htm#BNAQZ"><span class="secnum">10</span> Using JavaServer Faces Technology in Web Pages</a></h2>
<h2 class="tocheader"><a href="jsf-page-core.htm#GJCUT"><span class="secnum">11</span> Using Converters, Listeners, and Validators</a></h2>
<h2 class="tocheader"><a href="jsf-develop.htm#BNATX"><span class="secnum">12</span> Developing with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-ajax.htm#GKIOW"><span class="secnum">13</span> Using Ajax with JavaServer Faces Technology</a></h2>
<h2 class="tocheader"><a href="jsf-advanced-cc.htm#GKHXA"><span class="secnum">14</span> Composite Components: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="jsf-custom.htm#BNAVG"><span class="secnum">15</span> Creating Custom UI Components and Other Custom Objects</a></h2>
<h2 class="tocheader"><a href="jsf-configure.htm#BNAWO"><span class="secnum">16</span> Configuring JavaServer Faces Applications</a></h2>
<h2 class="tocheader"><a href="servlets.htm#BNAFD"><span class="secnum">17</span> Java Servlet Technology</a></h2>
<h2 class="tocheader"><a href="websocket.htm#GKJIQ5"><span class="secnum">18</span> Java API for WebSocket</a></h2>
<ul style="list-style-type:none">
<li><a href="websocket001.htm#BABDABHF"><span class="secnum">18.1</span> Introduction to WebSocket</a></li>
<li><a href="websocket002.htm#BABEAEFC"><span class="secnum">18.2</span> Creating WebSocket Applications in the Java EE Platform</a></li>
<li><a href="websocket003.htm#BABGJEIG"><span class="secnum">18.3</span> Programmatic Endpoints</a></li>
<li><a href="websocket004.htm#BABFEBGA"><span class="secnum">18.4</span> Annotated Endpoints</a></li>
<li><a href="websocket005.htm#BABFCGBJ"><span class="secnum">18.5</span> Sending and Receiving Messages</a>
<ul style="list-style-type:none">
<li><a href="websocket005.htm#sthref1271"><span class="secnum">18.5.1</span> Sending Messages</a>
<ul style="list-style-type:none">
<li><a href="websocket005.htm#BABIFBCG"><span class="secnum">18.5.1.1</span> Sending Messages to All Peers Connected to an Endpoint</a></li>
</ul>
</li>
<li><a href="websocket005.htm#sthref1273"><span class="secnum">18.5.2</span> Receiving Messages</a></li>
</ul>
</li>
<li><a href="websocket006.htm#BABGJCAD"><span class="secnum">18.6</span> Maintaining Client State</a></li>
<li><a href="websocket007.htm#BABGADFG"><span class="secnum">18.7</span> Using Encoders and Decoders</a>
<ul style="list-style-type:none">
<li><a href="websocket007.htm#sthref1276"><span class="secnum">18.7.1</span> Implementing Encoders to Convert Java Objects into WebSocket Messages</a></li>
<li><a href="websocket007.htm#sthref1278"><span class="secnum">18.7.2</span> Implementing Decoders to Convert WebSocket Messages into Java Objects</a></li>
</ul>
</li>
<li><a href="websocket008.htm#BABEJIJI"><span class="secnum">18.8</span> Path Parameters</a></li>
<li><a href="websocket009.htm#BABDEJHB"><span class="secnum">18.9</span> Handling Errors</a></li>
<li><a href="websocket010.htm#BABJAIGH"><span class="secnum">18.10</span> Specifying an Endpoint Configurator Class</a></li>
<li><a href="websocket011.htm#BABGCEHE"><span class="secnum">18.11</span> The dukeetf2 Example Application</a>
<ul style="list-style-type:none">
<li><a href="websocket011.htm#sthref1285"><span class="secnum">18.11.1</span> Architecture of the dukeetf2 Sample Application</a>
<ul style="list-style-type:none">
<li><a href="websocket011.htm#sthref1286"><span class="secnum">18.11.1.1</span> The Endpoint</a></li>
<li><a href="websocket011.htm#sthref1287"><span class="secnum">18.11.1.2</span> The Enterprise Bean</a></li>
<li><a href="websocket011.htm#sthref1288"><span class="secnum">18.11.1.3</span> The HTML Page</a></li>
</ul>
</li>
<li><a href="websocket011.htm#sthref1289"><span class="secnum">18.11.2</span> Running the dukeetf2 Example Application</a>
<ul style="list-style-type:none">
<li><a href="websocket011.htm#sthref1290"><span class="secnum">18.11.2.1</span> To Run the dukeetf2 Example Application Using NetBeans IDE</a></li>
<li><a href="websocket011.htm#sthref1291"><span class="secnum">18.11.2.2</span> To Run the dukeetf2 Example Application Using Maven</a></li>
</ul>
</li>
</ul>
</li>
<li><div id="backgroundColor"><a href="websocket012.htm#BABCDBBC"><span class="secnum">18.12</span> The websocketbot Example Application</a><ul style="list-style-type:none">
<li><a href="websocket012.htm#sthref1294"><span class="secnum">18.12.1</span> Architecture of the websocketbot Example Application</a>
<ul style="list-style-type:none">
<li><a href="websocket012.htm#sthref1295"><span class="secnum">18.12.1.1</span> The CDI Bean</a></li>
<li><a href="websocket012.htm#sthref1296"><span class="secnum">18.12.1.2</span> The WebSocket Endpoint</a></li>
<li><a href="websocket012.htm#sthref1297"><span class="secnum">18.12.1.3</span> The Application Messages</a></li>
<li><a href="websocket012.htm#sthref1298"><span class="secnum">18.12.1.4</span> The Encoder Classes</a></li>
<li><a href="websocket012.htm#sthref1299"><span class="secnum">18.12.1.5</span> The Message Decoder</a></li>
<li><a href="websocket012.htm#sthref1300"><span class="secnum">18.12.1.6</span> The HTML Page</a></li>
</ul>
</li>
<li><a href="websocket012.htm#sthref1301"><span class="secnum">18.12.2</span> Running the websocketbot Example Application</a>
<ul style="list-style-type:none">
<li><a href="websocket012.htm#sthref1302"><span class="secnum">18.12.2.1</span> To Run the websocketbot Example Application Using NetBeans IDE</a></li>
<li><a href="websocket012.htm#sthref1303"><span class="secnum">18.12.2.2</span> To Run the websocketbot Example Application Using Maven</a></li>
<li><a href="websocket012.htm#BABDDAAG"><span class="secnum">18.12.2.3</span> To Test the websocketbot Example Application</a></li>
</ul>
</li>
</ul>
</div></li>
<li><a href="websocket013.htm#BABDFIFD"><span class="secnum">18.13</span> Further Information about WebSocket</a></li>
</ul>
<h2 class="tocheader"><a href="jsonp.htm#GLRBB"><span class="secnum">19</span> JSON Processing</a></h2>
<h2 class="tocheader"><a href="webi18n.htm#BNAXU"><span class="secnum">20</span> Internationalizing and Localizing Web Applications</a></h2>
<h2 class="tocheader"><a href="partbeanvalidation.htm#sthref1322">Part IV Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation.htm#CHDGJIIA"><span class="secnum">21</span> Introduction to Bean Validation</a></h2>
<h2 class="tocheader"><a href="bean-validation-advanced.htm#GKAHP"><span class="secnum">22</span> Bean Validation: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partcdi.htm#GJBNR">Part V Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basic.htm#GIWHB"><span class="secnum">23</span> Introduction to Contexts and Dependency Injection for Java EE</a></h2>
<h2 class="tocheader"><a href="cdi-basicexamples.htm#GJBLS"><span class="secnum">24</span> Running the Basic Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="cdi-adv.htm#GJEHI"><span class="secnum">25</span> Contexts and Dependency Injection for Java EE: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="cdi-adv-examples.htm#GKHRE"><span class="secnum">26</span> Running the Advanced Contexts and Dependency Injection Examples</a></h2>
<h2 class="tocheader"><a href="partwebsvcs.htm#BNAYK">Part VI Web Services</a></h2>
<h2 class="tocheader"><a href="webservices-intro.htm#GIJTI"><span class="secnum">27</span> Introduction to Web Services</a></h2>
<h2 class="tocheader"><a href="jaxws.htm#BNAYL"><span class="secnum">28</span> Building Web Services with JAX-WS</a></h2>
<h2 class="tocheader"><a href="jaxrs.htm#GIEPU"><span class="secnum">29</span> Building RESTful Web Services with JAX-RS</a></h2>
<h2 class="tocheader"><a href="jaxrs-client.htm#BABEIGIH"><span class="secnum">30</span> Accessing REST Resources with the JAX-RS Client API</a></h2>
<h2 class="tocheader"><a href="jaxrs-advanced.htm#GJJXE"><span class="secnum">31</span> JAX-RS: Advanced Topics and an Example</a></h2>
<h2 class="tocheader"><a href="partentbeans.htm#BNBLR">Part VII Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-intro.htm#GIJSZ"><span class="secnum">32</span> Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-gettingstarted.htm#GIJRE"><span class="secnum">33</span> Getting Started with Enterprise Beans</a></h2>
<h2 class="tocheader"><a href="ejb-basicexamples.htm#GIJRB"><span class="secnum">34</span> Running the Enterprise Bean Examples</a></h2>
<h2 class="tocheader"><a href="ejb-embedded.htm#GKCQZ"><span class="secnum">35</span> Using the Embedded Enterprise Bean Container</a></h2>
<h2 class="tocheader"><a href="ejb-async.htm#GKIDZ"><span class="secnum">36</span> Using Asynchronous Method Invocation in Session Beans</a></h2>
<h2 class="tocheader"><a href="partpersist.htm#BNBPY">Part VIII Persistence</a></h2>
<h2 class="tocheader"><a href="persistence-intro.htm#BNBPZ"><span class="secnum">37</span> Introduction to the Java Persistence API</a></h2>
<h2 class="tocheader"><a href="persistence-basicexamples.htm#GIJST"><span class="secnum">38</span> Running the Persistence Examples</a></h2>
<h2 class="tocheader"><a href="persistence-querylanguage.htm#BNBTG"><span class="secnum">39</span> The Java Persistence Query Language</a></h2>
<h2 class="tocheader"><a href="persistence-criteria.htm#GJITV"><span class="secnum">40</span> Using the Criteria API to Create Queries</a></h2>
<h2 class="tocheader"><a href="persistence-string-queries.htm#GKJIQ"><span class="secnum">41</span> Creating and Using String-Based Criteria Queries</a></h2>
<h2 class="tocheader"><a href="persistence-locking.htm#GKJJF"><span class="secnum">42</span> Controlling Concurrent Access to Entity Data with Locking</a></h2>
<h2 class="tocheader"><a href="persistence-entitygraphs.htm#BABIJIAC"><span class="secnum">43</span> Creating Fetch Plans with Entity Graphs</a></h2>
<h2 class="tocheader"><a href="persistence-cache.htm#GKJIA"><span class="secnum">44</span> Using a Second-Level Cache with Java Persistence API Applications</a></h2>
<h2 class="tocheader"><a href="partmessaging.htm#GFIRP3">Part IX Messaging</a></h2>
<h2 class="tocheader"><a href="jms-concepts.htm#BNCDQ"><span class="secnum">45</span> Java Message Service Concepts</a></h2>
<h2 class="tocheader"><a href="jms-examples.htm#BNCGV"><span class="secnum">46</span> Java Message Service Examples</a></h2>
<h2 class="tocheader"><a href="partsecurity.htm#GIJRP">Part X Security</a></h2>
<h2 class="tocheader"><a href="security-intro.htm#BNBWJ"><span class="secnum">47</span> Introduction to Security in the Java EE Platform</a></h2>
<h2 class="tocheader"><a href="security-webtier.htm#BNCAS"><span class="secnum">48</span> Getting Started Securing Web Applications</a></h2>
<h2 class="tocheader"><a href="security-javaee.htm#BNBYK"><span class="secnum">49</span> Getting Started Securing Enterprise Applications</a></h2>
<h2 class="tocheader"><a href="security-advanced.htm#GJJWX"><span class="secnum">50</span> Java EE Security: Advanced Topics</a></h2>
<h2 class="tocheader"><a href="partsupporttechs.htm#GIJUE">Part XI Java EE Supporting Technologies</a></h2>
<h2 class="tocheader"><a href="transactions.htm#BNCIH"><span class="secnum">51</span> Transactions</a></h2>
<h2 class="tocheader"><a href="resources.htm#BNCJH"><span class="secnum">52</span> Resource Adapters and Contracts</a></h2>
<h2 class="tocheader"><a href="connectorexample.htm#GLODB"><span class="secnum">53</span> The Resource Adapter Examples</a></h2>
<h2 class="tocheader"><a href="interceptors.htm#GKEED"><span class="secnum">54</span> Using Java EE Interceptors</a></h2>
<h2 class="tocheader"><a href="batch-processing.htm#GKJIQ6"><span class="secnum">55</span> Batch Processing</a></h2>
<h2 class="tocheader"><a href="concurrency-utilities.htm#GKJIQ8"><span class="secnum">56</span> Concurrency Utilities for Java EE</a></h2>
<h2 class="tocheader"><a href="partcasestudies.htm#GKGJW">Part XII Case Studies</a></h2>
<h2 class="tocheader"><a href="dukes-bookstore.htm#GLNVI"><span class="secnum">57</span> Duke's Bookstore Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-tutoring.htm#GKAEE"><span class="secnum">58</span> Duke's Tutoring Case Study Example</a></h2>
<h2 class="tocheader"><a href="dukes-forest.htm#GLNPW"><span class="secnum">59</span> Duke's Forest Case Study Example</a></h2>
<h2 class="tocheader"><a href="index.htm">Index</a></h2>
 

                    </div><!-- End toc box -->
                </div>
				<!-- End sidebar_toc box -->


                <!-- Sidebar item feedback -->
                <div id="sidebar_feedback_box" class="type_med_gry">
                    <p class="boxtitle">Feedback</p>
                    <p><a href="http://docs.oracle.com/javaee/support/feedback.htm">Send us feedback about this document.</a></p>
                </div>
				<!-- end sidebar_feedback_box -->

            </div>
			<!-- end #sidebar -->
            <!--///////// End Side Bar /////////-->




            <!--///////// Main Content /////////-->
            <div id="mainContent">

                <!-- Book Info div is used only for multipage documents -->
                <div id="bookTitle">
                    <h1>The Java EE 7 Tutorial  </h1>
                </div>
			   <!-- End BookInfo div tag -->



                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="websocket011.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="websocket013.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>              
                <!-- END NEXT_PREVIOUS BUTTONS -->




                <!-- /////////////// Start content copied from DARB output ////////////// -->
				<div class="ind">

 				<!-- [REPLACE_INI_TITLE_PAGE_CONTENTS] -->
				 <a id="BABCDBBC" name="BABCDBBC"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h1 class="sect1"><span class="secnum">18.12</span> The websocketbot Example Application<a id="sthref1292" name="sthref1292"></a><a id="sthref1293" name="sthref1293"></a></h1>
<p>The <code>websocketbot</code> example application, located in the <span class="variable">tut-install</span><code>/examples/web/websocket/websocketbot/</code> directory, demonstrates how to use a WebSocket endpoint to implement a chat. The example resembles a chat room in which many users can join and have a conversation. Users can ask simple questions to a bot agent that is always available in the chat room.</p>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1294" name="sthref1294"></a>
<h2 class="sect2"><span class="secnum">18.12.1</span> Architecture of the websocketbot Example Application</h2>
<p>The <code>websocketbot</code> example application consists of the following elements:</p>
<ul>
<li>
<p>A CDI bean (<code>BotBean</code>) that contains the logic for the bot agent to reply to messages</p>
</li>
<li>
<p>A WebSocket endpoint (<code>BotEndpoint</code>) that implements the chat room</p>
</li>
<li>
<p>A set of classes (<code>Message</code>, <code>ChatMessage</code>, <code>InfoMessage</code>, <code>JoinMessage</code>, and <code>UsersMessage</code>) that represent application messages</p>
</li>
<li>
<p>A set of classes (<code>ChatMessageEncoder</code>, <code>InfoMessageEncoder</code>, <code>JoinMessageEncoder</code>, and <code>UsersMessageEncoder</code>) that encode application messages into WebSocket text messages as JSON data</p>
</li>
<li>
<p>A class (<code>MessageDecoder</code>) the parses WebSocket text messages as JSON data and decodes them into <code>JoinMessage</code> or <code>ChatMessage</code> objects</p>
</li>
<li>
<p>An HTML page (<code>index.html</code>) that uses JavaScript code to implement the client for the chat room</p>
</li>
</ul>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1295" name="sthref1295"></a>
<h3 class="sect3"><span class="secnum">18.12.1.1</span> The CDI Bean</h3>
<p>The CDI bean (<code>BotBean</code>) is a Java class that contains the <code>respond</code> method. This method compares the incoming chat message with a set of predefined questions and returns a chat response.</p>
<pre xml:space="preserve" class="oac_no_warn">
@Named
public class BotBean {
    public String respond(String msg) { ... }
}
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1296" name="sthref1296"></a>
<h3 class="sect3"><span class="secnum">18.12.1.2</span> The WebSocket Endpoint</h3>
<p>The WebSocket endpoint (<code>BotEndpoint</code>) is an annotated endpoint that performs the following functions:</p>
<ul>
<li>
<p>Receives messages from clients</p>
</li>
<li>
<p>Forwards messages to clients</p>
</li>
<li>
<p>Maintains a list of connected clients</p>
</li>
<li>
<p>Invokes the bot agent functionality</p>
</li>
</ul>
<p>The endpoint specifies its deployment URI and the message encoders and decoders using the <code>ServerEndpoint</code> annotation. The endpoint obtains an instance of the <code>BotBean</code> class and a managed executor service resource through dependency injection:</p>
<pre xml:space="preserve" class="oac_no_warn">
@ServerEndpoint(
   value = "/websocketbot",
   decoders = { MessageDecoder.class }, 
   encoders = { JoinMessageEncoder.class, ChatMessageEncoder.class, 
                InfoMessageEncoder.class, UsersMessageEncoder.class }
)
/* There is a BotEndpoint instance per connection */
public class BotEndpoint {
   private static final Logger logger = Logger.getLogger("BotEndpoint");
   /* Bot functionality bean */
   @Inject private BotBean botbean;
   /* Executor service for asynchronous processing */
   @Resource(name="comp/DefaultManagedExecutorService")
   private ManagedExecutorService mes;
   
   @OnOpen
   public void openConnection(Session session) {
       logger.log(Level.INFO, "Connection opened.");
   }
   ...
}
</pre>
<p>The <code>message</code> method processes incoming messages from clients. The decoder converts incoming text messages into <code>JoinMessage</code> or <code>ChatMessage</code> objects, which inherit from the <code>Message</code> class. The <code>message</code> method receives a <code>Message</code> object as a parameter:</p>
<pre xml:space="preserve" class="oac_no_warn">
@OnMessage
public void message(Session session, Message msg) {
   logger.log(Level.INFO, "Received: {0}", msg.toString());
   
   if (msg instanceof JoinMessage) {
      /* Add the new user and notify everybody */
      JoinMessage jmsg = (JoinMessage) msg;
      session.getUserProperties().put("name", jmsg.getName());
      session.getUserProperties().put("active", true);
      logger.log(Level.INFO, "Received: {0}", jmsg.toString());
      sendAll(session, new InfoMessage(jmsg.getName() + 
              " has joined the chat"));
      sendAll(session, new ChatMessage("Duke", jmsg.getName(), 
              "Hi there!!"));
      sendAll(session, new UsersMessage(this.getUserList(session)));
      
   } else if (msg instanceof ChatMessage) {
      /* Forward the message to everybody */
      ChatMessage cmsg = (ChatMessage) msg;
      logger.log(Level.INFO, "Received: {0}", cmsg.toString());
      sendAll(session, cmsg);
      if (cmsg.getTarget().compareTo("Duke") == 0) {
         /* The bot replies to the message */
         mes.submit(new Runnable() {
            @Override
            public void run() {
               String resp = botbean.respond(cmsg.getMessage());
               sendAll(session, new ChatMessage("Duke",
                       cmsg.getName(), resp));
            }
         });
      }
   }
}
</pre>
<p>If the message is a join message, the endpoint adds the new user to the list and notifies all connected clients. If the message is a chat message, the endpoint forwards it to all connected clients.</p>
<p>If a chat message is for the bot agent, the endpoint obtains a response using the <code>BotBean</code> instance and sends it to all connected clients. The <code>sendAll</code> method is similar to the example in <a href="websocket005.htm#BABIFBCG">Sending Messages to All Peers Connected to an Endpoint</a>.</p>
<p><span class="bold">Asynchronous Processing and Concurrency Considerations</span></p>
<p>The WebSocket endpoint calls the <code>BotBean.respond</code> method to obtain a response from the bot. In this example, this is a blocking operation; the user that sent the associated message would not be able to send or receive other chat messages until the operation completes. To avoid this problem, the endpoint obtains an executor service from the container and executes the blocking operation in a different thread using the <code>ManagedExecutorService.submit</code> method from Concurrency Utilities for Java EE.</p>
<p>The Java API for WebSocket specification requires that Java EE implementations instantiate endpoint classes once per connection. This facilitates the development of WebSocket endpoints, because you are guaranteed that only one thread is executing the code in a WebSocket endpoint class at any given time. When you introduce a new thread in an endpoint, as in this example, you must ensure that variables and methods accessed by more than one thread are thread safe. In this example, the code in <code>BotBean</code> is thread safe, and the <code>BotEndpoint.sendAll</code> method has been declared <code>synchronized</code>.</p>
<p>Refer to <a href="concurrency-utilities.htm#GKJIQ8">Chapter 56, "Concurrency Utilities for Java EE"</a> for more information on the managed executor service and Concurrency Utilities for Java EE.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1297" name="sthref1297"></a>
<h3 class="sect3"><span class="secnum">18.12.1.3</span> The Application Messages</h3>
<p>The classes that represent application messages (<code>Message</code>, <code>ChatMessage</code>, <code>InfoMessage</code>, <code>JoinMessage</code>, and <code>UsersMessage</code>) contain only properties and getter and setter methods. For example, the <code>ChatMessage</code> class looks like this:</p>
<pre xml:space="preserve" class="oac_no_warn">
public class ChatMessage extends Message {
    private String name;
    private String target;
    private String message;
    /* ... Constructor, getters, and setters ... */
}
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1298" name="sthref1298"></a>
<h3 class="sect3"><span class="secnum">18.12.1.4</span> The Encoder Classes</h3>
<p>The encoder classes convert application message objects into JSON text using the Java API for JSON Processing. For example, the <code>ChatMessageEncoder</code> class is implemented as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
/* Encode a ChatMessage as JSON.
 * For example, (new ChatMessage("Peter","Duke","How are you?"))
 * is encoded as follows:
 * {"type":"chat","target":"Duke","message":"How are you?"}
 */
public class ChatMessageEncoder implements Encoder.Text&lt;ChatMessage&gt; {
   @Override
   public void init(EndpointConfig ec) { }
   @Override
   public void destroy() { }
   @Override
   public String encode(ChatMessage chatMessage) throws EncodeException {
      // Access properties in chatMessage and write JSON text...
   }
}
</pre>
<p>See <a href="jsonp.htm#GLRBB">Chapter 19</a>, <a href="jsonp.htm#GLRBB">JSON Processing</a> for more information on the Java API for JSON Processing.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1299" name="sthref1299"></a>
<h3 class="sect3"><span class="secnum">18.12.1.5</span> The Message Decoder</h3>
<p>The message decoder (<code>MessageDecoder</code>) class converts WebSocket text messages into application messages by parsing JSON text. It is implemented as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">
/* Decode a JSON message into a JoinMessage or a ChatMessage.
 * For example, the incoming message
 * {"type":"chat","name":"Peter","target":"Duke","message":"How are you?"}
 * is decoded as (new ChatMessage("Peter", "Duke", "How are you?"))
 */
public class MessageDecoder implements Decoder.Text&lt;Message&gt; {
    /* Stores the name-value pairs from a JSON message as a Map */
    private Map&lt;String,String&gt; messageMap;

    @Override
    public void init(EndpointConfig ec) { }
    @Override
    public void destroy() { }

    /* Create a new Message object if the message can be decoded */
    @Override
    public Message decode(String string) throws DecodeException {
       Message msg = null;
       if (willDecode(string)) {
          switch (messageMap.get("type")) {
             case "join":
                msg = new JoinMessage(messageMap.get("name"));
                break;
             case "chat":
                msg = new ChatMessage(messageMap.get("name"),
                                      messageMap.get("target"),
                                      messageMap.get("message"));
          }
       } else {
          throw new DecodeException(string, "[Message] Can't decode.");
       }
       return msg;
   }
   
   /* Decode a JSON message into a Map and check if it contains
    * all the required fields according to its type. */
   @Override
   public boolean willDecode(String string) {
      // Convert JSON data from the message into a name-value map...
      // Check if the message has all the fields for its message type...
   }
}
</pre></div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1300" name="sthref1300"></a>
<h3 class="sect3"><span class="secnum">18.12.1.6</span> The HTML Page</h3>
<p>The HTML page (<code>index.html</code>) contains a field for the user name. After the user types a name and clicks <span class="bold">Join</span>, three text areas are available: one to type and send messages, one for the chat room, and one with the list of users. The page also contains a WebSocket console that shows the messages sent and received as JSON text.</p>
<p>The JavaScript code on the page uses the WebSocket API to connect to the endpoint, send messages, and designate callback methods. The WebSocket API is supported by most modern browsers and is widely used for web client development with HTML5.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1301" name="sthref1301"></a>
<h2 class="sect2"><span class="secnum">18.12.2</span> Running the websocketbot Example Application</h2>
<p>This section describes how to run the <code>websocketbot</code> example application using NetBeans IDE and from the command line.</p>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1302" name="sthref1302"></a>
<h3 class="sect3"><span class="secnum">18.12.2.1</span> To Run the websocketbot Example Application Using NetBeans IDE</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>From the <span class="bold">File</span> menu, choose <span class="bold">Open Project</span>.</p>
</li>
<li>
<p>In the Open Project dialog box, navigate to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="italic">tut-install</span>/examples/web/websocket
</pre></li>
<li>
<p>Select the <code>websocketbot</code> folder.</p>
</li>
<li>
<p>Click <span class="bold">Open Project</span>.</p>
</li>
<li>
<p>In the <span class="bold">Projects</span> tab, right-click the <code>websocketbot</code> project and select <span class="bold">Run</span>.</p>
<p>This command builds and packages the application into a WAR file, <code>websocketbot.war</code>, located in the <code>target/</code> directory; deploys it to the server; and launches a web browser window with the following URL:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/websocketbot/
</pre>
<p>See <a href="#BABDDAAG">To Test the websocketbot Example Application</a> for more information.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref1303" name="sthref1303"></a>
<h3 class="sect3"><span class="secnum">18.12.2.2</span> To Run the websocketbot Example Application Using Maven</h3>
<ol>
<li>
<p>Make sure that GlassFish Server has been started (see <a href="usingexamples002.htm#BNADI">Starting and Stopping GlassFish Server</a>).</p>
</li>
<li>
<p>In a terminal window, go to:</p>
<pre xml:space="preserve" class="oac_no_warn">
<span class="italic">tut-install</span>/examples/web/websocket/websocketbot/
</pre></li>
<li>
<p>Enter the following command to deploy the application:</p>
<pre xml:space="preserve" class="oac_no_warn">
mvn install
</pre></li>
<li>
<p>Open a web browser window and type the following address:</p>
<pre xml:space="preserve" class="oac_no_warn">
http://localhost:8080/websocketbot/
</pre>
<p>See <a href="#BABDDAAG">To Test the websocketbot Example Application</a> for more information.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BABDDAAG" name="BABDDAAG"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h3 class="sect3"><span class="secnum">18.12.2.3</span> To Test the websocketbot Example Application</h3>
<ol>
<li>
<p>On the main page, type your name on the first text field and press the Enter key.</p>
<p>The list of connected users appears on the text area on the right. The text area on the left is the chat room.</p>
</li>
<li>
<p>Type a message on the text area below the login button. For example, type the messages in bold and press enter to obtain responses similar to the following:</p>
<pre xml:space="preserve" class="oac_no_warn">
[--Peter has joined the chat--]
Duke: @Peter Hi there!!
Peter: <span class="bold">@Duke how are you?</span>
Duke: @Peter I'm doing great, thank you!
Peter: <span class="bold">@Duke when is your birthday?</span>
Duke: @Peter My birthday is on May 23rd. Thanks for asking!
</pre></li>
<li>
<p>Join the chat from another browser window by copying and pasting the URI on the address bar and joining with a different name.</p>
<p>The new user name appears in the list of users in both browser windows. You can send messages from either window and see how they appear in the other.</p>
</li>
<li>
<p>Click <span class="bold">Show WebSocket Console</span>.</p>
<p>The console shows the messages sent and received as JSON text.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --> 
				
                </div>  
				<!-- End ind div tag -->
                <!-- /////////////// End content copied from DARB output ////////////// -->



                

                <!-- START NEXT_PREVIOUS BUTTONS -->
				<div class="pagestepper">
<table class="simple oac_no_warn" summary="" cellpadding="0" cellspacing="0" width="100%">
<tbody>
<tr>
<td><div align="left"><a href="websocket011.htm"><img src="../images/previouspage.gif" alt="Previous" border="0" /></a></div></td>
<td><div align="right"><a href="websocket013.htm"><img src="../images/nextpage.gif" alt="Next" border="0" /></a></div></td>
</tr>
</tbody></table>
</div>		          
                <!-- END NEXT_PREVIOUS BUTTONS -->


                <!-- end #mainContent -->
            </div>
			<br class="clearfloat" />
            <!--///////// End Main Content /////////-->



            <!--///////// Footer /////////-->
            <div id="footer">

                <!-- Start SiteCatalyst (Omniture) code   -->
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code_download.js"></script>
                <script type="text/javascript" src="http://www.oracle.com/ocom/groups/systemobject/@mktg_admin/documents/systemobject/s_code.js"></script>


                <!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->

                <!--  Below code will send the info to Omniture server -->
                <script  type="text/javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

                <!-- End SiteCatalyst code -->



                <!-- Footer Legal info -->
                <div id="blur"><span class="copyrightlogo">Copyright 2014, Oracle and/or its affiliates. All rights reserved.</span>
                    <a href="../../dcommon/html/cpyr.htm"><br />
                        <span class="copyrightlogo">Legal Notices</span></a></div> <!-- End footer legal info -->

                <!-- end #footer -->
            </div>
            <!--///////// End Footer /////////-->

            <!-- end #container -->
        </div>


    </body>
</html>

